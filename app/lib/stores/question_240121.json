[
  {
    "category": "GraphQL",
    "question": "GraphQL은 무엇이며, 어떻게 REST API와 다릅니까?",
    "options": [
      "GraphQL은 데이터베이스 관리 시스템입니다.",
      "GraphQL은 쿼리 언어로, 클라이언트가 필요한 데이터만 요청할 수 있고, 과다 또는 부족한 데이터를 받지 않도록 합니다.",
      "GraphQL은 REST API와 완전히 동일한 구조를 가지며, 차이점이 없습니다.",
      "GraphQL은 데이터베이스 스키마를 자동으로 생성하며, 개발자가 데이터 모델을 작성할 필요가 없습니다."
    ],
    "correct_answer": 1,
    "answer_description": "GraphQL은 쿼리 언어로, 클라이언트가 필요한 데이터만 요청할 수 있고, 과다 또는 부족한 데이터를 받지 않도록 합니다. 이는 REST API와는 다른 특징 중 하나입니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '쿼리(Query)'와 '뮤테이션(Mutation)'은 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'쿼리'는 데이터를 읽는 데 사용되고, '뮤테이션'은 데이터를 수정 또는 생성하는 데 사용됩니다. 일반적으로 '쿼리'는 GET 요청과 유사하게 사용되며 '뮤테이션'은 POST 또는 PUT 요청과 유사하게 사용됩니다.",
      "'쿼리'는 데이터를 수정 또는 생성하는 데 사용되고, '뮤테이션'은 데이터를 읽는 데 사용됩니다. 일반적으로 '쿼리'는 POST 또는 PUT 요청과 유사하게 사용되며 '뮤테이션'은 GET 요청과 유사하게 사용됩니다.",
      "'쿼리'와 '뮤테이션'은 동일한 역할을 하며, 상황에 따라 사용하는 것에 차이가 없습니다.",
      "'쿼리'와 '뮤테이션'은 데이터베이스와의 연동을 위한 별도의 라이브러리로 제공되며, GraphQL과 직접 관련이 없습니다."
    ],
    "correct_answer": 0,
    "answer_description": "'쿼리'는 데이터를 읽는 데 사용되고, '뮤테이션'은 데이터를 수정 또는 생성하는 데 사용됩니다. 이는 REST API에서의 GET 및 POST 또는 PUT 요청과 유사한 역할을 합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마(Schema)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'스키마'는 GraphQL 서버의 주소 및 포트를 설정하는 데 사용됩니다.",
      "'스키마'는 GraphQL 서비스의 모든 데이터 형식과 쿼리 유형을 정의하며, 클라이언트에게 사용 가능한 데이터와 쿼리를 알려줍니다.",
      "'스키마'는 GraphQL에서 쿼리를 작성하는 데 사용되며, 쿼리의 구조를 정의합니다.",
      "'스키마'는 데이터베이스와의 연동을 위한 설정 파일을 나타냅니다."
    ],
    "correct_answer": 1,
    "answer_description": "'스키마(Schema)'는 GraphQL 서비스의 모든 데이터 형식과 쿼리 유형을 정의하며, 클라이언트에게 사용 가능한 데이터와 쿼리를 알려줍니다. 클라이언트는 '스키마'를 기반으로 쿼리를 작성하고 요청할 수 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '리졸버(Resolver)'는 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'리졸버'는 GraphQL 스키마의 구조를 정의하는 데 사용되며, 데이터 모델을 작성하는 데 필요합니다.",
      "'리졸버'는 GraphQL 스키마에서 데이터를 가져오는 함수로, 쿼리의 필드에 대한 데이터를 반환하는 데 사용됩니다.",
      "'리졸버'는 클라이언트와 GraphQL 서버 간의 통신을 설정하는 데 사용되며, HTTP 요청 및 응답을 처리합니다.",
      "'리졸버'는 GraphQL 쿼리를 작성하는 데 사용되며, 쿼리의 구조를 정의합니다."
    ],
    "correct_answer": 1,
    "answer_description": "'리졸버(Resolver)'는 GraphQL 스키마에서 데이터를 가져오는 함수로, 쿼리의 필드에 대한 데이터를 반환하는 데 사용됩니다. 리졸버는 클라이언트의 쿼리를 해석하고 데이터베이스 또는 다른 소스에서 필요한 데이터를 검색합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL은 어떤 주요 이점을 가지고 있으며, 언제 사용해야 하나요?",
    "options": [
      "GraphQL은 고정된 데이터 구조로 제한되지 않으며, 클라이언트가 필요한 데이터를 정확하게 요청할 수 있어 네트워크 트래픽을 최적화합니다. 복잡한 데이터 요구 사항이 있는 경우에 사용해야 합니다.",
      "GraphQL은 REST API와 완전히 동일한 구조를 가지고 있으며, 추가 이점을 제공하지 않습니다.",
      "GraphQL은 오직 단일 종류의 데이터만 처리할 수 있으며, 복잡한 데이터 요구 사항에는 적합하지 않습니다.",
      "GraphQL은 데이터를 자동으로 캐싱하고, 클라이언트에게 캐시된 데이터를 제공합니다. 모든 종류의 애플리케이션에서 사용해야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "GraphQL은 고정된 데이터 구조로 제한되지 않으며, 클라이언트가 필요한 데이터를 정확하게 요청할 수 있어 네트워크 트래픽을 최적화하고 복잡한 데이터 요구 사항을 처리하는 데 적합합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마(Schema)'는 어떤 역할을 하며, 어떤 언어로 정의됩니까?",
    "options": [
      "'스키마'는 데이터베이스의 구조를 정의하며, SQL 언어로 정의됩니다.",
      "'스키마'는 GraphQL 서비스의 데이터 모델과 쿼리 가능한 필드를 정의하며, SDL(Schema Definition Language) 언어로 정의됩니다.",
      "'스키마'는 클라이언트와 서버 간의 통신을 설정하며, JavaScript 언어로 정의됩니다.",
      "'스키마'는 REST API의 엔드포인트를 정의하며, JSON 형식으로 정의됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'스키마(Schema)'는 GraphQL 서비스의 데이터 모델과 쿼리 가능한 필드를 정의하는데 사용됩니다. 이를 정의하는 언어는 SDL(Schema Definition Language) 언어입니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '타입(Type)'은 어떤 역할을 하며, 어떤 기본 타입과 사용자 정의 타입이 있나요?",
    "options": [
      "'타입'은 GraphQL 스키마에서 필드의 데이터 유형을 정의하며, 기본 타입으로는 'String', 'Int', 'Boolean' 등이 있습니다.",
      "'타입'은 GraphQL에서 사용자 정의 쿼리를 정의하는 데 사용되며, 기본 타입으로는 'Query', 'Mutation', 'Subscription' 등이 있습니다.",
      "'타입'은 GraphQL에서 스키마를 정의하는 데 사용되며, 기본 타입으로는 'Schema', 'Field', 'Directive' 등이 있습니다.",
      "'타입'은 GraphQL에서 데이터베이스 연동을 위한 설정을 정의하는 데 사용되며, 기본 타입으로는 'Database', 'Table', 'Column' 등이 있습니다."
    ],
    "correct_answer": 0,
    "answer_description": "'타입(Type)'은 GraphQL 스키마에서 필드의 데이터 유형을 정의하며, 기본 타입으로는 'String', 'Int', 'Boolean'과 같은 스칼라 타입 및 사용자 정의 타입이 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '인터페이스(Interface)'는 어떤 역할을 하며, 어떤 상황에서 사용됩니까?",
    "options": [
      "'인터페이스'는 GraphQL에서 필드의 집합을 정의하며, 모든 타입에서 공통적으로 사용됩니다.",
      "'인터페이스'는 GraphQL에서 데이터베이스 연동을 위한 설정을 정의하며, 특정 타입에서만 사용됩니다.",
      "'인터페이스'는 GraphQL에서 오직 스칼라 타입과 함께 사용되며, 사용자 정의 타입에서는 사용되지 않습니다.",
      "'인터페이스'는 GraphQL에서 사용자 정의 쿼리를 정의하는 데 사용되며, 스칼라 타입에서만 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'인터페이스(Interface)'는 GraphQL에서 필드의 집합을 정의하며, 모든 타입에서 공통적으로 사용됩니다. 이를 통해 클라이언트는 여러 타입의 객체를 단일 인터페이스로 쿼리할 수 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '리졸버(Resolver)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'리졸버'는 GraphQL 쿼리를 파싱하여 데이터베이스와 통신하고 요청된 데이터를 반환하는 함수입니다.",
      "'리졸버'는 GraphQL 스키마를 정의하는 데 사용되며, 데이터 모델을 작성하는 데 필요합니다.",
      "'리졸버'는 GraphQL 쿼리의 구조를 정의하는 데 사용되며, 쿼리의 필드를 설명합니다.",
      "'리졸버'는 GraphQL 서버와 클라이언트 간의 통신을 설정하고 처리하는 데 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'리졸버(Resolver)'는 GraphQL 쿼리를 파싱하여 데이터베이스와 통신하고 요청된 데이터를 반환하는 함수입니다. 리졸버 함수는 각각의 필드에 대해 정의되며 실제 데이터를 검색하고 반환합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '뮤테이션(Mutation)'은 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'뮤테이션'은 데이터를 읽는 데 사용되고, '쿼리(Query)'와 동일한 역할을 합니다.",
      "'뮤테이션'은 데이터를 수정 또는 생성하는 데 사용되며, 클라이언트가 서버에 데이터 변경을 요청할 때 사용됩니다.",
      "'뮤테이션'은 데이터를 캐싱하고 클라이언트에게 캐시된 데이터를 제공하는 데 사용됩니다.",
      "'뮤테이션'은 GraphQL에서 사용하지 않는 기능이며, 대신 REST API를 사용해야 합니다."
    ],
    "correct_answer": 1,
    "answer_description": "'뮤테이션(Mutation)'은 GraphQL에서 데이터를 수정 또는 생성하는 데 사용됩니다. 클라이언트가 서버에 데이터 변경을 요청할 때 사용되며, 일반적으로 POST 요청과 유사한 역할을 합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마 진화(Schema Evolution)'는 어떤 개념을 나타내며, 왜 중요한가요?",
    "options": [
      "'스키마 진화'는 GraphQL 스키마를 변경하고 확장하는 프로세스를 나타내며, 새로운 필드나 타입을 추가하거나 기존 필드를 수정하는 데 사용됩니다.",
      "'스키마 진화'는 GraphQL 스키마를 더 이상 수정하지 않는 것을 의미하며, 스키마의 변경은 권장하지 않습니다.",
      "'스키마 진화'는 클라이언트와 서버 간의 통신을 설정하는 것을 나타내며, GraphQL 스키마는 변하지 않습니다.",
      "'스키마 진화'는 GraphQL에서 사용되지 않는 개념이며, 스키마는 항상 고정된 상태여야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "'스키마 진화(Schema Evolution)'는 GraphQL 스키마를 변경하고 확장하는 프로세스를 나타내며, 새로운 필드나 타입을 추가하거나 기존 필드를 수정하는 데 사용됩니다. 이는 GraphQL API를 발전시키고 새로운 기능을 추가하는 데 중요합니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "HTML과 CSS에서 '클래스(class)'와 '아이디(id)'의 차이점은 무엇입니까?",
    "options": [
      "클래스(class)는 여러 요소에 적용할 수 있으며, 동일한 클래스를 여러 요소에 사용할 수 있습니다. 아이디(id)는 유일해야 하며 한 페이지에서 한 번만 사용해야 합니다.",
      "클래스(class)는 유일해야 하며 한 페이지에서 한 번만 사용해야 합니다. 아이디(id)는 여러 요소에 적용할 수 있으며, 동일한 아이디를 여러 요소에 사용할 수 있습니다.",
      "클래스(class)는 스타일을 적용하기 위한 속성을 정의하는 데 사용하고, 아이디(id)는 요소의 위치를 지정하는 데 사용됩니다.",
      "클래스(class)와 아이디(id) 모두 동일한 용도로 사용할 수 있으며, 차이점은 없습니다."
    ],
    "correct_answer": 0,
    "answer_description": "HTML과 CSS에서 '클래스(class)'는 여러 요소에 적용할 수 있으며, 동일한 클래스를 여러 요소에 사용할 수 있습니다. 반면 '아이디(id)'는 유일해야 하며 한 페이지에서 한 번만 사용해야 합니다. 이로 인해 아이디는 주로 페이지 내에서 고유한 요소를 가리키는 데 사용되며, 클래스는 여러 요소를 그룹화하고 스타일을 적용하는 데 사용됩니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "HTML에서 'div' 요소는 어떤 역할을 하며, CSS를 사용하여 'div' 요소에 스타일을 적용하는 방법은 무엇인가요?",
    "options": [
      "'div' 요소는 블록 레벨 요소로, 웹 페이지의 구조를 나타내며 다른 요소들을 그룹화할 때 주로 사용됩니다. 'div' 요소에 CSS 스타일을 적용하려면 'class'나 'id' 속성을 사용하여 선택자를 정의하고 해당 선택자에 스타일을 적용합니다.",
      "'div' 요소는 인라인 요소로, 텍스트를 감싸는 역할을 합니다. 'div' 요소에 CSS 스타일을 적용하려면 'style' 속성을 사용하여 직접 스타일 속성을 정의합니다.",
      "'div' 요소는 특별한 역할을 하지 않으며, 그 자체로 아무런 시각적 효과를 가지지 않습니다. 'div' 요소에 스타일을 적용하기 위해서는 별도의 선택자를 사용하지 않고, 'div' 요소에 직접 스타일 속성을 정의합니다.",
      "'div' 요소는 텍스트 요소를 표현하는 역할을 하며, 스타일을 적용하기 위해서는 'text-style' 속성을 사용합니다."
    ],
    "correct_answer": 0,
    "answer_description": "HTML에서 'div' 요소는 웹 페이지의 구조를 나타내며 다른 요소들을 그룹화할 때 주로 사용됩니다. 'div' 요소에 CSS 스타일을 적용하려면 'class'나 'id' 속성을 사용하여 선택자를 정의하고 해당 선택자에 스타일을 적용합니다. 이를 통해 'div' 요소에 원하는 디자인을 적용할 수 있습니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "CSS의 'float' 속성은 어떤 역할을 하며, 어떤 상황에서 사용되나요?",
    "options": [
      "'float' 속성은 요소를 좌측 또는 우측으로 부유시키는 데 사용됩니다. 이를 통해 텍스트 및 다른 요소가 주위로 감싸게 할 수 있으며, 예를 들어 이미지를 텍스트 주위로 정렬할 때 사용됩니다.",
      "'float' 속성은 요소의 투명도를 조절하는 데 사용됩니다. 이를 통해 요소를 투명하게 만들거나 반투명하게 만들 수 있으며, 시각적 효과를 줄 때 사용됩니다.",
      "'float' 속성은 요소의 크기를 조절하는 데 사용됩니다. 이를 통해 요소의 너비와 높이를 설정하거나 조절할 수 있으며, 레이아웃을 제어할 때 사용됩니다.",
      "'float' 속성은 요소의 위치를 중앙 정렬하는 데 사용됩니다. 이를 통해 요소를 가로 또는 세로 중앙에 배치할 수 있으며, 웹 페이지의 가운데 정렬에 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'float' 속성은 요소를 좌측 또는 우측으로 부유시키는 데 사용됩니다. 이를 통해 텍스트 및 다른 요소가 주위로 감싸게 할 수 있으며, 주로 이미지를 텍스트 주위로 정렬하거나 레이아웃을 제어할 때 사용됩니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "HTML에서 'inline' 요소와 'block' 요소의 차이는 무엇이며, 언제 각각을 사용해야 하나요?",
    "options": [
      "'inline' 요소는 한 줄에 나란히 표시되며 컨텐츠의 일부만 차지하며, 'block' 요소는 새로운 줄에서 시작되며 가로 폭 전체를 차지합니다. 'inline' 요소는 텍스트 내에서 사용하며, 'block' 요소는 구조적인 레이아웃을 만들 때 사용합니다.",
      "'inline' 요소는 컨텐츠를 수직으로 쌓으며, 'block' 요소는 컨텐츠를 가로로 배열합니다. 'inline' 요소는 주로 페이지의 가로 정렬에 사용하며, 'block' 요소는 세로 정렬에 사용합니다.",
      "'inline' 요소와 'block' 요소는 완전히 동일한 역할을 하며, 언제나 상황에 따라 사용자의 기호에 따라 선택할 수 있습니다.",
      "'inline' 요소는 텍스트 컨텐츠에만 사용할 수 있으며, 'block' 요소는 이미지 및 미디어 컨텐츠에만 사용할 수 있습니다."
    ],
    "correct_answer": 0,
    "answer_description": "HTML에서 'inline' 요소와 'block' 요소의 주요 차이점은 표시되는 방식입니다. 'inline' 요소는 한 줄에 나란히 표시되며 컨텐츠의 일부만 차지하며, 'block' 요소는 새로운 줄에서 시작되며 가로 폭 전체를 차지합니다. 'inline' 요소는 텍스트 내에서 사용하고 텍스트의 일부로 간주됩니다. 반면 'block' 요소는 구조적인 레이아웃을 만들 때 사용하며, 새로운 블록을 시작하고 여러 요소를 수직으로 쌓을 때 유용합니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "HTML에서 'box model'은 무엇이며, 어떤 구성 요소로 이루어져 있으며, 각 구성 요소가 무엇을 의미하나요?",
    "options": [
      "'box model'은 HTML 요소의 시각적 모양을 정의하는 모델로, 'content', 'padding', 'border', 'margin'으로 구성됩니다. 'content'는 내용 영역을 나타내며, 'padding'은 내용과 테두리 사이의 여백을 나타내고, 'border'는 테두리를 나타내며, 'margin'은 요소 주위의 공간을 나타냅니다.",
      "'box model'은 HTML 요소의 위치를 결정하는 모델로, 'top', 'right', 'bottom', 'left'으로 구성됩니다. 'top'은 요소의 상단 위치를 나타내며, 'right'은 오른쪽 위치를 나타내고, 'bottom'은 하단 위치를 나타내며, 'left'은 왼쪽 위치를 나타냅니다.",
      "'box model'은 HTML 요소의 색상을 정의하는 모델로, 'red', 'green', 'blue', 'alpha'로 구성됩니다. 'red'는 빨간색 성분을 나타내며, 'green'은 초록색 성분을 나타내고, 'blue'는 파란색 성분을 나타내며, 'alpha'는 투명도를 나타냅니다.",
      "'box model'은 HTML 요소의 레이아웃을 정의하는 모델로, 'header', 'footer', 'sidebar', 'content'로 구성됩니다. 'header'는 페이지 상단의 헤더 영역을 나타내며, 'footer'는 페이지 하단의 푸터 영역을 나타내고, 'sidebar'는 사이드바를 나타내며, 'content'는 주요 컨텐츠를 나타냅니다."
    ],
    "correct_answer": 0,
    "answer_description": "'box model'은 HTML 요소의 시각적 모양을 정의하는 모델로, 'content', 'padding', 'border', 'margin'으로 구성됩니다. 'content'는 내용 영역을 나타내며 요소의 실제 내용이 표시되는 곳입니다. 'padding'은 내용과 테두리 사이의 여백을 나타내며 내용과 테두리 사이의 간격을 조절합니다. 'border'는 요소의 테두리를 나타내며 내용 주위에 그려지는 테두리를 정의합니다. 'margin'은 요소 주위의 공간을 나타내며 요소와 다른 요소 간의 간격을 조절합니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "CSS의 'position' 속성에는 어떤 값들이 있으며, 각각의 값은 어떤 역할을 하는지 설명해주세요.",
    "options": [
      "'static', 'relative', 'absolute', 'fixed'이 있으며, 'static'은 요소를 일반적인 문서 흐름에 따라 배치하고, 'relative'는 요소를 자신의 원래 위치를 기준으로 배치하며, 'absolute'는 요소를 가장 가까운 부모 요소를 기준으로 배치하고, 'fixed'는 뷰포트를 기준으로 요소를 고정 위치에 배치합니다.",
      "'float', 'clear', 'display', 'position'이 있으며, 'float'는 요소를 좌우로 부유시키는 데 사용되고, 'clear'는 부유 요소 주변의 요소들과의 관계를 설정하며, 'display'는 요소의 표시 방법을 설정하고, 'position'은 요소의 위치를 조절합니다.",
      "'flex', 'grid', 'inline-block', 'block'이 있으며, 'flex'는 플렉스 박스 레이아웃을 설정하고, 'grid'는 그리드 레이아웃을 설정하며, 'inline-block'은 인라인 박스와 같이 표시되지만 블록 요소처럼 배치되고, 'block'은 블록 레벨 요소를 설정합니다.",
      "'margin', 'padding', 'border', 'outline'가 있으며, 각각은 요소의 여백, 안쪽 여백, 테두리, 외곽선을 설정하는 데 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "CSS의 'position' 속성은 'static', 'relative', 'absolute', 'fixed' 값들을 가집니다. 'static'은 요소를 일반적인 문서 흐름에 따라 배치하며, 'relative'는 요소를 자신의 원래 위치를 기준으로 배치합니다. 'absolute'는 요소를 가장 가까운 부모 요소를 기준으로 배치하며, 'fixed'는 뷰포트를 기준으로 요소를 고정 위치에 배치합니다. 이러한 'position' 값들을 사용하여 웹 페이지의 레이아웃을 조절하고 요소의 위치를 제어할 수 있습니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "Sass와 Less는 어떤 종류의 웹 개발 도구이며, 어떻게 기존 CSS와 다른가요?",
    "options": [
      "Sass와 Less는 웹 개발에 사용되는 JavaScript 라이브러리로, 웹 페이지의 상호작용을 개선합니다.",
      "Sass와 Less는 CSS 전처리기로, 기존 CSS를 확장하고 보완하는 도구입니다. 변수, 중첩, 및 함수와 같은 추가 기능을 제공하며 코드의 재사용성과 유지 보수성을 향상시킵니다.",
      "Sass와 Less는 브라우저의 렌더링 엔진을 개선하는 웹 퍼포먼스 도구로, 웹 페이지의 성능을 향상시킵니다.",
      "Sass와 Less는 웹 애플리케이션의 보안을 강화하는 보안 도구로, 데이터 유출과 사이트 공격을 방지합니다."
    ],
    "correct_answer": 1,
    "answer_description": "Sass와 Less는 CSS 전처리기로, 기존 CSS를 확장하고 보완하는 도구입니다. 이들은 변수, 중첩, 및 함수와 같은 추가 기능을 제공하며, 코드의 재사용성과 유지 보수성을 향상시킵니다. 이러한 전처리기는 CSS 코드 작성을 더 효율적으로 만들고, 스타일시트를 더 구조화된 형태로 관리할 수 있도록 도와줍니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "Sass와 Less에서 변수(Variables)는 어떤 역할을 하며, 어떻게 사용되나요?",
    "options": [
      "Sass와 Less의 변수는 숫자 및 문자열 값을 저장하는 데 사용되며, 주로 웹 페이지의 텍스트 내용에 적용됩니다.",
      "Sass와 Less의 변수는 CSS 속성값을 저장하는 데 사용되며, 스타일시트 내에서 재사용 가능한 값을 정의하고 유지 보수성을 향상시킵니다.",
      "Sass와 Less의 변수는 웹 페이지의 레이아웃을 조정하는 데 사용되며, 주로 그리드 시스템을 설정하는 데 쓰입니다.",
      "Sass와 Less의 변수는 JavaScript 코드와 상호작용하기 위한 플래그로 사용되며, 이벤트 처리와 관련이 있습니다."
    ],
    "correct_answer": 1,
    "answer_description": "Sass와 Less에서 변수(Variables)는 CSS 속성값을 저장하는 데 사용됩니다. 이들 변수를 사용하여 스타일시트 내에서 재사용 가능한 값을 정의하고 유지 보수성을 향상시킵니다. 이로써 스타일 값을 한 번만 정의하고, 여러 곳에서 사용할 수 있으며 변경 시에도 한 곳에서 수정할 수 있어 코드의 일관성을 유지할 수 있습니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "Sass와 Less에서 '중첩(Nesting)'은 어떤 개념이며, 어떻게 사용되나요?",
    "options": [
      "'중첩'은 HTML 요소들을 서로 중첩하여 레이아웃을 구성하는 것을 의미하며, Sass와 Less에서는 이러한 HTML 요소 중첩을 표현하기 위해 사용됩니다.",
      "'중첩'은 스타일 규칙을 더 효율적으로 작성하기 위해 사용되는 개념으로, 부모 요소와 자식 요소 사이의 스타일 관계를 표현합니다. 이를 통해 더 간결하고 가독성이 좋은 스타일시트를 작성할 수 있습니다.",
      "'중첩'은 코드의 중복을 제거하기 위한 프로그래밍 기법으로, 변수와 함께 사용되며, 스타일시트의 유지 보수성을 향상시킵니다.",
      "'중첩'은 스타일을 순차적으로 나열하는 방법으로, 기존 CSS와 거의 유사한 개념입니다."
    ],
    "correct_answer": 1,
    "answer_description": "Sass와 Less에서 '중첩(Nesting)'은 스타일 규칙을 더 효율적으로 작성하기 위한 개념으로, 부모 요소와 자식 요소 사이의 스타일 관계를 표현합니다. 이를 통해 더 간결하고 가독성이 좋은 스타일시트를 작성할 수 있습니다. 중첩을 사용하면 스타일 규칙을 중첩 구조로 표현할 수 있어서 코드의 가독성을 높이고 유지 보수성을 향상시킬 수 있습니다."
  },
  {
    "category": "HTML/CSS (Sass, Less)",
    "question": "Sass와 Less에서 '믹스인(Mixin)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'믹스인'은 웹 페이지에서 이미지와 텍스트를 혼합하는 기술로, 그래픽 디자인에서 주로 사용됩니다.",
      "'믹스인'은 Sass와 Less에서 재사용 가능한 스타일 선언을 정의하는 데 사용되며, '@include' 지시어를 사용하여 스타일 규칙을 가져올 때 사용합니다.",
      "'믹스인'은 웹 페이지에서 다양한 요소 간의 상호작용을 처리하기 위한 JavaScript 코드를 나타냅니다.",
      "'믹스인'은 CSS 속성을 무시하고 기본 HTML 요소 스타일을 사용하도록 지정하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "Sass와 Less에서 '믹스인(Mixin)'은 재사용 가능한 스타일 선언을 정의하는 데 사용됩니다. 이를 통해 일반적인 스타일 패턴을 한 번 정의하고, 여러 요소에서 재사용할 수 있습니다. '@include' 지시어를 사용하여 스타일 규칙을 가져와서 원하는 요소에 적용합니다. 믹스인을 사용하면 코드 중복을 줄이고 유지 보수성을 향상시킬 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js는 무엇이며, 어떤 유형의 애플리케이션을 개발하는 데 사용될 수 있나요?",
    "options": [
      "Node.js는 웹 브라우저에서 실행되는 JavaScript 환경을 제공하며, 웹 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션 및 CLI 도구와 같은 다양한 유형의 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 모바일 애플리케이션의 개발을 위한 도구로 사용되며, 안드로이드 및 iOS 앱을 개발할 수 있습니다.",
      "Node.js는 데이터베이스 시스템을 관리하고 연동하는 데 사용되며, 데이터 웨어하우스 애플리케이션을 개발하는 데 주로 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션, CLI 도구 등 다양한 유형의 애플리케이션을 개발하는 데 사용됩니다. 주로 비동기 및 이벤트 기반 프로그래밍을 통해 높은 성능을 제공하며, JavaScript 언어를 활용하여 서버 측 애플리케이션을 작성할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리, 및 공유하는 데 사용됩니다.",
      "'npm'은 Node.js의 내장 모듈 중 하나로, 파일 시스템 작업을 수행하는 데 사용됩니다.",
      "'npm'은 Node.js의 프레임워크로, 웹 애플리케이션을 구축하는 데 사용됩니다.",
      "'npm'은 Node.js에서 데이터베이스를 연동하는 데 사용되며, SQL 쿼리를 실행합니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리, 및 공유하는 데 사용됩니다. 'npm'을 통해 프로젝트의 종속성을 관리하고 필요한 라이브러리를 쉽게 설치할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '콜백(Callback)' 함수는 어떤 역할을 하며, 주로 어떤 상황에서 사용되나요?",
    "options": [
      "'콜백' 함수는 웹 페이지의 이벤트 처리를 위해 사용되며, 클릭 또는 마우스 호버와 같은 사용자 상호작용을 처리합니다.",
      "'콜백' 함수는 비동기 작업의 완료 또는 에러 핸들링을 위해 사용되며, 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 주로 사용됩니다.",
      "'콜백' 함수는 자바스크립트 함수 호출 시에 파라미터를 전달하는 데 사용되며, 모든 함수 호출에서 필수적으로 사용됩니다.",
      "'콜백' 함수는 모든 종류의 예외 처리를 위해 사용되며, 코드의 오류를 처리하기 위해 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'콜백(Callback)' 함수는 주로 비동기 작업의 완료 또는 에러 핸들링을 위해 사용됩니다. 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 사용되며, 작업이 완료되면 콜백 함수가 호출되어 결과를 처리합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js는 어떤 언어로 개발되었으며, 어떤 프로그래밍 언어를 기반으로 동작하나요?",
    "options": [
      "Node.js는 C++ 언어로 개발되었으며, JavaScript를 기반으로 동작합니다.",
      "Node.js는 Java 언어로 개발되었으며, Python을 기반으로 동작합니다.",
      "Node.js는 JavaScript 언어로 개발되었으며, Ruby를 기반으로 동작합니다.",
      "Node.js는 PHP 언어로 개발되었으며, TypeScript를 기반으로 동작합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Node.js는 C++ 언어로 개발되었으며, JavaScript를 기반으로 동작합니다. 이로 인해 JavaScript를 서버 측에서 실행할 수 있게 되었고, 비동기 및 이벤트 기반 프로그래밍을 지원합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇의 약자이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 'Node Package Manager'의 약자로, Node.js 패키지를 설치, 관리, 및 공유하는 도구입니다.",
      "'npm'은 'Node Project Manager'의 약자로, Node.js 프로젝트를 생성 및 관리하는 도구입니다.",
      "'npm'은 'Node Programming Module'의 약자로, Node.js에서 사용되는 프로그래밍 모듈을 생성하는 도구입니다.",
      "'npm'은 'Node Package Module'의 약자로, Node.js 모듈을 번들로 묶는 도구입니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 'Node Package Manager'의 약자로, Node.js 패키지를 설치, 관리, 및 공유하는 도구입니다. 개발자들은 'npm'을 사용하여 Node.js 모듈과 라이브러리를 손쉽게 관리할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '비동기(Asynchronous)' 프로그래밍은 무엇이며, 어떤 장점을 제공하나요?",
    "options": [
      "'비동기' 프로그래밍은 Node.js에서 지원하지 않는 프로그래밍 패러다임으로, 동기식 작업만 가능합니다.",
      "'비동기' 프로그래밍은 작업을 순차적으로 실행하는 대신, 병렬로 실행하고 작업이 완료될 때 콜백 함수를 호출하는 방식을 의미하며, 높은 성능과 응답성을 제공합니다.",
      "'비동기' 프로그래밍은 Node.js의 모든 작업을 동기식으로 처리하며, 병렬 처리 기능을 제공하지 않습니다.",
      "'비동기' 프로그래밍은 느린 작업을 처리할 때 유용하며, 실시간 애플리케이션에는 적합하지 않습니다."
    ],
    "correct_answer": 1,
    "answer_description": "'비동기(Asynchronous)' 프로그래밍은 작업을 순차적으로 실행하는 대신, 병렬로 실행하고 작업이 완료될 때 콜백 함수를 호출하는 방식을 의미합니다. 이를 통해 Node.js는 높은 성능과 응답성을 제공하며, I/O 작업과 같이 시간이 오래 걸리는 작업을 효율적으로 처리할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js란 무엇이며, 어떤 유형의 애플리케이션을 개발하는 데 주로 사용됩니까?",
    "options": [
      "Node.js는 웹 브라우저에서 실행되는 JavaScript 환경을 제공하며, 웹 프론트엔드 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션 및 CLI 도구와 같은 다양한 유형의 서버 애플리케이션을 개발하는 데 주로 사용됩니다.",
      "Node.js는 모바일 애플리케이션의 개발을 위한 도구로 사용됩니다.",
      "Node.js는 데스크톱 애플리케이션을 개발하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션, CLI 도구 등 다양한 서버 애플리케이션을 개발하는 데 주로 사용됩니다. 비동기 및 이벤트 기반 프로그래밍을 지원하여 높은 성능을 제공합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리 및 공유하는 데 사용됩니다.",
      "'npm'은 Node.js의 내장 모듈 중 하나로, 파일 시스템 작업을 수행하는 데 사용됩니다.",
      "'npm'은 Node.js에서 사용자 인터페이스를 구축하는 데 사용됩니다.",
      "'npm'은 Node.js에서 데이터베이스를 연결하는 데 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리 및 공유하는 데 사용됩니다. 'npm'을 통해 프로젝트의 종속성을 관리하고 필요한 라이브러리를 쉽게 설치할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '콜백(Callback)' 함수는 어떤 역할을 하며, 주로 어떤 상황에서 사용되나요?",
    "options": [
      "'콜백' 함수는 웹 페이지의 이벤트 처리를 위해 사용되며, 클릭 또는 마우스 호버와 같은 사용자 상호작용을 처리합니다.",
      "'콜백' 함수는 비동기 작업의 완료 또는 에러 핸들링을 위해 사용되며, 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 주로 사용됩니다.",
      "'콜백' 함수는 자바스크립트 함수 호출 시에 파라미터를 전달하는 데 사용되며, 모든 함수 호출에서 필수적으로 사용됩니다.",
      "'콜백' 함수는 모든 종류의 예외 처리를 위해 사용되며, 코드의 오류를 처리하기 위해 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'콜백(Callback)' 함수는 주로 비동기 작업의 완료 또는 에러 핸들링을 위해 사용됩니다. 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 사용되며, 작업이 완료되면 콜백 함수가 호출되어 결과를 처리합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack은 무엇이며, 어떤 주요 기능과 장점을 제공하나요?",
    "options": [
      "Webpack은 웹 브라우저를 효율적으로 렌더링하기 위한 그래픽 라이브러리로, 웹 페이지의 시각적인 부분을 관리합니다.",
      "Webpack은 JavaScript 모듈 번들러로, 여러 개의 JavaScript 파일과 관련 리소스를 하나로 결합하여 웹 애플리케이션을 구성하는 도구입니다. 주요 기능으로 모듈 로딩, 코드 번들링, 리소스 번들링을 제공하며, 코드 스플리팅, 로더, 플러그인을 통한 확장성을 갖추고 있습니다.",
      "Webpack은 데이터베이스 관리 시스템으로, 데이터를 저장하고 검색하는 데 사용됩니다.",
      "Webpack은 웹 페이지의 디자인과 레이아웃을 관리하기 위한 CSS 프레임워크입니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack은 JavaScript 모듈 번들러로, 여러 개의 JavaScript 파일과 관련 리소스를 하나로 결합하여 웹 애플리케이션을 구성하는 도구입니다. 주요 기능으로 모듈 로딩, 코드 번들링, 리소스 번들링을 제공하며, 코드 스플리팅, 로더, 플러그인을 통한 확장성을 갖추고 있습니다. 이를 통해 웹 개발자는 모듈 시스템을 사용하여 코드를 구조화하고 관리할 수 있으며, 최적화된 번들링을 통해 웹 애플리케이션의 성능을 향상시킬 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 주요 개념 중 하나인 '로더(Loader)'는 어떤 역할을 하며, 어떤 종류의 파일들을 처리하는 데 사용되나요?",
    "options": [
      "'로더'는 웹 애플리케이션의 레이아웃을 구성하는 역할을 하며, HTML 파일을 처리합니다.",
      "'로더'는 JavaScript 파일을 번들링하고 압축하는 역할을 하며, 주로 CSS 파일들을 처리합니다.",
      "'로더'는 웹 애플리케이션에 필요한 리소스 파일들을 처리하는 역할을 하며, JavaScript, CSS, 이미지, 폰트 등 다양한 파일 형식들을 처리합니다.",
      "'로더'는 사용자 인터페이스의 상호작용을 관리하는 역할을 하며, JavaScript와 관련된 파일을 처리합니다."
    ],
    "correct_answer": 2,
    "answer_description": "Webpack의 '로더(Loader)'는 웹 애플리케이션에 필요한 리소스 파일들을 처리하는 역할을 합니다. 이로써 JavaScript, CSS, 이미지, 폰트 등 다양한 파일 형식들을 웹 애플리케이션 번들에 포함시킬 수 있습니다. '로더'는 이러한 파일들을 불러와서 웹팩 번들러가 이해할 수 있는 형태로 변환하거나 처리합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '코드 스플리팅(Code Splitting)'이란 무엇이며, 어떤 장점을 제공하나요?",
    "options": [
      "'코드 스플리팅'은 웹팩 번들에서 코드를 나누어 여러 개의 작은 번들로 분리하는 기술로, 초기 페이지 로딩 시간을 줄이고 성능을 최적화합니다.",
      "'코드 스플리팅'은 웹팩 설정 파일을 나누어 관리하는 기술로, 설정의 복잡성을 줄이고 관리를 용이하게 합니다.",
      "'코드 스플리팅'은 웹팩의 로더 중 하나로, 이미지 및 미디어 파일을 비동기적으로 로딩하는 데 사용됩니다.",
      "'코드 스플리팅'은 웹 애플리케이션에서 사용하는 모든 외부 패키지를 번들에 포함하는 기술로, 애플리케이션 크기를 늘립니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '코드 스플리팅'은 웹팩 번들에서 코드를 나누어 여러 개의 작은 번들로 분리하여 초기 페이지 로딩 시간을 줄이고 성능을 최적화하는 기술입니다. 이를 통해 필요한 코드만 로딩되며, 사용자 경험을 개선하고 애플리케이션 성능을 향상시킬 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '플러그인(Plugin)'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'플러그인'은 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 코드 번들링을 수행합니다.",
      "'플러그인'은 웹팩 번들에 대한 추가 기능을 제공하는 도구로, 번들의 최적화, 파일 생성, 환경 변수 설정 등 다양한 작업을 수행합니다.",
      "'플러그인'은 웹팩의 로더 중 하나로, CSS 파일을 번들에 포함하는 역할을 합니다.",
      "'플러그인'은 웹팩의 설정을 단순화하는 역할을 수행하며, 번들링 과정을 간소화합니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack의 '플러그인(Plugin)'은 웹팩 번들에 대한 추가 기능을 제공하는 도구입니다. 이들 플러그인은 번들의 최적화, 파일 생성, 환경 변수 설정, 번들 결과물 분석 등 다양한 작업을 수행할 수 있습니다. 플러그인은 웹팩의 강력한 확장성을 제공하며, 더 복잡하고 맞춤형 작업을 수행하는 데 사용됩니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '프로덕션 모드(Production Mode)'와 '개발 모드(Development Mode)'의 차이점은 무엇이며, 언제 어떻게 사용되나요?",
    "options": [
      "'프로덕션 모드'는 애플리케이션의 배포 버전을 위해 사용되며, 코드 최적화와 압축을 적용하여 성능을 최대화합니다. '개발 모드'는 개발 중에 사용되며, 디버깅 및 개발 편의성을 위해 추가 정보를 제공합니다.",
      "'프로덕션 모드'와 '개발 모드'는 서로 동일하며, 모드 설정은 웹팩에서 무시됩니다.",
      "'프로덕션 모드'는 개발 중에 사용되며, 더 많은 디버깅 정보를 제공하며, '개발 모드'는 배포 시에 사용되며 코드 최적화와 압축을 수행합니다.",
      "'프로덕션 모드'와 '개발 모드'는 웹팩의 버전 차이에 따라 다르며, 특정 웹팩 버전에서만 사용 가능합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '프로덕션 모드'와 '개발 모드'는 서로 다른 설정으로, '프로덕션 모드'는 애플리케이션의 배포 버전을 위해 사용되며, 코드 최적화와 압축을 적용하여 성능을 최대화합니다. 반면 '개발 모드'는 개발 중에 사용되며, 디버깅 및 개발 편의성을 위해 추가 정보를 제공합니다. 이러한 모드 설정은 웹팩의 'mode' 옵션으로 지정하며, 적절한 모드를 선택하여 개발 및 배포 프로세스를 관리합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '모듈 번들링(Module Bundling)'은 무엇이며, 어떤 이점을 제공하나요?",
    "options": [
      "'모듈 번들링'은 웹 애플리케이션을 여러 개의 모듈로 나누고, 이 모듈들을 하나의 번들로 결합하는 프로세스를 의미하며, 모듈 간의 의존성을 관리합니다.",
      "'모듈 번들링'은 웹 페이지의 텍스트 내용을 압축하여 페이지 로딩 시간을 단축하는 기술을 의미하며, 성능을 향상시킵니다.",
      "'모듈 번들링'은 웹 애플리케이션에서 사용되는 이미지와 비디오를 번들에 포함하는 기술로, 화면에 빠르게 렌더링됩니다.",
      "'모듈 번들링'은 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 웹 애플리케이션의 로직을 관리합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '모듈 번들링(Module Bundling)'은 웹 애플리케이션을 여러 개의 모듈로 나누고, 이 모듈들을 하나의 번들로 결합하는 프로세스를 의미합니다. 이를 통해 모듈 간의 의존성을 관리하고, 웹 애플리케이션의 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '로더(Loader)'와 '플러그인(Plugin)'의 차이점은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'로더'는 웹팩 번들러에 대한 추가 작업을 수행하며, 주로 파일 변환 및 전처리 작업에 사용됩니다. '플러그인'은 웹팩 번들러의 빌드 과정에 개입하여 번들 결과물을 수정하거나 추가 기능을 제공합니다.",
      "'로더'는 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 웹 애플리케이션의 로직을 관리합니다. '플러그인'은 번들링된 파일을 웹 페이지에 삽입하거나 최적화하는 역할을 합니다.",
      "'로더'와 '플러그인'은 웹팩의 버전 차이에 따라 다르며, 모두 필수적으로 사용되어야 합니다.",
      "'로더'는 웹팩 번들러에 대한 설정을 관리하며, '플러그인'은 웹 애플리케이션의 상태를 관리하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '로더(Loader)'는 웹팩 번들러에 대한 추가 작업을 수행하며, 주로 파일 변환 및 전처리 작업에 사용됩니다. '플러그인(Plugin)'은 웹팩 번들러의 빌드 과정에 개입하여 번들 결과물을 수정하거나 추가 기능을 제공합니다. 이 두 가지는 번들링 프로세스를 커스터마이징하고 확장하는 데 사용됩니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '로더(Loader)'를 사용하여 어떤 종류의 파일을 처리하고 변환할 수 있나요?",
    "options": [
      "'로더'를 사용하여 JavaScript 파일을 번들링하고 압축할 수 있습니다.",
      "'로더'를 사용하여 CSS 파일을 번들링하고 최적화할 수 있습니다.",
      "'로더'를 사용하여 이미지 및 폰트 파일을 번들링하고 압축할 수 있습니다.",
      "'로더'를 사용하여 웹 애플리케이션의 데이터베이스를 관리할 수 있습니다."
    ],
    "correct_answer": 2,
    "answer_description": "Webpack의 '로더(Loader)'를 사용하여 이미지 및 폰트 파일과 같은 리소스 파일을 번들링하고 필요한 변환 작업을 수행할 수 있습니다. 이를 통해 웹 애플리케이션에서 이미지 및 폰트를 효율적으로 처리하고 압축할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '번들(Bundle)'이란 무엇이며, 어떤 장점을 가지고 있나요?",
    "options": [
      "'번들'은 웹 애플리케이션의 화면 구성을 정의하는 파일로, HTML, CSS, JavaScript 등 여러 리소스를 하나의 번들로 묶어 관리합니다.",
      "'번들'은 웹팩의 설정 파일을 의미하며, 웹 애플리케이션의 환경 설정을 저장합니다.",
      "'번들'은 웹 애플리케이션의 이미지 및 비디오 파일을 번들에 포함하는 역할을 합니다.",
      "'번들'은 웹 애플리케이션의 디자인 및 레이아웃을 구성하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '번들(Bundle)'은 웹 애플리케이션에서 사용되는 HTML, CSS, JavaScript 등 여러 리소스 파일을 하나의 번들로 묶어 관리하는 역할을 합니다. 이를 통해 파일 간의 의존성을 관리하고, 로딩 속도를 최적화할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '엔트리 포인트(Entry Point)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'엔트리 포인트'는 웹 애플리케이션의 시작점을 나타내며, 웹팩은 이 포인트를 기반으로 의존성 그래프를 구성합니다.",
      "'엔트리 포인트'는 웹팩 설정 파일 내에서 사용자 인터페이스의 시작 위치를 지정하는 역할을 합니다.",
      "'엔트리 포인트'는 웹 애플리케이션에서 사용자 인터페이스의 디자인을 담당하는 역할을 합니다.",
      "'엔트리 포인트'는 웹 애플리케이션의 데이터베이스 연결을 설정하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '엔트리 포인트(Entry Point)'는 웹 애플리케이션의 시작점을 나타내며, 웹팩은 이 포인트를 기반으로 의존성 그래프를 구성합니다. 이를 통해 웹팩은 필요한 모듈들을 로딩하고 번들링하여 애플리케이션을 구성합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '웹팩 로더(Webpack Loader)'가 하는 역할은 무엇이며, 어떤 유형의 파일들을 처리할 수 있나요?",
    "options": [
      "'웹팩 로더'는 웹팩 설정 파일을 로드하는 역할을 하며, JavaScript 파일을 처리합니다.",
      "'웹팩 로더'는 웹팩 번들에 이미지 및 폰트 파일을 포함하며, 이러한 리소스 파일을 처리합니다.",
      "'웹팩 로더'는 웹 애플리케이션의 스타일과 레이아웃을 설정하는 역할을 하며, CSS 파일을 처리합니다.",
      "'웹팩 로더'는 웹 애플리케이션의 데이터를 관리하는 역할을 하며, JSON 파일을 처리합니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack의 '웹팩 로더(Webpack Loader)'는 다양한 유형의 파일들을 처리하는 역할을 합니다. 주로 이미지 및 폰트 파일과 같은 리소스 파일을 로드하고 번들에 포함할 수 있으며, 필요한 변환 작업을 수행합니다. 이를 통해 웹 애플리케이션에서 리소스 파일을 효율적으로 처리할 수 있습니다."
  },
  {
    "category": "라면",
    "question": "라면을 끓일 때, 면발을 보다 탱글하게 만들기 위한 한 가지 유용한 팁은 무엇일까요?",
    "options": [
      "라면을 끓일 때 물을 많이 사용하면 면발이 더 탱글해집니다.",
      "라면을 끓일 때 면발을 보다 탱글하게 만들기 위해 요리 시간을 늘립니다.",
      "라면을 끓일 때 라면 스프를 물에 먼저 풀어놓고 면을 삶으면 면발이 보다 탱글해집니다.",
      "라면을 끓일 때 소금을 물에 첨가하면 면발이 보다 탱글해집니다."
    ],
    "correct_answer": 2,
    "answer_description": "라면을 끓일 때, 라면 스프를 물에 먼저 풀어놓고 면을 삶으면 면발이 보다 탱글해집니다. 이렇게 하면 면에 스프가 고르게 부착되며, 면발이 더 부드럽고 맛있게 조리됩니다."
  },
  {
    "category": "라면",
    "question": "라면을 조리할 때, 면발이 너무 빨리 떠오르는 것을 방지하려면 어떤 조치를 취해야 할까요?",
    "options": [
      "라면을 끓일 때 고운 소금을 물에 조금 추가하면 면발이 늦게 떠오르게 됩니다.",
      "라면을 끓일 때 중간 불로 조리하면 면발이 더 느리게 떠오르게 됩니다.",
      "라면을 끓일 때 찬 물을 사용하면 면발이 느리게 떠오르게 됩니다.",
      "라면을 끓일 때 물에 조금의 식용유를 추가하면 면발이 느리게 떠오르게 됩니다."
    ],
    "correct_answer": 3,
    "answer_description": "라면을 끓일 때 물에 조금의 식용유를 추가하면 면발이 느리게 떠오르게 됩니다. 식용유는 면과 물 사이에 얇은 오일막을 형성하여 물의 침투를 늦추어 면발이 더 탱글하게 조리됩니다."
  },
  {
    "category": "라면",
    "question": "라면을 끓일 때 면발이 뭉치지 않고 고르게 풀어지게 하기 위해 사용하는 도구는 무엇일까요?",
    "options": [
      "스푼(Spoon)",
      "포크(Fork)",
      "젓가락(Chopsticks)",
      "그릇의 가장자리"
    ],
    "correct_answer": 2,
    "answer_description": "라면을 끓일 때 면발이 뭉치지 않고 고르게 풀어지게 하려면 젓가락(Chopsticks)을 사용합니다. 젓가락을 가볍게 휘젓으면 면발이 분리되어 뭉치지 않게 됩니다."
  },
  {
    "category": "라면",
    "question": "라면을 조리할 때 과도한 물을 버리는 것은 어떤 경우에 유용할까요?",
    "options": [
      "과도한 물을 버리면 라면의 맛이 더 강해집니다.",
      "과도한 물을 버리면 라면의 매운 정도가 줄어듭니다.",
      "과도한 물을 버리면 라면의 영양가가 떨어집니다.",
      "과도한 물을 버리면 라면의 식감이 더 나아집니다."
    ],
    "correct_answer": 1,
    "answer_description": "과도한 물을 버리면 라면의 매운 정도가 줄어듭니다. 만약 라면을 더 적게 매운 맛으로 조리하려면, 조리 중에 물을 덜 사용하고 나중에 필요한 만큼 추가해주세요."
  },
  {
    "category": "라면",
    "question": "라면을 조리할 때, 면발을 더 부드럽게 만들기 위한 한 가지 방법은 무엇일까요?",
    "options": [
      "라면을 삶기 전에 면발을 조금 미리 불려주세요.",
      "라면을 삶기 전에 면발을 얼음물에 담가주세요.",
      "라면을 삶을 때 미리 소금을 물에 첨가하세요.",
      "라면을 삶을 때 물을 끓일 때부터 면발을 넣어주세요."
    ],
    "correct_answer": 0,
    "answer_description": "라면을 조리할 때, 면발을 더 부드럽게 만들기 위해 라면을 삶기 전에 면발을 조금 미리 불려주는 것이 도움이 됩니다. 이렇게 하면 면발이 조리될 때 더 부드럽고 쫄깃한 식감을 가집니다."
  },
  {
    "category": "라면",
    "question": "라면을 끓일 때, 면발을 고루 익히기 위해 어떤 동작을 하면 좋을까요?",
    "options": [
      "라면 끓는 물 속에서 면을 저어주세요.",
      "라면 끓는 물에 더 많은 물을 추가하세요.",
      "라면을 더 오랫동안 끓여야 면발이 고루 익습니다.",
      "라면을 끓일 때 뚜껑을 덮어서 면발을 더 빠르게 익힙니다."
    ],
    "correct_answer": 0,
    "answer_description": "라면을 끓일 때, 면발을 고루 익히기 위해서는 라면 끓는 물 속에서 면을 저어주는 것이 좋습니다. 이렇게 하면 면발이 물에 골고루 노출되어 고르게 익게 됩니다."
  },
  {
    "category": "라면",
    "question": "라면을 먹을 때 더 맛있게 즐기기 위한 아래 재료 중 가장 인기 있는 것은 무엇일까요?",
    "options": [
      "파(Parsley)",
      "치즈(Cheese)",
      "햄(Ham)",
      "시금치(Spinach)"
    ],
    "correct_answer": 1,
    "answer_description": "라면을 먹을 때 더 맛있게 즐기기 위한 추가 재료로 가장 인기 있는 것 중 하나는 치즈(Cheese)입니다. 라면에 치즈를 녹여 넣으면 크림처럼 부드럽고 풍미 있는 맛을 더할 수 있습니다."
  },
  {
    "category": "라면",
    "question": "신라면은 대한민국 인스턴트 라면 시장에서 언제부터 현재까지 1위를 유지하고 있는 라면 브랜드인가요?",
    "options": [
      "1980년부터 현재까지",
      "1990년부터 현재까지",
      "2000년부터 현재까지",
      "2010년부터 현재까지"
    ],
    "correct_answer": 1,
    "answer_description": "신라면은 대한민국 인스턴트 라면 시장에서 1991년부터 현재까지 1위를 유지하고 있는 라면 브랜드입니다."
  },
  {
    "category": "라면",
    "question": "삼양라면은 대한민국에서 어떤 라면 브랜드로 소개되고 있으며, 어떤 역사적 위치를 가지고 있는 라면인가요?",
    "options": [
      "삼양라면은 대한민국 최초의 인스턴트 라면 브랜드로, 라면 시장을 처음 개척한 원조입니다.",
      "삼양라면은 대한민국에서 최초의 매운맛 라면 브랜드로, 매운맛 라면의 선두 주자입니다.",
      "삼양라면은 대한민국에서 최초의 고기맛 라면 브랜드로, 고기맛 라면의 선두 주자입니다.",
      "삼양라면은 대한민국에서 최초의 해물맛 라면 브랜드로, 해물맛 라면의 선두 주자입니다."
    ],
    "correct_answer": 0,
    "answer_description": "삼양라면은 대한민국에서 최초의 인스턴트 라면 브랜드로, 라면 시장을 처음 개척한 원조입니다. 출시 당시 국물 맛은 본래 닭고기 육수였으나 곧 쇠고기 베이스로 변경되었습니다."
  },
  {
    "category": "라면",
    "question": "컵라면 모델에서 리뉴얼되면서 전자레인지 조리를 공식적으로 지원하는 라면 브랜드는 무엇인가요?",
    "options": [
      "신라면",
      "삼양라면",
      "진라면",
      "안성탕면"
    ],
    "correct_answer": 2,
    "answer_description": "컵라면 모델에서 리뉴얼되면서 전자레인지 조리를 공식적으로 지원하는 라면 브랜드는 진라면입니다. 전자레인지에서 조리할 때 뚜껑의 은박을 제거하고 조리하면 끓인 라면과 유사한 맛을 즐길 수 있습니다."
  },
  {
    "category": "라면",
    "question": "신라면의 이름 '신'은 어떤 두 가지 의미를 동시에 가지고 있나요? 이 의미 중 하나는 무엇이며, 다른 하나는 무엇인가요?",
    "options": [
      "신라면의 '신'은 '신춘호 회장의 이름'을 의미하며, '매울 신(辛)'자의 '맵다' 뜻도 가지고 있습니다.",
      "신라면의 '신'은 '새롭다'라는 뜻을 가지며, '라면의 새로운 시작'을 의미합니다.",
      "신라면의 '신'은 '신선하다'라는 뜻을 가지며, '신선한 맛과 향기'를 의미합니다.",
      "신라면의 '신'은 '신비로운' 뜻을 가지며, '라면의 신비로운 풍미'를 의미합니다."
    ],
    "correct_answer": 0,
    "answer_description": "신라면의 이름 '신'은 두 가지 의미를 동시에 가지고 있습니다. 첫 번째 의미는 '신춘호 회장의 이름'을 의미하며, 두 번째 의미는 '매울 신(辛)'자의 '맵다' 뜻도 가지고 있습니다."
  },
  {
    "category": "라면",
    "question": "삼양라면이 최초로 출시된 년도는 언제이며, 어떤 국물 맛으로 시작되었나요?",
    "options": [
      "삼양라면은 1950년에 출시되었으며, 닭고기 육수로 시작되었습니다.",
      "삼양라면은 1963년에 출시되었으며, 닭고기 육수로 시작되었습니다.",
      "삼양라면은 1970년에 출시되었으며, 쇠고기 육수로 시작되었습니다.",
      "삼양라면은 1980년에 출시되었으며, 해물 육수로 시작되었습니다."
    ],
    "correct_answer": 1,
    "answer_description": "삼양라면은 1963년에 최초로 출시되었으며, 닭고기 육수로 시작되었습니다. 그 후에 쇠고기 베이스로 변경되었고, 현재는 햄맛 베이스로 정착되어 있습니다."
  },
  {
    "category": "라면",
    "question": "오뚜기에서 1988년에 출시한 라면 브랜드는 무엇이며, 어떤 라면 맛을 대표하고 있나요?",
    "options": [
      "오뚜기라면은 매운맛 라면으로, 매운맛을 선호하는 사람들에게 인기가 있습니다.",
      "오뚜기라면은 순한맛 라면으로, 부드러운 맛을 선호하는 사람들에게 인기가 있습니다.",
      "오뚜기라면은 중간 맛 라면으로, 다양한 입맛에 맞는 맛을 제공합니다.",
      "오뚜기라면은 고급스러운 풍미의 라면으로, 고기맛을 대표합니다."
    ],
    "correct_answer": 2,
    "answer_description": "오뚜기에서 1988년에 출시한 라면 브랜드는 진라면으로, 중간 맛 라면으로 다양한 입맛에 맞는 맛을 제공합니다."
  },
  {
    "category": "라면",
    "question": "대한민국에서 가장 오래된 인스턴트 라면 브랜드는 무엇인가요? 이 브랜드가 처음에는 어떤 국물 맛으로 시작되었나요?",
    "options": [
      "삼양라면으로, 처음에는 해물 육수로 시작되었습니다.",
      "진라면으로, 처음에는 순한맛으로 시작되었습니다.",
      "신라면으로, 처음에는 매운맛으로 시작되었습니다.",
      "오뚜기라면으로, 처음에는 쇠고기 육수로 시작되었습니다."
    ],
    "correct_answer": 0,
    "answer_description": "대한민국에서 가장 오래된 인스턴트 라면 브랜드는 삼양라면으로, 처음에는 해물 육수로 시작되었습니다."
  },
  {
    "category": "라면",
    "question": "대한민국 라면 시장에서 '삼양라면', '진라면', '신라면'과 함께 입지가 매우 탄탄한 스테디셀러 라면 브랜드 중 하나인 오뚜기에서 1963년에 출시한 라면은 무엇인가요?",
    "options": [
      "오뚜기 짜장면",
      "오뚜기 안성탕면",
      "오뚜기 우동",
      "오뚜기 카레라면"
    ],
    "correct_answer": 1,
    "answer_description": "오뚜기에서 1963년에 출시한 라면은 '오뚜기 안성탕면'입니다."
  },
  {
    "category": "라면",
    "question": "신라면은 대한민국에서 언제 처음으로 출시되었고, 현재까지 어떤 성과를 이루어냈나요?",
    "options": [
      "신라면은 1991년에 처음 출시되었으며, 현재까지 대한민국의 인스턴트 라면 시장에서 1위를 유지하고 있습니다.",
      "신라면은 1963년에 처음 출시되었으며, 현재까지 대한민국에서 매년 생산량 1위를 차지하고 있습니다.",
      "신라면은 1988년에 처음 출시되었으며, 현재까지 대한민국에서 2위를 유지하고 있습니다.",
      "신라면은 1975년에 처음 출시되었으며, 현재까지 대한민국에서 매월 100만 개 이상 판매되고 있습니다."
    ],
    "correct_answer": 0,
    "answer_description": "신라면은 1991년에 처음 출시되어 현재까지 대한민국의 인스턴트 라면 시장에서 1위를 유지하고 있습니다. 이는 대한민국에서 가장 유명한 라면 중 하나로, 국민 라면으로 불리기도 합니다."
  },
  {
    "category": "라면",
    "question": "삼양라면은 어떤 특별한 역사적 위치를 가지고 있으며, 어떤 변화를 겪었나요?",
    "options": [
      "삼양라면은 대한민국 최초의 인스턴트 라면으로 1963년에 출시되었으며, 현재는 부대찌개를 연상시키는 맛으로 인기를 얻고 있습니다.",
      "삼양라면은 1988년에 처음 출시되었으며, 현재는 대한민국에서 라면 시장을 개척한 원조 라면으로 알려져 있습니다.",
      "삼양라면은 1975년에 처음 출시되었으며, 현재는 대한민국에서 가장 오래된 라면 중 하나로 남아 있습니다.",
      "삼양라면은 1991년에 처음 출시되었으며, 현재는 대한민국에서 2위의 라면 브랜드로 유명합니다."
    ],
    "correct_answer": 0,
    "answer_description": "삼양라면은 대한민국 최초의 인스턴트 라면으로 1963년에 출시되어 현재는 부대찌개를 연상시키는 맛으로 인기를 얻고 있습니다. 이 라면은 대한민국 라면 시장을 개척한 원조 라면 중 하나로 알려져 있습니다."
  },
  {
    "category": "라면",
    "question": "진라면은 언제 오뚜기에서 처음 출시되었으며, 어떤 특징을 가지고 있나요?",
    "options": [
      "진라면은 1963년에 오뚜기에서 처음 출시되었으며, 현재는 매운맛과 순한맛 2종류의 제품을 판매하고 있습니다.",
      "진라면은 1975년에 오뚜기에서 처음 출시되었으며, 현재는 대한민국에서 가장 오래된 라면 중 하나입니다.",
      "진라면은 1988년에 오뚜기에서 처음 출시되었으며, 현재는 대한민국에서 1위의 라면 브랜드로 알려져 있습니다.",
      "진라면은 1991년에 오뚜기에서 처음 출시되었으며, 현재는 컵라면 형태로 주로 판매되고 있습니다."
    ],
    "correct_answer": 0,
    "answer_description": "진라면은 1963년에 오뚜기에서 처음 출시되었으며, 현재는 매운맛과 순한맛 2종류의 제품을 판매하고 있습니다. 봉지라면으로, 면이 퍼진 듯한 식감을 가지며 전자레인지 조리도 가능합니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견의 분리불안을 예방하고 효과적인 훈련을 위해 견주는 어떤 조치를 취해야 할까요?",
    "options": [
      "반려견을 첫날부터 잠자리를 분리하고 방석이나 쿠션을 사용하되, 소리가 나지 않는 것을 선택해야 합니다.",
      "반려견의 휴식 공간에 거울이나 유리를 추가하여 시각적 자극을 덜하도록 해야 합니다.",
      "반려견에게 숨을 수 있는 공간을 제공하고, 배변 훈련을 할 때 정해진 장소에서만 배변하도록 유도해야 합니다.",
      "반려견의 배변을 불쾌하지 않게 즐거운 활동으로 인식시키고, 자동 급식기를 활용하여 식습관을 관리해야 합니다.",
      "반려견과 함께 놀면서 간식을 제공하는 간식 로봇을 활용하여 사회화 훈련을 진행해야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "반려견의 분리불안을 예방하려면 첫날부터 잠자리를 분리하고 방석이나 쿠션을 사용하되, 소리가 나지 않는 것을 선택해야 합니다. 또한, 거울이나 유리와 같은 시각적 자극을 피하고, 숨을 수 있는 공간을 제공하며, 배변 훈련을 통해 정해진 장소에서만 배변하도록 유도해야 합니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견의 사회화를 위해 어떤 활동을 할 수 있나요?",
    "options": [
      "다른 개와 놀이공원에 가서 놀이 시간을 가집니다.",
      "반려견을 주기적으로 다른 개들과 만나게 하여 사회적 상호작용을 촉진합니다.",
      "반려견을 외출 시 짖지 않도록 훈련하며 다른 개들과 함께 걷기를 합니다.",
      "사회화 훈련은 필요하지 않으며 반려견은 혼자 놀게 두는 것이 좋습니다."
    ],
    "correct_answer": 1,
    "answer_description": "반려견의 사회화를 위해 반려견을 주기적으로 다른 개들과 만나게 하여 사회적 상호작용을 촉진해야 합니다. 이는 개의 사회성을 향상시키고 다른 개들과의 상호작용에 대한 긍정적인 경험을 제공합니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견에게 훈련 시간을 얼마나 할당해야 하나요?",
    "options": [
      "매일 30분 이상의 훈련 시간을 할당해야 합니다.",
      "매주 한 번씩 충분합니다. 훈련 시간을 별도로 할당하지 않아도 됩니다.",
      "훈련은 반려견의 성격과 필요에 따라 달라져야 하며 정기적인 훈련이 중요합니다.",
      "반려견에게 훈련 시간을 할당하는 것은 불필요하며 시간을 낭비하는 것입니다."
    ],
    "correct_answer": 2,
    "answer_description": "반려견에게 훈련 시간을 할당하는 것은 반려견의 성격과 필요에 따라 다르며, 정기적인 훈련이 중요합니다. 일상적인 훈련은 반려견의 행동과 관계 개선에 도움이 됩니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견의 교육에서 어떤 것을 먼저 가르쳐야 할까요?",
    "options": [
      "기본적인 복종 명령과 마너를 먼저 가르쳐야 합니다.",
      "트릭이나 엔터테인먼트 관련 명령을 가르쳐야 합니다.",
      "종류에 관계없이 모든 명령을 동시에 가르쳐야 합니다.",
      "교육은 필요하지 않으며 반려견은 자유롭게 행동하게 두어야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "반려견의 교육에서 기본적인 복종 명령과 마너를 먼저 가르치는 것이 중요합니다. 이는 반려견의 안전과 사회적 상호작용을 원활하게 만들며, 다른 훈련을 진행하기 위한 기초를 제공합니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견을 훈련할 때 어떤 도구를 사용해야 할까요?",
    "options": [
      "훈련 목줄, 양끈, 클릭 훈련 도구와 같은 훈련용 도구를 사용해야 합니다.",
      "도구를 사용하지 않고 손으로 훈련해야 합니다.",
      "음성 명령만으로 훈련해야 하며 도구는 사용하지 않아야 합니다.",
      "훈련 도구는 반려견을 혼란스럽게 할 수 있으므로 사용하지 않아야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "반려견 훈련을 위해 훈련 목줄, 양끈, 클릭 훈련 도구와 같은 훈련용 도구를 사용하는 것이 도움이 됩니다. 이러한 도구는 원하는 행동을 강조하고 보상을 주는 데 도움을 줍니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견의 매너 훈련은 어떤 명령을 포함해야 하나요?",
    "options": [
      "매너 훈련은 '앉아', '기다려', '걷기'와 같은 기본적인 명령을 포함해야 합니다.",
      "매너 훈련은 '놀자', '먹자'와 같은 재미있는 명령을 포함해야 합니다.",
      "매너 훈련은 '잠자라', '그냥 있어'와 같은 명령을 포함해야 합니다.",
      "매너 훈련은 어떠한 명령도 포함하지 않아야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "반려견의 매너 훈련은 '앉아', '기다려', '걷기'와 같은 기본적인 명령을 포함해야 합니다. 이러한 명령은 반려견이 사회적 상황에서 예의 바르게 행동하도록 도와줍니다."
  },
  {
    "category": "반려견 훈련",
    "question": "반려견을 야외 활동에 참여시킬 때 어떤 주의사항을 고려해야 하나요?",
    "options": [
      "반려견을 가끔씩 야외로 데리가서 산책하며 적절한 운동을 제공해야 합니다.",
      "반려견을 항상 야외에 두고 그냥 두면 됩니다.",
      "반려견을 다른 개들과 놀이공원에 가서 놀게 하며 행복하게 놀도록 해야 합니다.",
      "반려견은 야외에서 자유롭게 행동해도 괜찮으며 특별한 주의사항은 필요하지 않습니다."
    ],
    "correct_answer": 0,
    "answer_description": "반려견을 야외 활동에 참여시킬 때, 적절한 운동과 산책을 제공하는 것이 중요합니다. 그러나 항상 안전을 고려하고 예방적으로 틈새 없이 파묻어야 합니다."
  }
]