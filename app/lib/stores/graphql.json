[
  {
    "category": "GraphQL",
    "question": "GraphQL은 무엇이며, 어떻게 REST API와 다릅니까?",
    "options": [
      "GraphQL은 데이터베이스 관리 시스템입니다.",
      "GraphQL은 쿼리 언어로, 클라이언트가 필요한 데이터만 요청할 수 있고, 과다 또는 부족한 데이터를 받지 않도록 합니다.",
      "GraphQL은 REST API와 완전히 동일한 구조를 가지며, 차이점이 없습니다.",
      "GraphQL은 데이터베이스 스키마를 자동으로 생성하며, 개발자가 데이터 모델을 작성할 필요가 없습니다."
    ],
    "correct_answer": 1,
    "answer_description": "GraphQL은 쿼리 언어로, 클라이언트가 필요한 데이터만 요청할 수 있고, 과다 또는 부족한 데이터를 받지 않도록 합니다. 이는 REST API와는 다른 특징 중 하나입니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '쿼리(Query)'와 '뮤테이션(Mutation)'은 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'쿼리'는 데이터를 읽는 데 사용되고, '뮤테이션'은 데이터를 수정 또는 생성하는 데 사용됩니다. 일반적으로 '쿼리'는 GET 요청과 유사하게 사용되며 '뮤테이션'은 POST 또는 PUT 요청과 유사하게 사용됩니다.",
      "'쿼리'는 데이터를 수정 또는 생성하는 데 사용되고, '뮤테이션'은 데이터를 읽는 데 사용됩니다. 일반적으로 '쿼리'는 POST 또는 PUT 요청과 유사하게 사용되며 '뮤테이션'은 GET 요청과 유사하게 사용됩니다.",
      "'쿼리'와 '뮤테이션'은 동일한 역할을 하며, 상황에 따라 사용하는 것에 차이가 없습니다.",
      "'쿼리'와 '뮤테이션'은 데이터베이스와의 연동을 위한 별도의 라이브러리로 제공되며, GraphQL과 직접 관련이 없습니다."
    ],
    "correct_answer": 0,
    "answer_description": "'쿼리'는 데이터를 읽는 데 사용되고, '뮤테이션'은 데이터를 수정 또는 생성하는 데 사용됩니다. 이는 REST API에서의 GET 및 POST 또는 PUT 요청과 유사한 역할을 합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마(Schema)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'스키마'는 GraphQL 서버의 주소 및 포트를 설정하는 데 사용됩니다.",
      "'스키마'는 GraphQL 서비스의 모든 데이터 형식과 쿼리 유형을 정의하며, 클라이언트에게 사용 가능한 데이터와 쿼리를 알려줍니다.",
      "'스키마'는 GraphQL에서 쿼리를 작성하는 데 사용되며, 쿼리의 구조를 정의합니다.",
      "'스키마'는 데이터베이스와의 연동을 위한 설정 파일을 나타냅니다."
    ],
    "correct_answer": 1,
    "answer_description": "'스키마(Schema)'는 GraphQL 서비스의 모든 데이터 형식과 쿼리 유형을 정의하며, 클라이언트에게 사용 가능한 데이터와 쿼리를 알려줍니다. 클라이언트는 '스키마'를 기반으로 쿼리를 작성하고 요청할 수 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '리졸버(Resolver)'는 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'리졸버'는 GraphQL 스키마의 구조를 정의하는 데 사용되며, 데이터 모델을 작성하는 데 필요합니다.",
      "'리졸버'는 GraphQL 스키마에서 데이터를 가져오는 함수로, 쿼리의 필드에 대한 데이터를 반환하는 데 사용됩니다.",
      "'리졸버'는 클라이언트와 GraphQL 서버 간의 통신을 설정하는 데 사용되며, HTTP 요청 및 응답을 처리합니다.",
      "'리졸버'는 GraphQL 쿼리를 작성하는 데 사용되며, 쿼리의 구조를 정의합니다."
    ],
    "correct_answer": 1,
    "answer_description": "'리졸버(Resolver)'는 GraphQL 스키마에서 데이터를 가져오는 함수로, 쿼리의 필드에 대한 데이터를 반환하는 데 사용됩니다. 리졸버는 클라이언트의 쿼리를 해석하고 데이터베이스 또는 다른 소스에서 필요한 데이터를 검색합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL은 어떤 주요 이점을 가지고 있으며, 언제 사용해야 하나요?",
    "options": [
      "GraphQL은 고정된 데이터 구조로 제한되지 않으며, 클라이언트가 필요한 데이터를 정확하게 요청할 수 있어 네트워크 트래픽을 최적화합니다. 복잡한 데이터 요구 사항이 있는 경우에 사용해야 합니다.",
      "GraphQL은 REST API와 완전히 동일한 구조를 가지고 있으며, 추가 이점을 제공하지 않습니다.",
      "GraphQL은 오직 단일 종류의 데이터만 처리할 수 있으며, 복잡한 데이터 요구 사항에는 적합하지 않습니다.",
      "GraphQL은 데이터를 자동으로 캐싱하고, 클라이언트에게 캐시된 데이터를 제공합니다. 모든 종류의 애플리케이션에서 사용해야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "GraphQL은 고정된 데이터 구조로 제한되지 않으며, 클라이언트가 필요한 데이터를 정확하게 요청할 수 있어 네트워크 트래픽을 최적화하고 복잡한 데이터 요구 사항을 처리하는 데 적합합니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마(Schema)'는 어떤 역할을 하며, 어떤 언어로 정의됩니까?",
    "options": [
      "'스키마'는 데이터베이스의 구조를 정의하며, SQL 언어로 정의됩니다.",
      "'스키마'는 GraphQL 서비스의 데이터 모델과 쿼리 가능한 필드를 정의하며, SDL(Schema Definition Language) 언어로 정의됩니다.",
      "'스키마'는 클라이언트와 서버 간의 통신을 설정하며, JavaScript 언어로 정의됩니다.",
      "'스키마'는 REST API의 엔드포인트를 정의하며, JSON 형식으로 정의됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'스키마(Schema)'는 GraphQL 서비스의 데이터 모델과 쿼리 가능한 필드를 정의하는데 사용됩니다. 이를 정의하는 언어는 SDL(Schema Definition Language) 언어입니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '타입(Type)'은 어떤 역할을 하며, 어떤 기본 타입과 사용자 정의 타입이 있나요?",
    "options": [
      "'타입'은 GraphQL 스키마에서 필드의 데이터 유형을 정의하며, 기본 타입으로는 'String', 'Int', 'Boolean' 등이 있습니다.",
      "'타입'은 GraphQL에서 사용자 정의 쿼리를 정의하는 데 사용되며, 기본 타입으로는 'Query', 'Mutation', 'Subscription' 등이 있습니다.",
      "'타입'은 GraphQL에서 스키마를 정의하는 데 사용되며, 기본 타입으로는 'Schema', 'Field', 'Directive' 등이 있습니다.",
      "'타입'은 GraphQL에서 데이터베이스 연동을 위한 설정을 정의하는 데 사용되며, 기본 타입으로는 'Database', 'Table', 'Column' 등이 있습니다."
    ],
    "correct_answer": 0,
    "answer_description": "'타입(Type)'은 GraphQL 스키마에서 필드의 데이터 유형을 정의하며, 기본 타입으로는 'String', 'Int', 'Boolean'과 같은 스칼라 타입 및 사용자 정의 타입이 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '인터페이스(Interface)'는 어떤 역할을 하며, 어떤 상황에서 사용됩니까?",
    "options": [
      "'인터페이스'는 GraphQL에서 필드의 집합을 정의하며, 모든 타입에서 공통적으로 사용됩니다.",
      "'인터페이스'는 GraphQL에서 데이터베이스 연동을 위한 설정을 정의하며, 특정 타입에서만 사용됩니다.",
      "'인터페이스'는 GraphQL에서 오직 스칼라 타입과 함께 사용되며, 사용자 정의 타입에서는 사용되지 않습니다.",
      "'인터페이스'는 GraphQL에서 사용자 정의 쿼리를 정의하는 데 사용되며, 스칼라 타입에서만 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'인터페이스(Interface)'는 GraphQL에서 필드의 집합을 정의하며, 모든 타입에서 공통적으로 사용됩니다. 이를 통해 클라이언트는 여러 타입의 객체를 단일 인터페이스로 쿼리할 수 있습니다."
  },
  {
    "category": "GraphQL",
    "question": "GraphQL에서 '리졸버(Resolver)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'리졸버'는 GraphQL 쿼리를 파싱하여 데이터베이스와 통신하고 요청된 데이터를 반환하는 함수입니다.",
      "'리졸버'는 GraphQL 스키마를 정의하는 데 사용되며, 데이터 모델을 작성하는 데 필요합니다.",
      "'리졸버'는 GraphQL 쿼리의 구조를 정의하는 데 사용되며, 쿼리의 필드를 설명합니다.",
      "'리졸버'는 GraphQL 서버와 클라이언트 간의 통신을 설정하고 처리하는 데 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'리졸버(Resolver)'는 GraphQL 쿼리를 파싱하여 데이터베이스와 통신하고 요청된 데이터를 반환하는 함수입니다. 리졸버 함수는 각각의 필드에 대해 정의되며 실제 데이터를 검색하고 반환합니다."
  },

  {
    "category": "GraphQL",
    "question": "GraphQL에서 '뮤테이션(Mutation)'은 어떤 역할을 하며, 언제 사용됩니까?",
    "options": [
      "'뮤테이션'은 데이터를 읽는 데 사용되고, '쿼리(Query)'와 동일한 역할을 합니다.",
      "'뮤테이션'은 데이터를 수정 또는 생성하는 데 사용되며, 클라이언트가 서버에 데이터 변경을 요청할 때 사용됩니다.",
      "'뮤테이션'은 데이터를 캐싱하고 클라이언트에게 캐시된 데이터를 제공하는 데 사용됩니다.",
      "'뮤테이션'은 GraphQL에서 사용하지 않는 기능이며, 대신 REST API를 사용해야 합니다."
    ],
    "correct_answer": 1,
    "answer_description": "'뮤테이션(Mutation)'은 GraphQL에서 데이터를 수정 또는 생성하는 데 사용됩니다. 클라이언트가 서버에 데이터 변경을 요청할 때 사용되며, 일반적으로 POST 요청과 유사한 역할을 합니다."
  },

  {
    "category": "GraphQL",
    "question": "GraphQL에서 '스키마 진화(Schema Evolution)'는 어떤 개념을 나타내며, 왜 중요한가요?",
    "options": [
      "'스키마 진화'는 GraphQL 스키마를 변경하고 확장하는 프로세스를 나타내며, 새로운 필드나 타입을 추가하거나 기존 필드를 수정하는 데 사용됩니다.",
      "'스키마 진화'는 GraphQL 스키마를 더 이상 수정하지 않는 것을 의미하며, 스키마의 변경은 권장하지 않습니다.",
      "'스키마 진화'는 클라이언트와 서버 간의 통신을 설정하는 것을 나타내며, GraphQL 스키마는 변하지 않습니다.",
      "'스키마 진화'는 GraphQL에서 사용되지 않는 개념이며, 스키마는 항상 고정된 상태여야 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "'스키마 진화(Schema Evolution)'는 GraphQL 스키마를 변경하고 확장하는 프로세스를 나타내며, 새로운 필드나 타입을 추가하거나 기존 필드를 수정하는 데 사용됩니다. 이는 GraphQL API를 발전시키고 새로운 기능을 추가하는 데 중요합니다."
  }
]
