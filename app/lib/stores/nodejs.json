[
  {
    "category": "Node.js",
    "question": "Node.js는 무엇이며, 어떤 유형의 애플리케이션을 개발하는 데 사용될 수 있나요?",
    "options": [
      "Node.js는 웹 브라우저에서 실행되는 JavaScript 환경을 제공하며, 웹 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션 및 CLI 도구와 같은 다양한 유형의 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 모바일 애플리케이션의 개발을 위한 도구로 사용되며, 안드로이드 및 iOS 앱을 개발할 수 있습니다.",
      "Node.js는 데이터베이스 시스템을 관리하고 연동하는 데 사용되며, 데이터 웨어하우스 애플리케이션을 개발하는 데 주로 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션, CLI 도구 등 다양한 유형의 애플리케이션을 개발하는 데 사용됩니다. 주로 비동기 및 이벤트 기반 프로그래밍을 통해 높은 성능을 제공하며, JavaScript 언어를 활용하여 서버 측 애플리케이션을 작성할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리, 및 공유하는 데 사용됩니다.",
      "'npm'은 Node.js의 내장 모듈 중 하나로, 파일 시스템 작업을 수행하는 데 사용됩니다.",
      "'npm'은 Node.js의 프레임워크로, 웹 애플리케이션을 구축하는 데 사용됩니다.",
      "'npm'은 Node.js에서 데이터베이스를 연동하는 데 사용되며, SQL 쿼리를 실행합니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리, 및 공유하는 데 사용됩니다. 'npm'을 통해 프로젝트의 종속성을 관리하고 필요한 라이브러리를 쉽게 설치할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '콜백(Callback)' 함수는 어떤 역할을 하며, 주로 어떤 상황에서 사용되나요?",
    "options": [
      "'콜백' 함수는 웹 페이지의 이벤트 처리를 위해 사용되며, 클릭 또는 마우스 호버와 같은 사용자 상호작용을 처리합니다.",
      "'콜백' 함수는 비동기 작업의 완료 또는 에러 핸들링을 위해 사용되며, 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 주로 사용됩니다.",
      "'콜백' 함수는 자바스크립트 함수 호출 시에 파라미터를 전달하는 데 사용되며, 모든 함수 호출에서 필수적으로 사용됩니다.",
      "'콜백' 함수는 모든 종류의 예외 처리를 위해 사용되며, 코드의 오류를 처리하기 위해 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'콜백(Callback)' 함수는 주로 비동기 작업의 완료 또는 에러 핸들링을 위해 사용됩니다. 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 사용되며, 작업이 완료되면 콜백 함수가 호출되어 결과를 처리합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js는 어떤 언어로 개발되었으며, 어떤 프로그래밍 언어를 기반으로 동작하나요?",
    "options": [
      "Node.js는 C++ 언어로 개발되었으며, JavaScript를 기반으로 동작합니다.",
      "Node.js는 Java 언어로 개발되었으며, Python을 기반으로 동작합니다.",
      "Node.js는 JavaScript 언어로 개발되었으며, Ruby를 기반으로 동작합니다.",
      "Node.js는 PHP 언어로 개발되었으며, TypeScript를 기반으로 동작합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Node.js는 C++ 언어로 개발되었으며, JavaScript를 기반으로 동작합니다. 이로 인해 JavaScript를 서버 측에서 실행할 수 있게 되었고, 비동기 및 이벤트 기반 프로그래밍을 지원합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇의 약자이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 'Node Package Manager'의 약자로, Node.js 패키지를 설치, 관리, 및 공유하는 도구입니다.",
      "'npm'은 'Node Project Manager'의 약자로, Node.js 프로젝트를 생성 및 관리하는 도구입니다.",
      "'npm'은 'Node Programming Module'의 약자로, Node.js에서 사용되는 프로그래밍 모듈을 생성하는 도구입니다.",
      "'npm'은 'Node Package Module'의 약자로, Node.js 모듈을 번들로 묶는 도구입니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 'Node Package Manager'의 약자로, Node.js 패키지를 설치, 관리, 및 공유하는 도구입니다. 개발자들은 'npm'을 사용하여 Node.js 모듈과 라이브러리를 손쉽게 관리할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  },

  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '비동기(Asynchronous)' 프로그래밍은 무엇이며, 어떤 장점을 제공하나요?",
    "options": [
      "'비동기' 프로그래밍은 Node.js에서 지원하지 않는 프로그래밍 패러다임으로, 동기식 작업만 가능합니다.",
      "'비동기' 프로그래밍은 작업을 순차적으로 실행하는 대신, 병렬로 실행하고 작업이 완료될 때 콜백 함수를 호출하는 방식을 의미하며, 높은 성능과 응답성을 제공합니다.",
      "'비동기' 프로그래밍은 Node.js의 모든 작업을 동기식으로 처리하며, 병렬 처리 기능을 제공하지 않습니다.",
      "'비동기' 프로그래밍은 느린 작업을 처리할 때 유용하며, 실시간 애플리케이션에는 적합하지 않습니다."
    ],
    "correct_answer": 1,
    "answer_description": "'비동기(Asynchronous)' 프로그래밍은 작업을 순차적으로 실행하는 대신, 병렬로 실행하고 작업이 완료될 때 콜백 함수를 호출하는 방식을 의미합니다. 이를 통해 Node.js는 높은 성능과 응답성을 제공하며, I/O 작업과 같이 시간이 오래 걸리는 작업을 효율적으로 처리할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js란 무엇이며, 어떤 유형의 애플리케이션을 개발하는 데 주로 사용됩니까?",
    "options": [
      "Node.js는 웹 브라우저에서 실행되는 JavaScript 환경을 제공하며, 웹 프론트엔드 애플리케이션을 개발하는 데 사용됩니다.",
      "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션 및 CLI 도구와 같은 다양한 유형의 서버 애플리케이션을 개발하는 데 주로 사용됩니다.",
      "Node.js는 모바일 애플리케이션의 개발을 위한 도구로 사용됩니다.",
      "Node.js는 데스크톱 애플리케이션을 개발하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "Node.js는 서버 사이드 JavaScript 런타임 환경으로, 웹 서버, API 서버, 실시간 애플리케이션, CLI 도구 등 다양한 서버 애플리케이션을 개발하는 데 주로 사용됩니다. 비동기 및 이벤트 기반 프로그래밍을 지원하여 높은 성능을 제공합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 'npm'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리 및 공유하는 데 사용됩니다.",
      "'npm'은 Node.js의 내장 모듈 중 하나로, 파일 시스템 작업을 수행하는 데 사용됩니다.",
      "'npm'은 Node.js에서 사용자 인터페이스를 구축하는 데 사용됩니다.",
      "'npm'은 Node.js에서 데이터베이스를 연결하는 데 사용됩니다."
    ],
    "correct_answer": 0,
    "answer_description": "'npm'은 Node.js 패키지 매니저로, JavaScript 라이브러리와 모듈을 설치, 관리 및 공유하는 데 사용됩니다. 'npm'을 통해 프로젝트의 종속성을 관리하고 필요한 라이브러리를 쉽게 설치할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '콜백(Callback)' 함수는 어떤 역할을 하며, 주로 어떤 상황에서 사용되나요?",
    "options": [
      "'콜백' 함수는 웹 페이지의 이벤트 처리를 위해 사용되며, 클릭 또는 마우스 호버와 같은 사용자 상호작용을 처리합니다.",
      "'콜백' 함수는 비동기 작업의 완료 또는 에러 핸들링을 위해 사용되며, 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 주로 사용됩니다.",
      "'콜백' 함수는 자바스크립트 함수 호출 시에 파라미터를 전달하는 데 사용되며, 모든 함수 호출에서 필수적으로 사용됩니다.",
      "'콜백' 함수는 모든 종류의 예외 처리를 위해 사용되며, 코드의 오류를 처리하기 위해 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'콜백(Callback)' 함수는 주로 비동기 작업의 완료 또는 에러 핸들링을 위해 사용됩니다. 파일 읽기, 데이터베이스 쿼리, 네트워크 요청과 같은 비동기 작업에서 사용되며, 작업이 완료되면 콜백 함수가 호출되어 결과를 처리합니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '모듈(Module)'은 무엇이며, 어떻게 사용되나요?",
    "options": [
      "'모듈'은 Node.js에서 사용하는 모든 파일을 나타내며, 파일의 경로와 파일 확장자를 포함합니다.",
      "'모듈'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용되며, 'require' 함수를 통해 다른 모듈로 가져올 수 있습니다.",
      "'모듈'은 Node.js의 데이터베이스 연결을 설정하는 데 사용되며, 데이터 모델을 정의합니다.",
      "'모듈'은 Node.js 애플리케이션의 디자인 및 레이아웃을 정의하는 데 사용됩니다."
    ],
    "correct_answer": 1,
    "answer_description": "'모듈(Module)'은 Node.js 애플리케이션에서 재사용 가능한 코드 조각을 캡슐화하는 데 사용됩니다. 'require' 함수를 통해 다른 모듈로 가져와 사용할 수 있으며, 코드의 모듈화를 통해 유지 보수성을 향상시키고 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Node.js",
    "question": "Node.js에서 '이벤트 루프(Event Loop)'는 어떤 역할을 하며, 어떻게 동작하나요?",
    "options": [
      "'이벤트 루프'는 Node.js에서 파일 시스템 작업을 처리하는 역할을 하며, 파일 읽기와 쓰기와 같은 동기 작업을 수행합니다.",
      "'이벤트 루프'는 Node.js 애플리케이션에서 사용자 인터페이스 이벤트를 처리하는 역할을 합니다.",
      "'이벤트 루프'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다.",
      "'이벤트 루프'는 Node.js의 모든 작업을 순차적으로 실행하며, 동시성을 지원하지 않습니다."
    ],
    "correct_answer": 2,
    "answer_description": "'이벤트 루프(Event Loop)'는 Node.js의 비동기 동작을 관리하며, 이벤트와 콜백 함수를 사용하여 비동기 작업을 처리합니다. 이를 통해 Node.js는 여러 작업을 동시에 처리하고 높은 성능을 제공합니다."
  }
]
