/*
  JavaScript에서 "hoisting"이란 무엇인가요?
  JavaScript의 "closure"란 무엇인가요?
  JavaScript의 "Promise" 객체는 어떤 용도로 사용되나요?
  JavaScript에서 "this" 키워드는 어떤 상황에서 어떻게 사용되나요?
  JavaScript에서 "Event Bubbling"과 "Event Capturing"은 무엇을 의미하나요?
*/

const questionData = [
  {
    category: 'JavaScript/Event',
    question:
      '자바스크립트에서 이벤트 전파를 제어하는 방법에 대한 설명으로 올바른 것은 무엇입니까?',
    options: [
      "'preventDefault()' 메서드는 이벤트의 전파를 막습니다.",
      "'stopPropagation()' 메서드는 이벤트의 기본 행동을 막습니다.",
      "'stopImmediatePropagation()' 메서드는 이벤트가 동일한 이벤트 리스너에게 전파되는 것을 막습니다.",
      "'addEventListener()'의 세 번째 인자로 'true'를 설정하면 이벤트 캡처링을 활성화할 수 있습니다.",
    ],
    correct_answer: 3,
    answer_description:
      "자바스크립트에서 'stopImmediatePropagation()' 메서드는 현재 이벤트가 동일한 이벤트 리스너에게 전파되는 것을 막으며, 그 후의 모든 리스너들의 실행도 방지합니다. 이는 이벤트 처리 중복을 피하기 위해 사용됩니다. 'preventDefault()'는 이벤트의 기본 행동을 막고, 'stopPropagation()'은 이벤트의 전파를 막습니다. 'addEventListener()'의 세 번째 인자로 'true'를 설정하면 이벤트 캡처링을 활성화하며, 이는 이벤트가 대상 요소로 도달하기 전에 상위 요소에서 먼저 처리됨을 의미합니다.",
  },
  {
    category: 'JavaScript/Hoisting',
    question: "자바스크립트에서 '호이스팅(Hoisting)'은 무엇인가요?",
    options: [
      '호이스팅은 함수 내에서 선언한 변수가 해당 함수의 최상단으로 끌어올려지는 것을 의미합니다.',
      '호이스팅은 변수를 초기화하기 전에 사용할 수 있게 하는 것을 의미합니다.',
      '호이스팅은 변수의 스코프를 전역으로 변경하는 것을 의미합니다.',
      '호이스팅은 오류를 발생시키는 자바스크립트의 특징입니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 '호이스팅(Hoisting)'은 함수 내에서 선언한 변수 및 함수 선언문이 해당 함수의 최상단으로 끌어올려지는 것을 의미합니다. 이것은 변수가 선언되기 이전에도 해당 변수를 사용할 수 있게 하는 특징으로, 자바스크립트 엔진이 코드를 실행하기 전에 선언된 변수 및 함수 선언문을 메모리에 먼저 올려놓는 것입니다.",
  },
  {
    category: 'JavaScript/Event',
    question:
      "자바스크립트에서 '이벤트 버블링(event bubbling)'과 '이벤트 캡처링(event capturing)'에 대해 설명하세요.",
    options: [
      '이벤트 버블링은 이벤트가 하위 요소에서 상위 요소로 전파되는 과정을 나타내며, 이벤트 캡처링은 상위 요소에서 하위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다.',
      '이벤트 버블링은 이벤트가 상위 요소에서 하위 요소로 전파되는 과정을 나타내며, 이벤트 캡처링은 하위 요소에서 상위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다.',
      '이벤트 버블링과 이벤트 캡처링은 자바스크립트에서 사용되지 않는 개념입니다.',
      '이벤트 버블링과 이벤트 캡처링은 동일한 개념을 나타냅니다.',
    ],
    correct_answer: 1,
    answer_description:
      '이벤트 버블링은 이벤트가 하위 요소에서 상위 요소로 전파되는 과정을 나타내며, 일반적으로 가장 하위 요소부터 시작하여 상위 요소로 이벤트가 전파됩니다. 이와 반대로, 이벤트 캡처링은 상위 요소에서 하위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다. 이벤트 캡처링은 이벤트 버블링 이전에 발생하며, 상위 요소부터 시작하여 하위 요소로 이벤트가 전파됩니다. 두 과정은 이벤트 전파 방향에 차이가 있으며, 이를 이용하여 이벤트를 적절하게 처리할 수 있습니다.',
  },
  {
    category: 'JavaScript/this',
    question: "자바스크립트에서 'this' 키워드는 어떤 용도로 사용되나요?",
    options: [
      "'this'는 현재 함수의 이름을 가리킵니다.",
      "'this'는 객체 내에서 현재 참조하고 있는 프로퍼티를 가리킵니다.",
      "'this'는 현재 실행 중인 함수 내에서 현재 인스턴스를 참조합니다.",
      "'this'는 코드 블록 내에서 현재 실행 중인 함수를 가리킵니다.",
    ],
    correct_answer: 2,
    answer_description:
      "'this' 키워드는 자바스크립트에서 현재 실행 중인 함수 내에서 현재 인스턴스를 참조하는 데 사용됩니다. 이것은 주로 객체 내부에서 메서드를 호출할 때, 메서드 내부에서 해당 객체를 가리키기 위해 사용됩니다. 'this'의 값은 호출 방식에 따라 달라질 수 있으며, 명시적으로 바인딩할 수도 있습니다.",
  },
  {
    category: 'JavaScript/Promise',
    question: "자바스크립트의 'Promise' 객체는 어떤 용도로 사용되나요?",
    options: [
      'Promise는 데이터를 서버에서 가져오는 데 사용됩니다.',
      'Promise는 비동기 작업을 처리하고 결과를 다루는 데 사용됩니다.',
      'Promise는 HTML 요소를 조작하는 데 사용됩니다.',
      'Promise는 반복 작업을 수행하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      'Promise는 주로 비동기 작업을 처리하고 결과를 다루는 데 사용됩니다. 이 객체를 사용하면 비동기적인 작업을 더 쉽게 다룰 수 있고, 데이터를 서버에서 가져오는 등의 작업을 보다 효과적으로 처리할 수 있습니다. Promise는 콜백 지옥(callback hell)을 피하고 코드의 가독성을 향상시키는 데 도움이 됩니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      "자바스크립트에서 '클로저(Closure)'에 대한 설명으로 올바른 것은 무엇입니까?",
    options: [
      '클로저는 항상 전역 변수만을 포함합니다.',
      '클로저는 함수 내부에서 선언된 변수와 해당 함수를 둘러싼 외부 함수의 변수를 포함합니다.',
      '클로저는 오직 함수 외부의 전역 변수만을 참조할 수 있습니다.',
      '클로저는 항상 자동으로 메모리에서 해제됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '클로저는 함수 내부에서 선언된 변수와 해당 함수를 둘러싼 외부 함수의 변수를 포함합니다. 이는 함수가 반환된 후에도 내부 변수에 접근할 수 있음을 의미하며, 주로 데이터 은닉과 private 변수를 구현하는 데 사용됩니다. 클로저는 외부 함수의 스코프를 기억하고 참조할 수 있으며, 이러한 특성은 자바스크립트에서 강력한 기능 중 하나입니다.',
  },

  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트에서 '비동기 처리(asynchronous processing)'의 개념에 대한 정확한 설명은 무엇인가요?",
    options: [
      "'setTimeout' 함수는 코드 실행을 동기적으로 지연시킵니다.",
      '비동기 함수는 항상 콜백 함수를 필요로 합니다.',
      '비동기 처리를 사용하면 백그라운드에서 코드 실행이 가능하며, 이는 메인 스레드를 차단하지 않습니다.',
      '자바스크립트는 다중 스레드를 지원하여 여러 작업을 동시에 처리할 수 있습니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 비동기 처리는 백그라운드에서 코드를 실행할 수 있게 해주며, 이는 메인 스레드의 실행을 차단하지 않습니다. 예를 들어, 웹 애플리케이션에서 서버로부터 데이터를 받아오는 동안 사용자 인터페이스가 멈추지 않도록 할 때 비동기 처리가 유용합니다. 'setTimeout' 함수는 지정된 시간 후에 코드를 실행하지만, 이는 비동기적으로 작동합니다. 모든 비동기 함수가 콜백을 필요로 하는 것은 아니며, 자바스크립트는 싱글 스레드 언어로서, 비동기 처리를 통해 단일 스레드의 한계를 극복합니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'Promise' 객체는 비동기 처리에서 어떠한 역할을 합니다?",
    options: [
      "'Promise' 객체는 항상 동기적인 코드 실행을 보장합니다.",
      "비동기 작업이 완료될 때까지 기다리는 데 'Promise' 객체를 사용할 수 없습니다.",
      "'Promise' 객체는 비동기 작업의 성공 또는 실패를 나타내는 결과값을 처리합니다.",
      "자바스크립트에서는 'Promise' 객체 대신 항상 콜백 함수를 사용해야 합니다.",
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 'Promise' 객체는 비동기 작업의 최종 완료(또는 실패)와 그 결과값을 나타냅니다. 'Promise'는 비동기 작업이 성공적으로 완료되었을 때 'resolve' 상태가 되며, 실패하거나 에러가 발생했을 때 'reject' 상태가 됩니다. 이를 통해 개발자들은 비동기 작업의 결과를 보다 우아하게 처리할 수 있으며, 콜백 지옥(callback hell)을 피할 수 있습니다. 따라서 'Promise'는 비동기 프로그래밍에서 중요한 개념이며, 동기적 코드 실행이나 콜백 함수의 대체 수단으로 사용됩니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'Promise' 객체는 비동기 작업에서 주로 어떤 역할을 합니다?",
    options: [
      '동기 함수 호출을 쉽게 처리하기 위해 사용됩니다.',
      '비동기 작업의 성공 또는 실패 결과를 나타내는 데 사용됩니다.',
      '모든 비동기 함수를 자동으로 동기 함수로 변환합니다.',
      '코드 실행을 일정 시간 동안 중지시키는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트의 'Promise' 객체는 비동기 작업을 처리할 때 사용됩니다. 이 객체는 비동기 작업의 최종 성공 또는 실패를 나타내며, 이를 통해 비동기 작업의 결과를 더 쉽게 관리하고 처리할 수 있습니다. 'Promise'는 비동기 작업이 완료될 때까지 기다리고, 작업이 성공적으로 완료되면 'resolve'를, 실패하면 'reject'를 반환합니다. 이를 통해 콜백 지옥(callback hell) 문제를 해결하고, 코드의 가독성과 유지 관리를 향상시키는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'async/await' 구문은 비동기 작업을 처리하는 데 어떤 이점을 제공하나요?",
    options: [
      "'async/await'를 사용하면 모든 비동기 작업이 자동으로 동기 작업으로 변환됩니다.",
      '비동기 작업의 결과를 변수에 직접 할당할 수 있어 코드의 가독성이 향상됩니다.',
      "오직 'Promise' 객체에만 사용할 수 있으며 다른 비동기 패턴과 호환되지 않습니다.",
      '비동기 작업을 수행하는 동안 JavaScript 엔진의 전체 실행을 중단시킵니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트의 'async/await' 구문은 비동기 작업을 간결하고 동기적인 방식으로 작성할 수 있게 해줍니다. 'async' 함수는 암시적으로 'Promise'를 반환하며, 'await' 키워드를 사용하여 'Promise'의 해결을 기다립니다. 이를 통해 비동기 작업의 결과를 변수에 직접 할당할 수 있으며, 이는 코드의 가독성과 구조를 크게 향상시킵니다. 'async/await'는 'Promise'와 함께 사용되지만, JavaScript 엔진의 전체 실행을 중단시키지는 않습니다. 대신, 해당 비동기 작업이 완료될 때까지 함수 실행을 일시 중지합니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트에서 'Event Loop'가 비동기 처리에 어떤 역할을 하는지 설명해 주세요?",
    options: [
      '모든 이벤트를 동기적으로 처리하여 성능을 최적화합니다.',
      '비동기 작업을 위한 별도의 스레드 풀을 관리합니다.',
      '코드 실행 순서를 결정하고, 콜 스택과 태스크 큐 간의 작업을 조정합니다.',
      '오직 사용자 인터랙션 이벤트만을 처리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트의 'Event Loop'는 비동기 처리에서 중요한 역할을 합니다. 이는 싱글 스레드 언어인 자바스크립트가 동시성을 달성할 수 있도록 해줍니다. 'Event Loop'는 콜 스택에 있는 모든 작업이 완료되면 태스크 큐(또는 이벤트 큐)에서 대기 중인 작업을 콜 스택으로 이동시킵니다. 이 과정은 프로그램이 실행되는 동안 계속 반복되어, 비동기 이벤트(예: 타이머, 네트워크 요청 등)가 콜 스택이 비어 있을 때 적절히 처리될 수 있도록 합니다. 이로 인해 자바스크립트는 비동기 작업을 효과적으로 처리할 수 있으며, 이는 애플리케이션의 반응성과 성능에 크게 기여합니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '변수의 범위(scope)'에 대한 설명으로 올바른 것은 무엇입니까?",
    options: [
      "'let' 키워드로 선언된 변수는 함수 레벨 스코프를 가집니다.",
      '전역 변수는 코드의 어느 곳에서나 접근할 수 있습니다.',
      "'var' 키워드로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '지역 변수는 선언된 함수 내부에서만 접근할 수 있습니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 전역 변수는 코드의 어느 곳에서나 접근할 수 있습니다. 이는 전역 변수가 전체 스크립트에 걸쳐 존재하며, 어떤 함수나 블록 내부가 아닌 최상위 레벨에서 선언됐기 때문입니다. 전역 변수의 이러한 특성은 강력하지만, 예상치 못한 충돌이나 오류를 야기할 수 있어 주의해서 사용해야 합니다. 반면에, 지역 변수(함수 내부에서 선언된 변수)는 해당 함수 내에서만 접근 가능하며, 'let'과 'const'는 블록 레벨 스코프를, 'var'는 함수 레벨 스코프를 가집니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      'React에서 컴포넌트의 상태 관리에 대한 설명으로 올바른 것은 무엇입니까?',
    options: [
      "'useState' 훅을 사용하여 컴포넌트의 상태를 관리할 수 있습니다.",
      '컴포넌트의 상태는 부모 컴포넌트로부터 전달받은 props를 통해서만 변경할 수 있습니다.',
      '상태(state)는 컴포넌트의 렌더링에 영향을 미치지 않는 데이터를 저장하는 데 사용됩니다.',
      "클래스 컴포넌트에서는 'this.state'를 사용하여 상태를 관리하고, 'this.setState()' 메서드로 상태를 변경합니다.",
    ],
    correct_answer: 4,
    answer_description:
      "React에서 클래스 컴포넌트는 'this.state'를 사용하여 내부 상태를 관리하고, 상태를 변경하기 위해 'this.setState()' 메서드를 사용합니다. 반면에, 함수형 컴포넌트에서는 'useState' 훅을 사용하여 상태를 관리합니다. 컴포넌트의 상태는 렌더링에 영향을 미치는 데이터를 저장하며, 부모 컴포넌트로부터 전달받은 props를 통해서는 상태를 직접 변경할 수 없습니다. props는 읽기 전용이며, 상태를 변경하려면 상태 관리 방법(예: useState, setState)을 사용해야 합니다.",
  },

  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '클로저(closure)'와 관련된 스코프의 특성을 설명하는 올바른 내용은 무엇입니까?",
    options: [
      '클로저는 전역 변수를 사용하여 메모리 누수를 방지합니다.',
      '함수가 선언될 때의 스코프 체인을 기억하여 외부 함수의 변수에 접근할 수 있습니다.',
      '모든 함수는 클로저를 형성하기 때문에 별도의 스코프는 필요 없습니다.',
      "클로저는 오직 'var' 키워드로 선언된 변수에만 접근할 수 있습니다.",
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 클로저는 함수가 자신이 선언될 때의 환경을 '기억'하는 특성을 가지고 있습니다. 이는 함수가 자신이 생성될 때의 스코프 체인에 있는 변수에 접근할 수 있도록 해줍니다. 클로저는 외부 함수의 실행이 완료된 후에도 외부 함수의 변수에 접근할 수 있는 강력한 방법을 제공합니다. 이러한 특성은 데이터 은닉, 모듈 패턴 등 다양한 고급 프로그래밍 패턴에서 유용하게 활용됩니다. 클로저는 'var', 'let', 'const' 등 어떤 종류의 변수 선언에도 적용될 수 있으며, 메모리 누수와는 별개의 개념입니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '블록 스코프(block scope)'에 대한 설명으로 가장 정확한 것은 무엇인가요?",
    options: [
      '모든 변수는 함수 내부에서만 유효한 스코프를 가집니다.',
      "'var' 키워드로 선언된 변수는 블록 스코프를 가집니다.",
      '블록 스코프는 중괄호({})로 둘러싸인 코드 내부에서만 유효한 변수의 범위를 의미합니다.',
      '블록 스코프는 오직 반복문 내에서만 유효합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 '블록 스코프(block scope)'는 중괄호({})로 둘러싸인 코드 블록 내에서만 유효한 변수의 범위를 의미합니다. 이는 주로 'let' 및 'const' 키워드로 선언된 변수에 적용됩니다. 예를 들어, if 문이나 for 문과 같은 코드 블록 내에서 'let'이나 'const'로 선언된 변수는 해당 블록 외부에서는 접근할 수 없습니다. 이는 'var' 키워드로 선언된 변수가 가지는 함수 레벨 스코프와 구별됩니다. 블록 스코프는 코드의 가독성과 유지 관리를 향상시키며, 예상치 못한 오류를 줄이는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 'let'과 'const' 키워드를 사용하여 선언된 변수의 스코프 특성은 무엇인가요?",
    options: [
      "'let'과 'const'로 선언된 변수는 전역 스코프를 가집니다.",
      '이러한 변수들은 오직 함수 내에서만 유효한 스코프를 가집니다.',
      "'let'과 'const'로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '이 변수들은 선언된 블록 외부에서도 접근이 가능합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "'let'과 'const' 키워드로 선언된 변수는 블록 레벨 스코프(block level scope)를 가집니다. 이는 해당 변수들이 중괄호({})로 둘러싸인 블록(예: if 문, for 문, while 문 등) 내에서만 유효하다는 것을 의미합니다. 블록 밖에서는 해당 변수들에 접근할 수 없습니다. 이 특성은 'var' 키워드와 구별되는데, 'var'로 선언된 변수는 함수 레벨 스코프(function level scope)를 가지므로 함수 내에서 어디서든 접근할 수 있습니다. 'let'과 'const'의 블록 레벨 스코프는 코드의 가독성과 유지 관리를 향상시키는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 'var' 키워드로 선언된 변수의 스코프 규칙에 대한 설명으로 올바른 것은 무엇인가요?",
    options: [
      "'var'로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '이러한 변수들은 선언된 함수의 전체 영역에서 접근 가능합니다.',
      "'var'로 선언된 변수는 오직 선언된 블록 내에서만 접근 가능합니다.",
      "함수 외부에서 선언된 'var' 변수는 지역 스코프를 가집니다.",
    ],
    correct_answer: 1,
    answer_description:
      "'var' 키워드로 선언된 변수는 함수 레벨 스코프(function level scope)를 가집니다. 이는 'var'로 선언된 변수가 함수 내부 어디에서든 접근 가능하다는 것을 의미합니다. 예를 들어, 'var'로 선언된 변수가 함수 내의 if 문이나 for 문과 같은 블록 내부에 있더라도, 그 함수 내의 다른 부분에서도 접근할 수 있습니다. 반면에, 함수 외부에서 'var'로 선언된 변수는 전역 스코프(global scope)를 가지므로, 전역적으로 접근 가능합니다. 이러한 특성은 'let'과 'const'와 대조되며, 때때로 예상치 못한 문제를 일으킬 수 있어 주의가 필요합니다.",
  },
  {
    category: 'JavaScript/Observer',
    question:
      "자바스크립트에서 'Observer 패턴'을 사용하여 이벤트 감시자를 구현하는 기본 원리는 무엇인가요?",
    options: [
      '모든 이벤트를 전역 객체에서 관리합니다.',
      '이벤트를 발생시키는 객체와 이를 감시하는 객체 간의 직접적인 의존성을 제거합니다.',
      'DOM 요소의 변화만을 감시하는 데 사용됩니다.',
      'Observer 패턴은 오직 HTTP 요청을 감시하는 데에만 적용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 'Observer 패턴'은 이벤트를 발생시키는 객체(주제)와 이를 감시하는 객체(옵저버) 간의 직접적인 의존성을 제거합니다. 이 패턴은 옵저버가 주제를 구독하고, 주제의 상태가 변경되었을 때 옵저버에게 알림을 보내는 방식으로 작동합니다. 이를 통해 데이터 또는 상태의 변화에 대응하는 코드를 모듈화하고 분리할 수 있으며, 유지 보수와 확장성이 용이해집니다. Observer 패턴은 DOM 요소의 변화, HTTP 요청 등 다양한 유형의 이벤트 감시에 널리 사용됩니다.",
  },
  {
    category: 'JavaScript/Observer',
    question:
      "자바스크립트에서 'MutationObserver' API를 사용하는 경우, 어떤 종류의 변화를 감시할 수 있나요?",
    options: [
      '웹 페이지의 네트워크 트래픽 변화만을 감시합니다.',
      '특정 변수의 값 변화를 감시합니다.',
      'DOM 요소의 변화를 감시하며, 요소의 추가, 삭제 또는 속성 변화 등을 포함합니다.',
      '브라우저의 화면 크기 변경만을 감시합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "'MutationObserver' API는 자바스크립트에서 DOM 요소의 변화를 감시하는 데 사용됩니다. 이 API는 DOM 요소의 추가나 삭제, 속성의 변화, 텍스트 내용의 변경 등 DOM 트리 내에서 일어나는 다양한 유형의 변화를 감시할 수 있습니다. 개발자는 'MutationObserver'를 사용하여 특정 DOM 요소나 전체 문서에 대한 변화를 감시하고, 이러한 변화가 발생했을 때 콜백 함수를 실행할 수 있습니다. 이를 통해 동적인 웹 페이지에서 사용자 인터페이스의 변경을 효과적으로 처리할 수 있으며, 복잡한 상호 작용을 관리하는 데 유용합니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      '자바스크립트에서 변수의 스코프(scope)와 비유하면 다음 중 어떤 것과 가장 비슷할까요?',
    options: [
      '변수는 마치 커피 컵 안에 들어있는 물과 같아요. 커피 컵 안에서만 물을 마실 수 있어요.',
      '변수는 마치 책장에 있는 책과 같아요. 어디서나 필요한 책을 꺼내 볼 수 있어요.',
      '변수는 마치 물고기 어항 안에 있는 물고기와 같아요. 어항 안에서만 물고기를 볼 수 있어요.',
      '변수는 마치 구름과 같아요. 어디서든 구름을 만들 수 있어요.',
    ],
    correct_answer: 1,
    answer_description:
      '변수의 스코프는 마치 커피 컵 안에 들어있는 물과 비슷합니다. 변수가 특정 스코프에 속하면 그 스코프 안에서만 변수에 접근할 수 있어요. 다른 스코프에 속한 변수는 마치 다른 커피 컵 안에 있는 물과 같이 분리되어 있어 상호 간섭하지 않아요.',
  },
  {
    category: 'JavaScript/Observer',
    question:
      "자바스크립트에서 '옵저버 패턴(Observer Pattern)'은 무엇이며, 어떻게 사용되나요?",
    options: [
      '옵저버 패턴은 날씨 정보를 주기적으로 업데이트하고 사용자에게 알림을 보내는 패턴입니다. 이를 통해 사용자는 항상 최신 날씨 정보를 얻을 수 있어요.',
      '옵저버 패턴은 UI 요소 간의 상호 작용을 관찰하고 이벤트를 처리하는 패턴으로, 클릭 또는 마우스 오버와 같은 사용자 동작을 처리할 때 사용됩니다.',
      '옵저버 패턴은 객체 간의 일대다 관계에서 한 객체(주체)의 상태 변경 시, 모든 종속 객체(옵저버)에게 자동으로 알림을 보내는 패턴입니다. 이를 통해 객체 간에 느슨한 결합을 유지할 수 있어요.',
      '옵저버 패턴은 데이터베이스에서 쿼리를 수행하고 결과를 반환하는 데 사용되며, 데이터베이스와 웹 애플리케이션 간의 효율적인 통신을 지원합니다.',
    ],
    correct_answer: 2,
    answer_description:
      '옵저버 패턴은 객체 간의 일대다 관계에서 한 객체(주체)의 상태 변경 시, 모든 종속 객체(옵저버)에게 자동으로 알림을 보내는 디자인 패턴입니다. 이를 통해 객체들은 느슨하게 결합되어 있어서 주체 객체의 변경에 따라 옵저버들을 동적으로 추가하거나 제거할 수 있습니다. 이 패턴은 주로 이벤트 처리, UI 업데이트, 데이터 모델과 뷰의 분리 등에서 사용됩니다.',
  },
  {
    category: 'JavaScript/Events',
    question:
      "자바스크립트에서 '이벤트(Event)'란 무엇이며, 웹 개발에서 어떻게 사용되나요?",
    options: [
      '이벤트는 웹 페이지에 표시되는 요소들의 레이아웃을 제어하는 데 사용되며, HTML과 CSS를 통해 정의됩니다.',
      '이벤트는 웹 페이지에서 사용자 상호 작용을 감지하고, 이에 반응하여 특정 동작을 수행하는 데 사용됩니다. 예를 들어, 클릭, 마우스 오버, 키보드 입력 등을 포함합니다.',
      '이벤트는 웹 페이지의 색상과 스타일을 변경하는 데 사용되며, JavaScript를 통해 정의됩니다.',
      '이벤트는 웹 페이지에서 오디오 및 비디오 파일을 재생하거나 다운로드하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '정답은 2번입니다! 이벤트는 웹 페이지에서 사용자 상호 작용을 감지하고, 이에 반응하여 특정 동작을 수행하는 데 사용됩니다. 이를 통해 웹 페이지는 사용자와 상호 작용하고 동적으로 동작할 수 있으며, 클릭, 마우스 오버, 키보드 입력 등과 같은 다양한 이벤트를 처리할 수 있습니다. JavaScript를 통해 이벤트를 정의하고 처리하는데 주로 사용됩니다.',
  },
  {
    category: 'JavaScript/TypeScript',
    question: '자바스크립트와 TypeScript의 주요 차이점 중 하나는 무엇인가요?',
    options: [
      '자바스크립트는 정적 타입을 지원하고, TypeScript는 동적 타입을 지원합니다.',
      'TypeScript는 자바스크립트의 상위 집합이며, 모든 자바스크립트 코드가 TypeScript로 호환됩니다.',
      'TypeScript는 정적 타입 언어로, 변수와 함수 매개변수에 명시적인 타입을 지정해야 하며, 코드 실행 전에 타입 검사를 수행합니다.',
      '자바스크립트와 TypeScript는 완전히 동일하며, 차이점이 없습니다.',
    ],
    correct_answer: 2,
    answer_description:
      'TypeScript는 자바스크립트의 상위 집합이며, 모든 자바스크립트 코드가 TypeScript로 호환됩니다. TypeScript는 정적 타입 언어로, 변수와 함수 매개변수에 명시적인 타입을 지정하는 것이 필요하며, 코드 실행 전에 타입 검사를 수행하여 타입 관련 오류를 사전에 방지합니다. 이로써 코드의 안정성과 가독성을 향상시키는 데 도움을 줍니다.',
  },
  {
    category: 'JavaScript/TypeScript',
    question: 'JavaScript와 TypeScript의 주요 차이점 중 하나는 무엇인가요?',
    options: [
      'JavaScript는 정적 타입 언어이며, 변수의 타입을 명시적으로 선언해야 합니다.',
      'TypeScript는 정적 타입 언어이며, 변수의 타입을 추론할 수 있어 타입 선언이 선택 사항입니다.',
      'JavaScript는 클래스와 인터페이스를 지원하지 않습니다.',
      'TypeScript는 웹 브라우저에서 동작하지 않습니다.',
    ],
    correct_answer: 1,
    answer_description:
      'JavaScript와 TypeScript의 주요 차이점 중 하나는 TypeScript가 정적 타입 언어이며, 변수의 타입을 추론할 수 있어 타입 선언이 선택 사항이라는 것입니다. 반면 JavaScript는 동적 타입 언어로, 타입을 명시적으로 선언하지 않아도 됩니다. TypeScript는 정적 타입 검사를 통해 코드의 안정성을 높이고 개발자가 런타임 오류를 사전에 방지할 수 있게 도와줍니다.',
  },

  {
    category: 'JavaScript/Event Handling',
    question: "JavaScript에서 '이벤트 처리(event handling)'란 무엇인가요?",
    options: [
      '이벤트 처리는 HTML 문서의 요소들 간의 상호 작용을 제어하는 기술입니다.',
      '이벤트 처리는 JavaScript에서만 사용되며, HTML과 관련이 없습니다.',
      '이벤트 처리는 오직 마우스 클릭과 키보드 입력과 관련이 있습니다.',
      '이벤트 처리는 웹 페이지에서 이미지를 로드하는 것과 관련이 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript의 이벤트 처리는 HTML 문서의 요소들 간의 상호 작용을 제어하는 기술을 의미합니다. 이벤트 처리를 사용하여 사용자의 상호 작용에 대응하고, 웹 페이지를 동적으로 만들 수 있습니다.',
  },
  {
    category: 'JavaScript/TypeScript',
    question:
      "TypeScript에서 '인터페이스(interface)'의 주요 용도는 무엇인가요?",
    options: [
      '인터페이스는 데이터베이스와의 상호 작용을 정의하는 데 사용됩니다.',
      '인터페이스는 클래스의 생성자를 정의하는 데 사용됩니다.',
      '인터페이스는 객체의 모양(shape)을 정의하고, 코드 간의 계약(Contract)을 구현하는 데 사용됩니다.',
      '인터페이스는 함수의 구현을 강제하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'TypeScript에서 인터페이스는 주로 객체의 모양(shape)을 정의하고, 코드 간의 계약(Contract)을 구현하는 데 사용됩니다. 인터페이스는 어떤 객체가 특정 속성이나 메서드를 가져야 한다는 규약을 정의하며, 이를 준수하는 객체는 해당 인터페이스를 구현(implement)합니다. 이를 통해 코드의 가독성을 높이고, 협업 시에도 더욱 명확한 인터페이스를 제공할 수 있습니다.',
  },
  {
    category: 'JavaScript/TypeScript',
    question:
      "TypeScript에서 '타입(type)'과 '인터페이스(interface)'의 차이는 무엇인가요?",
    options: [
      '타입은 변수에 데이터 형식을 할당할 때 사용되고, 인터페이스는 클래스의 속성과 메서드의 구조를 정의할 때 사용됩니다.',
      '타입은 반드시 명시적으로 사용되어야 하며, 인터페이스는 선택 사항입니다.',
      '타입은 JavaScript와 호환되지 않으며, 인터페이스는 JavaScript 코드와 함께 사용할 수 있습니다.',
      '타입과 인터페이스는 완전히 동일한 용도로 사용될 수 있으며 차이가 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      "TypeScript에서 '타입(type)'은 주로 변수에 데이터 형식을 할당하는 데 사용되며, '인터페이스(interface)'는 클래스의 속성과 메서드의 구조를 정의하는 데 사용됩니다. 타입은 변수, 매개변수, 반환 값 등에 타입을 지정할 때 사용되고, 인터페이스는 클래스가 특정한 구조를 따라야 할 때 사용됩니다. 또한, 타입은 정적 타입 검사 시에 사용되어 코드의 안정성을 보장하며, 인터페이스는 객체의 모양(shape)을 규정하여 코드의 가독성과 협업을 개선합니다.",
  },
  {
    category: 'JavaScript/TypeScript',
    question: "TypeScript에서 '타입 앨리어스(type alias)'란 무엇인가요?",
    options: [
      '타입 앨리어스는 변수를 다른 변수로 대체하는 것을 의미합니다.',
      '타입 앨리어스는 타입에 대한 별명(alias)을 정의하는 것을 의미합니다.',
      '타입 앨리어스는 주석(comment)를 추가하는 데 사용됩니다.',
      '타입 앨리어스는 타입을 삭제하는 것을 의미합니다.',
    ],
    correct_answer: 1,
    answer_description:
      "TypeScript에서 '타입 앨리어스(type alias)'는 타입에 대한 별명(alias)을 정의하는 것을 의미합니다. 이를 사용하여 복잡한 타입을 간결하게 표현하고 재사용할 수 있습니다. 타입 앨리어스를 활용하면 코드의 가독성을 향상시키고 유지보수를 쉽게 할 수 있습니다.",
  },
  {
    category: 'JavaScript/TypeScript',
    question: "TypeScript에서 '타입 가드(type guard)'의 역할은 무엇인가요?",
    options: [
      '타입 가드는 코드의 가독성을 향상시키는 역할을 합니다.',
      '타입 가드는 변수를 선언하는 역할을 합니다.',
      '타입 가드는 타입에 대한 조건을 검사하고 타입을 추론하는 역할을 합니다.',
      '타입 가드는 데이터베이스와의 연동을 지원하는 역할을 합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "TypeScript에서 '타입 가드(type guard)'는 주로 타입에 대한 조건을 검사하고 타입을 추론하는 역할을 합니다. 이를 통해 코드에서 변수의 타입을 더 정확하게 판단하고, 타입 관련 오류를 방지할 수 있습니다. 타입 가드는 TypeScript에서 정적 타입 검사를 보다 강력하게 만드는 데 사용됩니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '가상 DOM(Virtual DOM)'은 무엇이며 어떤 역할을 하나요?",
    options: [
      '가상 DOM은 가상 현실 세계를 나타내는 것으로 React 앱의 3D 시뮬레이션을 위해 사용됩니다.',
      '가상 DOM은 React 앱에서 실제 DOM과 동일한 역할을 하며 렌더링을 담당합니다.',
      '가상 DOM은 React에서 변경 사항을 비교하고 효율적으로 업데이트하는 데 사용되며, 실제 DOM 조작을 최소화합니다.',
      '가상 DOM은 React 앱의 스타일을 관리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      "React에서 '가상 DOM(Virtual DOM)'은 실제 DOM 조작을 최소화하고 성능을 향상시키는 데 사용됩니다. 가상 DOM은 React 업데이트 시에 이전과 현재의 가상 DOM 트리를 비교하고 변경된 부분만을 실제 DOM에 반영함으로써 렌더링 효율을 높이고 빠른 업데이트를 가능하게 합니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '컴포넌트 라이프사이클(Component Lifecycle)'의 주요 단계는 어떤 것들이 있나요?",
    options: [
      '사용자 입력, 렌더링, 데이터 요청, 완료',
      '마운트, 갱신, 언마운트',
      '시작, 진행, 완료',
      '로딩, 실행, 종료',
    ],
    correct_answer: 1,
    answer_description:
      "React의 '컴포넌트 라이프사이클(Component Lifecycle)'은 세 가지 주요 단계인 '마운트(Mount)', '갱신(Update)', '언마운트(Unmount)'로 구성됩니다. 마운트 단계는 컴포넌트가 DOM에 추가될 때 발생하고, 갱신 단계는 컴포넌트의 상태나 프로퍼티 변경 시에 발생하며, 언마운트 단계는 컴포넌트가 DOM에서 제거될 때 발생합니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '상태(State)'와 '프로퍼티(Props)'의 차이점은 무엇인가요?",
    options: [
      '상태(State)는 컴포넌트 내에서 변경 가능한 데이터를 나타내고, 프로퍼티(Props)는 컴포넌트 간에 전달되는 읽기 전용 데이터입니다.',
      '상태(State)와 프로퍼티(Props)는 완전히 동일한 개념이며, 상황에 따라 다른 용어를 사용합니다.',
      '상태(State)는 컴포넌트 간에 전달되는 데이터를 나타내고, 프로퍼티(Props)는 컴포넌트 내에서 변경 가능한 데이터입니다.',
      '상태(State)와 프로퍼티(Props)는 모두 컴포넌트 내에서 변경 가능한 데이터를 나타냅니다.',
    ],
    correct_answer: 0,
    answer_description:
      "React에서 '상태(State)'는 컴포넌트 내에서 변경 가능한 데이터를 나타내고, '프로퍼티(Props)'는 컴포넌트 간에 전달되는 읽기 전용 데이터입니다. 상태(State)는 컴포넌트 내에서 관리되며 변경될 때마다 렌더링이 트리거됩니다. 프로퍼티(Props)는 컴포넌트 외부에서 전달되며 해당 컴포넌트는 이를 읽기 전용으로 사용합니다.",
  },
  {
    category: 'JavaScript/React',
    question: "React에서 '컴포넌트(Component)'란 무엇인가요?",
    options: [
      '컴포넌트는 React 앱의 화면을 그리는 그림이나 이미지를 의미합니다.',
      '컴포넌트는 React 앱에서 사용자 인터페이스(UI)를 구성하는 데 사용되는 독립적인 요소입니다.',
      '컴포넌트는 React 앱에서 데이터베이스와 연동하는 역할을 합니다.',
      '컴포넌트는 React 앱의 서버 측 로직을 처리하는 역할을 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      "React에서 '컴포넌트(Component)'는 React 앱의 사용자 인터페이스(UI)를 구성하는 데 사용되는 독립적인 요소를 의미합니다. 컴포넌트는 UI를 작은 조각으로 분할하고 재사용 가능하도록 만들어줍니다. 이를 통해 React 앱은 모듈화되고 관리하기 쉬운 코드를 작성할 수 있습니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question: 'Next.js란 무엇이며, 어떤 장점을 가지고 있나요?',
    options: [
      'Next.js는 JavaScript 런타임 환경을 위한 엔진입니다.',
      'Next.js는 웹 애플리케이션을 구축하기 위한 JavaScript 프레임워크입니다.',
      'Next.js는 레거시 브라우저에서만 동작합니다.',
      'Next.js는 서버 측 렌더링을 지원하지 않습니다.',
    ],
    correct_answer: 1,
    answer_description:
      'Next.js는 웹 애플리케이션을 구축하기 위한 JavaScript 프레임워크로, React 기반의 빠르고 강력한 도구입니다. 이 프레임워크는 서버 측 렌더링(SSR)을 기본으로 지원하며, SEO 최적화와 초기 로딩 성능 향상에 도움을 줍니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question: "Next.js에서 '라우팅(Routing)'은 어떻게 작동하나요?",
    options: [
      'Next.js에서 라우팅은 항상 서버 측에서 처리되며 클라이언트 측에서는 라우팅이 없습니다.',
      'Next.js에서 라우팅은 클라이언트 측에서 JavaScript를 사용하여 동적으로 처리됩니다.',
      'Next.js에서 라우팅은 오직 정적 파일을 사용하여 처리됩니다.',
      'Next.js에서는 라우팅이 없으며, 페이지 간의 이동을 직접 처리해야 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      "Next.js에서 라우팅은 클라이언트 측에서 JavaScript를 사용하여 동적으로 처리됩니다. 이는 페이지 간의 전환을 부드럽게 처리하고, 사용자 경험을 향상시키는 데 도움이 됩니다. Next.js는 'react-router'나 'react-navigation'과 같은 라이브러리 없이도 내장된 라우팅 시스템을 제공합니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question: "Next.js에서 'SSR (Server-Side Rendering)'이 왜 중요한가요?",
    options: [
      'SSR은 브라우저에서 JavaScript를 실행하지 않으므로 페이지 속도가 빨라집니다.',
      'SSR을 사용하면 클라이언트에서 데이터를 더 빠르게 캐시할 수 있습니다.',
      'SSR을 통해 검색 엔진 최적화(SEO)가 향상되며 검색 결과에 노출이 더 잘 됩니다.',
      'SSR은 개발자의 생산성을 높이기 위한 기술적 선택일 뿐 중요하지 않습니다.',
    ],
    correct_answer: 2,
    answer_description:
      'Next.js에서 SSR은 검색 엔진 최적화(SEO)에 중요한 역할을 합니다. SSR을 사용하면 서버에서 페이지를 렌더링하고 HTML로 제공하기 때문에 검색 엔진이 콘텐츠를 쉽게 파악하고 인덱싱할 수 있습니다. 이로 인해 웹 애플리케이션의 검색 결과 노출이 향상되어 사용자에게 더 많은 가시성을 제공합니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 '프리렌더링(Pre-rendering)'과 '서버사이드 렌더링(SSR)'의 차이점은 무엇인가요?",
    options: [
      '프리렌더링과 SSR은 완전히 동일한 개념이며, 이름만 다를 뿐입니다.',
      '프리렌더링은 사전에 페이지를 생성하여 정적으로 제공하고, SSR은 요청 시에 동적으로 페이지를 생성합니다.',
      '프리렌더링은 클라이언트 측에서 작동하고, SSR은 서버 측에서 작동합니다.',
      '프리렌더링은 React에서만 사용 가능하고, SSR은 모든 프레임워크에서 사용 가능합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '프리렌더링과 SSR은 다른 개념입니다. 프리렌더링은 사전에 페이지를 생성하여 정적으로 제공하는 방식으로, 미리 페이지를 렌더링하고 클라이언트에 제공합니다. 반면에 SSR은 요청 시에 서버에서 페이지를 동적으로 생성하여 클라이언트에게 제공합니다. 두 기술은 각각의 장점과 사용 사례가 있습니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 'CSR (Client-Side Rendering)'과 'SSR (Server-Side Rendering)'을 언제 사용해야 할까요?",
    options: [
      'CSR을 사용해야 하는 경우는 항상, SSR은 선택사항입니다.',
      'SSR을 사용해야 하는 경우는 항상, CSR은 선택사항입니다.',
      'CSR은 초기 렌더링 성능을 향상시키기 위해 사용하고, SSR은 SEO를 향상시키기 위해 사용합니다.',
      'CSR과 SSR은 동일한 상황에서 사용할 수 있으며, 개발자의 선호에 따라 선택합니다.',
    ],
    correct_answer: 2,
    answer_description:
      'CSR은 초기 렌더링 성능을 향상시키는 데 사용되며, 페이지가 빠르게 로드됩니다. 반면에 SSR은 검색 엔진 최적화(SEO)를 향상시키는 데 사용되며, 페이지 내용이 서버에서 생성되어 검색 엔진에 노출됩니다. 따라서 사용 사례에 따라 CSR과 SSR을 혼합하여 활용할 수도 있습니다.',
  },
  {
    category: 'Network',
    question: "인터넷에서 'IP 주소(IP address)'가 무엇을 나타내나요?",
    options: [
      'IP 주소는 인터넷 프로토콜의 약어로, 인터넷 연결의 비밀번호를 나타냅니다.',
      'IP 주소는 웹 사이트의 물리적 위치를 나타내며, 도메인 이름과 동일합니다.',
      'IP 주소는 인터넷에서 컴퓨터, 서버 또는 장치를 식별하는 고유한 숫자입니다.',
      'IP 주소는 전자우편 주소와 동일하며, 이메일 통신에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'IP 주소는 인터넷에서 컴퓨터, 서버 또는 장치를 식별하는 고유한 숫자입니다. 이 주소를 사용하여 데이터를 목적지로 라우팅하고 통신합니다. 도메인 이름과는 달리, IP 주소는 숫자로 표시되며, IPv4 또는 IPv6와 같은 버전이 있습니다.',
  },
  {
    category: 'Network',
    question: "무선 네트워크에서 'SSID'는 무엇을 나타내나요?",
    options: [
      'SSID는 스마트폰에서 사용하는 GPS 신호를 나타냅니다.',
      'SSID는 무선 네트워크에 연결할 때 사용하는 비밀번호를 나타냅니다.',
      'SSID는 무선 네트워크의 고유한 이름을 나타냅니다.',
      'SSID는 무선 네트워크의 전송 속도를 나타냅니다.',
    ],
    correct_answer: 2,
    answer_description:
      'SSID는 무선 네트워크의 고유한 이름을 나타냅니다. 이 이름은 무선 라우터나 액세스 포인트를 식별하는 데 사용되며, 사용자가 무선 네트워크를 선택하고 연결할 때 필요합니다.',
  },
  {
    category: 'Network',
    question:
      "TCP/IP 프로토콜 스택에서 'TCP'와 'UDP'의 주요 차이점은 무엇인가요?",
    options: [
      'TCP는 연결 지향적이며 신뢰성 있는 전송을 제공하고, UDP는 비연결성이며 신뢰성이 낮은 전송을 제공합니다.',
      'TCP는 데이터 그램을 사용하고, UDP는 스트림 기반 데이터를 사용합니다.',
      'TCP는 멀티캐스팅을 지원하고, UDP는 단일 주소에만 데이터를 전송할 수 있습니다.',
      'TCP는 전송 시 데이터를 암호화하며, UDP는 암호화를 지원하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TCP는 연결 지향적인 프로토콜로, 데이터를 신뢰성 있게 전송하기 위해 연결 설정 및 오류 복구 메커니즘을 가지고 있습니다. UDP는 비연결성 프로토콜로, 데이터를 빠르게 전송하고자 할 때 사용되며, 데이터 손실이 발생할 수 있습니다.',
  },
  {
    category: 'Network',
    question:
      "인터넷에서 'URL (Uniform Resource Locator)'이 무엇을 나타내나요?",
    options: [
      'URL은 전자우편 주소를 나타냅니다.',
      'URL은 웹 사이트의 물리적 위치를 나타내며, IP 주소와 동일합니다.',
      'URL은 웹 페이지나 리소스의 주소를 나타내며, 웹 브라우징에 사용됩니다.',
      'URL은 컴퓨터의 고유 식별자를 나타냅니다.',
    ],
    correct_answer: 2,
    answer_description:
      "URL은 웹 페이지나 리소스의 주소를 나타내는데 사용됩니다. 이를 통해 웹 브라우저는 사용자가 원하는 웹 페이지를 찾아내고 표시합니다. URL은 주로 'http://' 또는 'https://'로 시작하며, 도메인 이름, 경로, 쿼리 매개변수 등을 포함합니다.",
  },
  {
    category: 'Network',
    question: 'DNS(Domain Name System)은 무엇이며, 어떤 역할을 하나요?',
    options: [
      'DNS는 동적 네트워크 서비스의 약자로, 네트워크 연결을 관리합니다.',
      'DNS는 웹 브라우징을 통해 웹 페이지를 미리 볼 수 있는 서비스를 제공합니다.',
      'DNS는 도메인 이름을 IP 주소로 변환하고, 네트워크에서 호스트를 식별하는 역할을 합니다.',
      'DNS는 데이터 전송을 위해 웹 서버와 클라이언트 간의 연결을 설정합니다.',
    ],
    correct_answer: 2,
    answer_description:
      'DNS(Domain Name System)은 도메인 이름을 IP 주소로 변환하고, 네트워크에서 호스트를 식별하는 역할을 합니다. 이를 통해 사용자가 의미 있는 도메인 이름을 사용하여 웹 페이지에 액세스할 수 있으며, 인터넷에서 효율적인 데이터 통신을 가능하게 합니다.',
  },
  {
    category: 'Network',
    question:
      "TCP (Transmission Control Protocol)과 UDP (User Datagram Protocol) 중 어떤 프로토콜이 '신뢰성' 있는 데이터 전송을 보장하나요?",
    options: [
      'TCP는 신뢰성 있는 데이터 전송을 보장합니다.',
      'UDP는 신뢰성 있는 데이터 전송을 보장합니다.',
      '모든 경우에 TCP와 UDP는 동일한 신뢰성을 제공합니다.',
      'TCP와 UDP 모두 데이터 손실이 발생할 수 있으며, 신뢰성은 프로토콜 설정에 따라 다릅니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TCP는 신뢰성 있는 데이터 전송을 보장하기 위한 프로토콜로, 데이터 전송 중 손실이나 손상이 발생하면 재전송을 통해 보완합니다. UDP는 비연결성 프로토콜로, 데이터를 보내고 받는 동안 손실이나 손상을 보장하지 않습니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '리스트 컴프리헨션(List Comprehension)'이란 무엇인가요?",
    options: [
      '리스트 컴프리헨션은 리스트를 생성하는 반복문의 축약된 표현으로, 한 줄로 리스트를 초기화할 수 있는 기능입니다.',
      '리스트 컴프리헨션은 리스트를 정렬하는 데 사용되는 특수한 함수입니다.',
      '리스트 컴프리헨션은 리스트를 복제하는 데 사용되며, 기존 리스트를 변경하지 않습니다.',
      '리스트 컴프리헨션은 리스트 요소를 삭제하는 데 사용되며, 리스트 크기를 줄입니다.',
    ],
    correct_answer: 0,
    answer_description:
      '리스트 컴프리헨션은 파이썬에서 리스트를 생성하는 편리한 방법으로, 반복문을 사용하여 리스트를 초기화할 때 한 줄로 간결하게 작성할 수 있습니다. 이를 통해 리스트를 빠르고 간단하게 생성할 수 있습니다.',
  },
  {
    category: 'Python',
    question: "파이썬에서 '인덱싱(Indexing)'은 무엇이며, 어떻게 사용되나요?",
    options: [
      '인덱싱은 문자열을 암호화하는 데 사용되며, 암호 해독에 필요합니다.',
      '인덱싱은 리스트, 튜플, 문자열 등의 시퀀스 데이터 타입에서 특정 요소를 선택하는 방법입니다.',
      '인덱싱은 파일을 생성하고 관리하는 데 사용되며, 파일 시스템에서 파일 위치를 지정합니다.',
      '인덱싱은 파이썬에서 사용할 수 없는 기능입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '인덱싱은 리스트, 튜플, 문자열 등의 시퀀스 데이터 타입에서 특정 요소를 선택하는 방법입니다. 파이썬에서는 0부터 시작하는 인덱스를 사용하며, 대괄호를 통해 원하는 요소를 참조하거나 수정할 수 있습니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '가상 환경(Virtual Environment)'은 무엇이며, 어떤 목적으로 사용되나요?",
    options: [
      '가상 환경은 실제 환경과 동일한 모든 기능을 가진 가상 세계를 생성합니다.',
      '가상 환경은 파이썬 패키지와 종속성을 격리하여 프로젝트 간의 충돌을 방지하고 프로젝트별로 독립적인 환경을 제공합니다.',
      '가상 환경은 파이썬 코드를 암호화하고 보호하는 데 사용됩니다.',
      '가상 환경은 파이썬의 버전을 변경하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '가상 환경은 파이썬 패키지와 종속성을 격리하여 프로젝트 간의 충돌을 방지하고, 각 프로젝트마다 독립적인 환경을 제공합니다. 이를 통해 여러 프로젝트를 동시에 개발하거나 다른 파이썬 버전을 사용하는 데 유용합니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '제너레이터(Generator)'란 무엇이며, 어떻게 사용되나요?",
    options: [
      '제너레이터는 파일을 생성하는 데 사용되며, 텍스트 파일을 만드는 데 유용합니다.',
      '제너레이터는 무한한 연속 데이터 시퀀스를 생성하며, 한 번에 메모리에 로드하지 않습니다.',
      '제너레이터는 그래픽 디자인에 사용되는 특별한 이미지 생성 도구입니다.',
      '제너레이터는 웹 개발에서 HTML 코드를 생성하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "제너레이터는 무한한 연속 데이터 시퀀스를 생성하는 데 사용됩니다. 이러한 데이터 시퀀스는 한 번에 메모리에 로드되지 않고 필요할 때 생성되므로 메모리 효율적입니다. 파이썬에서 제너레이터는 함수 내에서 'yield' 키워드를 사용하여 정의하며, 'next()' 함수로 값을 하나씩 생성할 수 있습니다.",
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '인터프리터(Interpreter)'란 무엇이며, 어떤 역할을 하나요?",
    options: [
      '인터프리터는 프로그램 코드를 기계어로 변환하는 도구로, 프로그램 실행 시 필요한 라이브러리를 제공합니다.',
      '인터프리터는 코드를 한 줄씩 읽고 실행하는 프로그램으로, 파이썬 코드를 해석하고 실행합니다.',
      '인터프리터는 컴파일된 바이너리 코드를 생성하여 프로그램 실행 속도를 향상시킵니다.',
      '인터프리터는 소스 코드를 보호하고 암호화하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '인터프리터는 코드를 한 줄씩 읽고 실행하는 프로그램으로, 파이썬과 같은 스크립트 언어의 코드를 해석하고 실행합니다. 이를 통해 코드를 실행할 수 있고, 파이썬 프로그램을 개발하고 실행할 수 있게 됩니다.',
  },
  {
    category: 'Python/Memory',
    question:
      "파이썬에서 '가비지 컬렉션(Garbage Collection)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '가비지 컬렉션은 메모리 누수를 방지하기 위한 프로세스로, 사용하지 않는 메모리를 자동으로 회수합니다.',
      '가비지 컬렉션은 메모리를 미리 할당하여 프로그램의 실행 속도를 향상시킵니다.',
      '가비지 컬렉션은 메모리에서 중요한 데이터를 검색하는 데 사용됩니다.',
      '가비지 컬렉션은 파일 시스템 관리를 위한 도구입니다.',
    ],
    correct_answer: 0,
    answer_description:
      '가비지 컬렉션은 파이썬과 같은 프로그래밍 언어에서 사용하지 않는 메모리를 자동으로 감지하고 회수하는 프로세스를 의미합니다. 이를 통해 메모리 누수를 방지하고 프로그램의 안정성을 향상시킵니다.',
  },
  {
    category: 'Python/Memory',
    question:
      "파이썬에서 '참조 카운트(Reference Count)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '참조 카운트는 사용된 메모리 영역의 크기를 측정하는 도구로, 메모리 누수를 방지합니다.',
      '참조 카운트는 객체를 가리키는 변수 또는 참조의 수를 추적하여 메모리에서 객체의 해제를 관리합니다.',
      '참조 카운트는 파이썬에서 사용되지 않는 변수를 검색하는 데 사용됩니다.',
      '참조 카운트는 파이썬 코드의 실행 속도를 향상시키는 도구입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '참조 카운트는 객체를 가리키는 변수 또는 참조의 수를 추적하여 메모리에서 객체의 해제를 관리하는 기술입니다. 이를 통해 파이썬은 더 이상 사용되지 않는 객체를 자동으로 회수하고 메모리를 효율적으로 관리합니다.',
  },
  {
    category: 'Python/Decorator',
    question:
      "파이썬에서 '데코레이터(Decorator)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '데코레이터는 그래픽 디자인에 사용되는 이미지 디자인 도구입니다.',
      '데코레이터는 함수나 메서드의 기능을 확장하거나 수정하는 데 사용되며, 다른 함수를 감싸고 변경합니다.',
      '데코레이터는 웹 개발에서 웹 페이지의 스타일과 레이아웃을 디자인하는 데 사용됩니다.',
      '데코레이터는 데이터베이스 디자인 및 관리를 위한 도구입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '데코레이터는 파이썬에서 함수나 메서드의 동작을 확장하거나 수정하는 데 사용되며, 다른 함수를 감싸고 변경합니다. 이를 통해 코드 재사용과 모듈성을 향상시키며, 예를 들어 로깅, 인증, 캐싱 등과 같은 기능을 함수에 추가할 수 있습니다.',
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 감싸고 수정할 때 어떤 키워드를 사용해야 하나요?',
    options: [
      '데코레이터 키워드',
      '변경 키워드',
      '장식 키워드',
      '데코레이트 키워드',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터를 사용할 때 '장식(Decorator)' 키워드를 사용합니다. 데코레이터는 기존 함수를 감싸고 수정할 수 있으며, '@' 기호를 사용하여 함수 위에 데코레이터를 지정합니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 수정할 때 어떤 구문을 사용해야 합니까?',
    options: [
      'def 함수명(인자):',
      'function @데코레이터',
      '@데코레이터\ndef 함수명(인자):',
      '@데코레이터 함수명(인자):',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터를 사용하여 함수를 수정할 때는 '@' 기호를 사용하여 함수 정의 위에 데코레이터를 지정해야 합니다. 따라서 '@데코레이터' 구문을 사용하고, 그 아래에 함수 정의를 작성합니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 수정할 때, 데코레이터 함수는 어떤 인자를 받아야 하나요?',
    options: [
      "데코레이터 함수는 항상 'self' 인자를 받아야 합니다.",
      "데코레이터 함수는 항상 'cls' 인자를 받아야 합니다.",
      "데코레이터 함수는 데코레이팅할 함수를 가리키는 'func' 인자를 받아야 합니다.",
      '데코레이터 함수는 데코레이팅할 함수의 이름을 받아야 합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터 함수는 데코레이팅할 함수를 가리키는 'func' 인자를 받아야 합니다. 이를 통해 데코레이터 함수는 데코레이팅할 함수를 변경하거나 보완하는 작업을 수행할 수 있습니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      "파이썬에서 '클래스 메소드 데코레이터(Class Method Decorator)'와 '인스턴스 메소드 데코레이터(Instance Method Decorator)'는 어떻게 다릅니까?",
    options: [
      '클래스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 특정 인스턴스 메소드에만 영향을 미칩니다.',
      '클래스 메소드 데코레이터는 클래스 내의 특정 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미칩니다.',
      '클래스 메소드 데코레이터는 클래스의 속성을 수정하는 데 사용되며, 인스턴스 메소드 데코레이터는 인스턴스 변수를 수정하는 데 사용됩니다.',
      '클래스 메소드 데코레이터와 인스턴스 메소드 데코레이터 사이에는 차이가 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클래스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 특정 인스턴스 메소드에만 영향을 미칩니다. 이를 통해 클래스 메소드 데코레이터는 클래스 전체에 영향을 주는 반면, 인스턴스 메소드 데코레이터는 특정 메소드 동작을 수정할 수 있습니다.',
  },
  {
    category: 'Swift',
    question: "Swift에서 '옵셔널(Optional)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '옵셔널은 모든 변수와 상수가 필수로 값을 가져야 하는 데이터 타입입니다.',
      "옵셔널은 값이 있을 수도 있고 없을 수도 있는 데이터를 나타내는 타입으로, 'nil'을 포함할 수 있습니다.",
      '옵셔널은 Swift에서 사용할 수 없는 특별한 데이터 타입입니다.',
      '옵셔널은 함수의 반환값을 나타내는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "Swift에서 옵셔널은 값이 있을 수도 있고 없을 수도 있는 데이터를 나타내는 타입으로, 'nil'을 포함할 수 있습니다. 이를 통해 변수 또는 상수가 값이 없을 때 안전하게 처리할 수 있으며, 런타임 오류를 방지합니다.",
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '옵셔널 체이닝(Optional Chaining)'은 무엇이며, 어떤 상황에서 사용되나요?",
    options: [
      '옵셔널 체이닝은 옵셔널 값을 감싸고 있는 것으로, 옵셔널 변수를 정수로 변환하는 데 사용됩니다.',
      '옵셔널 체이닝은 옵셔널 값에 접근하고 메서드를 호출하거나 속성을 가져올 때 사용되며, 값이 없는 경우에도 코드 실행을 중단시키지 않습니다.',
      '옵셔널 체이닝은 두 개의 옵셔널 변수를 연결하여 하나의 옵셔널 변수로 만드는 기능입니다.',
      '옵셔널 체이닝은 Swift에서 사용할 수 없는 특별한 문법입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '옵셔널 체이닝은 옵셔널 값에 접근하고 메서드를 호출하거나 속성을 가져올 때 사용됩니다. 이를 통해 값이 없는 경우에도 코드 실행을 중단시키지 않고 안전하게 옵셔널 변수를 다룰 수 있습니다.',
  },
  {
    category: 'Swift',
    question: "Swift에서 '클로저(Closure)'란 무엇이며, 어떤 역할을 하나요?",
    options: [
      '클로저는 옵셔널 값을 생성하는 특수한 함수로, 값이 존재하지 않을 때 사용됩니다.',
      '클로저는 객체의 메서드를 호출하는 방법으로, 객체 지향 프로그래밍에서 사용됩니다.',
      '클로저는 코드 블록으로, 함수처럼 독립적으로 호출되거나 다른 함수에 전달될 수 있으며, 변수나 상수로 저장될 수 있습니다.',
      '클로저는 파일 입출력 및 네트워크 통신을 관리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'Swift에서 클로저는 코드 블록으로, 함수와 유사하게 독립적으로 호출되거나 다른 함수에 전달되며, 변수나 상수로 저장될 수 있습니다. 클로저는 주로 함수의 인자로 전달되거나 반환값으로 사용되며, 다양한 용도로 활용됩니다.',
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '옵셔널 강제 해제(Unwrapping)'는 어떤 역할을 하며, 어떤 방법으로 수행되나요?",
    options: [
      "옵셔널 강제 해제는 옵셔널 값을 무시하고 무조건 값을 가지고 오는 것으로, '!' 기호를 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값을 안전하게 사용하는 방법으로, 'if let' 또는 'guard let' 구문을 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값에 대한 조건 검사를 수행하는 것으로, 'if' 구문을 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값의 속성을 변경하는 것으로, '=>' 기호를 사용합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "Swift에서 옵셔널 강제 해제는 옵셔널 값의 'nil' 여부를 무시하고 강제로 값을 가져오는 것을 의미합니다. 이를 위해 '!' 기호를 사용하며, 주의가 필요하며, 값이 'nil'인 경우 런타임 오류가 발생할 수 있습니다.",
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '구조체(Struct)'와 '클래스(Class)'의 주요 차이점은 무엇인가요?",
    options: [
      '구조체는 값 타입(Value Type)으로, 복사본을 생성하여 데이터를 전달합니다. 클래스는 참조 타입(Reference Type)으로, 같은 인스턴스를 여러 변수에서 공유할 수 있습니다.',
      '구조체는 클래스와 완전히 동일한 기능을 제공하며, 주로 이름만 다를 뿐입니다.',
      '구조체는 클래스보다 메모리를 더 효율적으로 사용하며, 일반적으로 더 빠릅니다.',
      '구조체는 값 타입(Value Type)으로, 참조 타입(Reference Type)인 클래스와 동일한 방식으로 데이터를 전달합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'Swift에서 구조체(Struct)는 값 타입(Value Type)으로, 복사본을 생성하여 데이터를 전달합니다. 클래스(Class)는 참조 타입(Reference Type)으로, 같은 인스턴스를 여러 변수에서 공유할 수 있습니다. 이는 구조체와 클래스의 주요 차이점 중 하나입니다.',
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드 앱 개발에서 '코루틴(Coroutines)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '코루틴은 앱의 사용자 인터페이스를 디자인하는 데 사용되는 도구입니다.',
      '코루틴은 앱의 데이터베이스 관련 작업을 처리하기 위한 라이브러리입니다.',
      '코루틴은 비동기 작업을 보다 간편하게 다루기 위한 Kotlin 기능으로, UI 스레드를 차단하지 않고 비동기 코드를 작성할 수 있게 합니다.',
      '코루틴은 안드로이드에서 사용되지 않는 특별한 개념입니다.',
    ],
    correct_answer: 2,
    answer_description:
      '코루틴은 Kotlin에서 제공하는 비동기 작업 처리 기능으로, UI 스레드를 차단하지 않고 비동기 코드를 작성하고 관리할 수 있게 합니다. 안드로이드 앱 개발에서 주로 사용되며, 네트워크 요청, 데이터베이스 액세스 및 기타 비동기 작업을 효율적으로 처리하는 데 도움을 줍니다.',
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드에서 'MVVM(Model-View-ViewModel)' 아키텍처는 무엇이며, 어떤 이점을 제공하나요?",
    options: [
      "MVVM은 'Model-View-ViewController'의 약자로, 안드로이드 앱의 UI 디자인을 위한 아키텍처입니다.",
      "MVVM은 'Model-View-ViewModel'의 약자로, UI와 비즈니스 로직을 분리하여 앱을 보다 모듈화하고 유지보수하기 쉽게 만듭니다.",
      "MVVM은 'Model-View-ViewPresenter'의 약자로, 사용자 인터페이스를 관리하는 아키텍처로서 성능을 최적화합니다.",
      "MVVM은 'Model-View-ViewModel'의 약자로, 안드로이드 앱에서 데이터베이스를 관리하는 아키텍처입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "MVVM은 'Model-View-ViewModel'의 약자로, UI와 비즈니스 로직을 분리하여 앱을 모듈화하고 유지보수하기 쉽게 만드는 아키텍처입니다. 이 아키텍처는 안드로이드 앱 개발에서 많이 사용되며, 코드의 재사용성을 높이고 테스트 가능한 앱을 만드는 데 도움을 줍니다.",
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드 앱에서 '레이아웃(XML Layout)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '레이아웃은 사용자 인터페이스를 디자인하고 렌더링하는데 사용되는 프로그래밍 언어입니다.',
      '레이아웃은 앱의 데이터를 저장하는 데 사용되는 저장소입니다.',
      '레이아웃은 앱의 UI 요소를 배치하고 디자인하는 데 사용되는 XML 파일로, 화면의 구조와 모양을 정의합니다.',
      '레이아웃은 Android OS의 커널 부분을 의미하며, 앱의 실행과 관련이 없습니다.',
    ],
    correct_answer: 2,
    answer_description:
      '안드로이드 앱에서 레이아웃(XML Layout)은 UI 요소를 배치하고 디자인하는 데 사용되는 XML 파일입니다. 이를 통해 화면의 구조와 모양을 정의하고, UI를 사용자에게 효과적으로 표시할 수 있습니다.',
  },
  {
    category: 'Android/Kotlin',
    question: "안드로이드에서 '인텐트(Intent)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '인텐트는 안드로이드 앱의 그래픽 디자인을 구성하는 데 사용되는 도구입니다.',
      '인텐트는 앱에서 사용자에게 데이터를 보여주는 데 사용되는 위젯입니다.',
      '인텐트는 다른 앱 구성 요소와 통신하고 작업을 수행하기 위한 메시지 객체로, 액티비티 전환, 서비스 시작 등에 사용됩니다.',
      '인텐트는 Android 앱을 설치하고 관리하는 데 사용되는 프로그램입니다.',
    ],
    correct_answer: 2,
    answer_description:
      "안드로이드에서 '인텐트(Intent)'는 다른 앱 구성 요소와 통신하고 작업을 수행하기 위한 메시지 객체로 사용됩니다. 인텐트를 통해 액티비티 전환, 서비스 시작, 데이터 공유 등 다양한 작업을 수행할 수 있습니다.",
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드에서 '리사이클러뷰(RecyclerView)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '리사이클러뷰는 화면에 이미지를 출력하는 데 사용되는 위젯입니다.',
      '리사이클러뷰는 데이터 목록을 표시하고 스크롤 가능한 목록 형태로 제공하는 위젯으로, 커스텀 UI 목록을 만들 때 사용됩니다.',
      '리사이클러뷰는 GPS 기능을 활용하여 위치 정보를 제공하는 위젯입니다.',
      '리사이클러뷰는 텍스트 메시지를 처리하는 위젯입니다.',
    ],
    correct_answer: 1,
    answer_description:
      "안드로이드에서 '리사이클러뷰(RecyclerView)'는 데이터 목록을 표시하고 스크롤 가능한 목록 형태로 제공하는 위젯으로, 주로 커스텀 UI 목록을 만들 때 사용됩니다. 리사이클러뷰는 화면에 동적인 목록을 표시하고 다양한 뷰홀더(ViewHolder) 패턴을 활용하여 효율적인 목록 관리를 지원합니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 'getStaticProps'와 'getServerSideProps'의 차이점은 무엇인가요?",
    options: [
      "'getStaticProps'는 정적 생성된 페이지를 위한 데이터를 미리 빌드하고 캐시하며, 'getServerSideProps'는 매 요청 시에 서버 측에서 데이터를 생성합니다.",
      "'getStaticProps'는 클라이언트 측에서 데이터를 생성하며, 'getServerSideProps'는 서버 측에서 데이터를 미리 빌드하고 캐시합니다.",
      "'getStaticProps'는 동적 페이지를 위한 데이터를 생성하며, 'getServerSideProps'는 정적 페이지를 위한 데이터를 생성합니다.",
      "'getStaticProps'와 'getServerSideProps' 간에는 차이가 없습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "Next.js에서 'getStaticProps'는 정적 생성된 페이지를 위한 데이터를 미리 빌드하고 캐시하며, 'getServerSideProps'는 매 요청 시에 서버 측에서 데이터를 생성합니다. 이것은 페이지의 데이터 요구 사항에 따라 선택할 수 있는 두 가지 서버 사이드 렌더링(SSR) 방법 중 하나이며, 'getStaticProps'는 빌드 시간에 데이터를 가져오고 'getServerSideProps'는 요청 시간에 데이터를 가져옵니다.",
  },
  {
    category: 'JavaScript/undefined',
    question:
      "자바스크립트에서 'undefined'란 무엇이며, 어떤 상황에서 발생하나요?",
    options: [
      "'undefined'는 변수가 값이 없거나 선언되지 않았을 때 발생하며, 자바스크립트의 기본 데이터 타입 중 하나입니다.",
      "'undefined'는 항상 에러를 나타내며, 프로그램 실행 중에는 발생하지 않습니다.",
      "'undefined'는 오직 함수 내에서만 발생하며, 변수에는 영향을 미치지 않습니다.",
      "'undefined'는 항상 'null'과 동일한 값을 갖습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'undefined'는 자바스크립트에서 변수가 값이 없거나 선언되지 않았을 때 발생합니다. 이는 자바스크립트의 기본 데이터 타입 중 하나이며, 변수가 초기화되지 않거나 값이 할당되지 않은 경우에 자동으로 설정됩니다. 'undefined'는 변수에 할당할 수 있는 값 중 하나이며, 에러를 나타내는 것은 아닙니다.",
  },
  {
    category: 'JavaScript/undefined',
    question: "자바스크립트에서 'null'과 'undefined'의 차이점은 무엇인가요?",
    options: [
      "'null'은 변수가 값이 없음을 나타내는 특별한 값으로, 'undefined'는 변수가 아직 정의되지 않았거나 값이 할당되지 않았을 때 나타납니다.",
      "'undefined'는 변수가 값이 없음을 나타내는 특별한 값으로, 'null'은 자바스크립트에서 사용되지 않습니다.",
      "'null'은 변수의 타입을 나타내며, 'undefined'는 변수의 상태를 나타냅니다.",
      "'null'과 'undefined'는 완전히 동일한 의미를 가지며 상황에 따라 사용법만 다릅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'null'과 'undefined'는 자바스크립트에서 다른 의미를 가집니다. 'null'은 변수가 값이 없음을 나타내는 특별한 값으로 사용되며, 프로그래머가 명시적으로 변수에 'null'을 할당할 수 있습니다. 반면에 'undefined'는 변수가 아직 정의되지 않았거나 값이 할당되지 않았을 때 자동으로 설정되는 값입니다.",
  },
  {
    category: 'JavaScript/undefined',
    question:
      "자바스크립트에서 'undefined'와 'null'의 차이를 설명하세요. 어떤 경우에 각각 사용되나요?",
    options: [
      "'undefined'는 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 'null'은 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용됩니다.",
      "'null'은 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 'undefined'는 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용됩니다.",
      "'undefined'는 변수의 타입을 나타내며, 'null'은 변수의 상태를 나타냅니다.",
      "'null'과 'undefined'는 완전히 동일한 의미를 가지며, 사용법만 다릅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'undefined'와 'null'은 자바스크립트에서 다른 의미를 가집니다. 'undefined'는 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 이는 자바스크립트 엔진이 자동으로 설정하는 것입니다. 'null'은 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용되며, 프로그램에서 의도적으로 변수에 값을 제거할 때 주로 활용됩니다.",
  },
  {
    category: 'JavaScript/Array',
    question:
      '자바스크립트에서 배열(Array)은 무엇이며, 어떻게 배열을 생성하고 요소를 추가할 수 있나요?',
    options: [
      "배열은 숫자로만 이루어진 데이터 구조로, 배열을 생성할 때는 'array()' 함수를 사용하며 'push()' 메서드로 요소를 추가합니다.",
      "배열은 순서가 있는 데이터 집합으로, 배열을 생성할 때 대괄호 '[]'를 사용하며 'push()' 메서드나 'concat()' 메서드로 요소를 추가합니다.",
      "배열은 객체와 유사한 데이터 구조로, 배열을 생성할 때 'object()' 함수를 사용하며 'add()' 메서드로 요소를 추가합니다.",
      "배열은 문자열로만 이루어진 데이터 구조로, 배열을 생성할 때는 'string()' 함수를 사용하며 'append()' 메서드로 요소를 추가합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 배열은 순서가 있는 데이터 집합으로, 배열을 생성할 때는 대괄호 '[]'를 사용합니다. 요소를 추가할 때 'push()' 메서드나 'concat()' 메서드 등을 사용합니다. 배열은 다양한 데이터 타입을 포함할 수 있으며, 인덱스를 사용하여 요소에 접근할 수 있습니다.",
  },
  {
    category: 'JavaScript/Array',
    question:
      "자바스크립트 배열에서 'forEach()' 메서드의 역할은 무엇이며, 어떤 상황에서 유용하게 활용할 수 있나요?",
    options: [
      "'forEach()' 메서드는 배열의 각 요소를 반복하면서 지정된 콜백 함수를 실행하며, 각 요소를 가공하거나 수정하는 데 사용됩니다.",
      "'forEach()' 메서드는 배열의 요소를 무작위로 섞는 데 사용되며, 배열의 요소를 쉽게 정렬할 때 유용합니다.",
      "'forEach()' 메서드는 배열에서 특정 요소를 찾는 데 사용되며, 조건에 맞는 요소를 필터링할 때 유용합니다.",
      "'forEach()' 메서드는 배열의 길이를 반환하는 데 사용되며, 배열의 크기를 확인할 때 유용합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'forEach()' 메서드는 자바스크립트 배열에서 각 요소를 반복하면서 지정된 콜백 함수를 실행합니다. 이를 통해 각 요소를 가공하거나 수정할 수 있으며, 배열의 각 항목에 대해 일괄 작업을 수행하는 데 유용합니다. 예를 들어, 배열의 각 요소를 출력하거나 특정 작업을 수행하려는 경우에 'forEach()' 메서드를 활용할 수 있습니다.",
  },
  {
    category: 'JavaScript/typeof',
    question:
      "자바스크립트에서 'typeof' 연산자는 어떤 목적으로 사용되며, 그것의 동작 방식에 대해 설명해주세요.",
    options: [
      "'typeof' 연산자는 변수의 데이터 유형을 결정하기 위해 사용되며, 데이터 유형에 따라 다른 문자열을 반환합니다.",
      "'typeof' 연산자는 변수의 값이 숫자일 때만 사용 가능하며, 문자열 또는 논리값에는 적용할 수 없습니다.",
      "'typeof' 연산자는 변수의 이름을 확인하고 해당 변수의 값을 반환합니다.",
      "'typeof' 연산자는 항상 'object'를 반환하며, 변수의 데이터 유형과는 관련이 없습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'typeof' 연산자는 변수의 데이터 유형을 결정하기 위해 사용되며, 데이터 유형에 따라 다른 문자열을 반환합니다. 예를 들어, 'typeof 42'를 실행하면 'number'를 반환하고, 'typeof 'Hello''를 실행하면 'string'을 반환합니다. 'typeof' 연산자는 변수의 값이 아닌 변수 자체의 데이터 유형을 확인합니다.",
  },
  {
    category: 'JavaScript/Advanced',
    question:
      "자바스크립트에서 '선언되지 않은 것(undeclared)'과 '정의되지 않은 것(undefined)'의 차이점은 무엇인가요?",
    options: [
      "'선언되지 않은 것'은 변수를 선언하지 않고 사용하는 것을 나타내며, '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않은 상태를 의미합니다.",
      "'선언되지 않은 것'과 '정의되지 않은 것'은 동일한 개념으로 사용되며 차이가 없습니다.",
      "'선언되지 않은 것'은 변수를 정의하지 않고 사용하는 것을 나타내며, '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않은 상태를 의미합니다.",
      "'선언되지 않은 것'과 '정의되지 않은 것'은 모두 오류를 발생시키지 않으며, JavaScript 엔진이 자동으로 처리합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "자바스크립트에서 '선언되지 않은 것'과 '정의되지 않은 것'은 다릅니다. '선언되지 않은 것'은 변수를 선언하지 않고 사용하려고 할 때 발생하는 오류를 의미하며, 이는 JavaScript 엔진이 변수를 인식하지 못하고 있을 때 발생합니다. 반면에 '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않았을 때 발생하는 현상을 나타내며, 이 경우 변수는 존재하지만 값이 없는 상태입니다.",
  },
  {
    category: 'JavaScript/Advanced',
    question:
      "다음 코드에서 'var a;'와 'typeof a;' 그리고 'typeof b;'의 결과는 어떻게 다르며, 그 이유는 무엇인가요?",
    options: [
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과도 'undefined'입니다. 'typeof b;'는 오류를 발생시킵니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'undefined'입니다. 'typeof b;'의 결과는 'undefined'입니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'string'입니다. 'typeof b;'는 오류를 발생시킵니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'string'입니다. 'typeof b;'의 결과는 'undefined'입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 'var a;'와 같이 변수를 선언하면 변수는 'undefined' 값으로 초기화됩니다. 'typeof a;'는 변수 'a'의 데이터 유형을 확인하는데, 여기서 'a'는 'undefined' 값이므로 'typeof a;'의 결과도 'undefined'가 됩니다. 그러나 'b'는 선언되지 않은 변수이므로 'typeof b;'를 실행하면 'undefined'가 아니라 오류가 발생합니다.",
  },
];
