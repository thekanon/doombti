/*
  JavaScript에서 "hoisting"이란 무엇인가요?
  JavaScript의 "closure"란 무엇인가요?
  JavaScript의 "Promise" 객체는 어떤 용도로 사용되나요?
  JavaScript에서 "this" 키워드는 어떤 상황에서 어떻게 사용되나요?
  JavaScript에서 "Event Bubbling"과 "Event Capturing"은 무엇을 의미하나요?
*/

const questionData = [
  {
    category: 'JavaScript/Event',
    question:
      '자바스크립트에서 이벤트 전파를 제어하는 방법에 대한 설명으로 올바른 것은 무엇입니까?',
    options: [
      "'preventDefault()' 메서드는 이벤트의 전파를 막습니다.",
      "'stopPropagation()' 메서드는 이벤트의 기본 행동을 막습니다.",
      "'stopImmediatePropagation()' 메서드는 이벤트가 동일한 이벤트 리스너에게 전파되는 것을 막습니다.",
      "'addEventListener()'의 세 번째 인자로 'true'를 설정하면 이벤트 캡처링을 활성화할 수 있습니다.",
    ],
    correct_answer: 3,
    answer_description:
      "자바스크립트에서 'stopImmediatePropagation()' 메서드는 현재 이벤트가 동일한 이벤트 리스너에게 전파되는 것을 막으며, 그 후의 모든 리스너들의 실행도 방지합니다. 이는 이벤트 처리 중복을 피하기 위해 사용됩니다. 'preventDefault()'는 이벤트의 기본 행동을 막고, 'stopPropagation()'은 이벤트의 전파를 막습니다. 'addEventListener()'의 세 번째 인자로 'true'를 설정하면 이벤트 캡처링을 활성화하며, 이는 이벤트가 대상 요소로 도달하기 전에 상위 요소에서 먼저 처리됨을 의미합니다.",
  },
  {
    category: 'JavaScript/Event',
    question: 'JavaScript에서 이벤트 핸들러란 무엇이며, 어떻게 사용되나요?',
    options: [
      '이벤트 핸들러는 객체의 메서드로, 이벤트가 발생했을 때 해당 이벤트에 대한 응답 동작을 정의하는 함수입니다. HTML 요소에 이벤트 핸들러를 연결하여 사용합니다.',
      '이벤트 핸들러는 일반적인 함수로, 특정 이벤트가 발생했을 때 해당 함수가 자동으로 실행되며, 이벤트 핸들러를 사용할 필요가 없습니다.',
      '이벤트 핸들러는 브라우저에서 자동으로 관리되며, 개발자가 별도로 정의할 필요가 없습니다.',
      '이벤트 핸들러는 오직 JavaScript 외부에서만 사용되며, HTML과 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이벤트 핸들러는 객체의 메서드로, 이벤트가 발생했을 때 해당 이벤트에 대한 응답 동작을 정의하는 함수입니다. HTML 요소에 이벤트 핸들러를 연결하여 사용합니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 이벤트 핸들러를 HTML 요소에 등록하는 방법은 무엇이며, 어떻게 동작하나요?',
    options: [
      'HTML 요소의 `addEventListener` 메서드를 사용하여 이벤트 핸들러를 등록할 수 있으며, 이벤트가 발생하면 핸들러 함수가 실행됩니다.',
      '이벤트 핸들러를 등록하는 방법은 JavaScript에서 지원하지 않으며, 이벤트 핸들러는 자동으로 동작합니다.',
      '이벤트 핸들러를 등록할 때에는 `onEvent` 형식의 HTML 속성을 사용하며, 해당 속성에 핸들러 함수를 직접 정의해야 합니다.',
      '이벤트 핸들러를 등록하는 방법은 오직 CSS를 사용하여 정의할 수 있으며, JavaScript에서는 처리할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'HTML 요소의 `addEventListener` 메서드를 사용하여 이벤트 핸들러를 등록할 수 있으며, 이벤트가 발생하면 핸들러 함수가 실행됩니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 이벤트 핸들러 함수에 전달되는 이벤트 객체란 무엇이며, 어떻게 활용할 수 있나요?',
    options: [
      '이벤트 객체는 이벤트가 발생한 요소와 관련된 정보를 담고 있는 객체로, 핸들러 함수 내에서 이 정보를 활용하여 사용자 상호 작용을 처리할 수 있습니다.',
      '이벤트 객체는 핸들러 함수에 전달되지 않으며, 핸들러 함수 내에서 사용할 수 없습니다.',
      '이벤트 객체는 오직 서버 측에서 처리되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      '이벤트 객체는 이벤트 핸들러 함수 내에서만 사용 가능하며, 다른 함수에서는 사용할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이벤트 객체는 이벤트가 발생한 요소와 관련된 정보를 담고 있는 객체로, 핸들러 함수 내에서 이 정보를 활용하여 사용자 상호 작용을 처리할 수 있습니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 이벤트 전파란 무엇이며, 어떤 방식으로 동작하나요?',
    options: [
      '이벤트 전파는 이벤트가 발생한 요소에서 시작하여 상위 요소로 이벤트가 전달되는 프로세스를 의미하며, 이벤트 버블링과 캡처링 단계로 나뉩니다.',
      '이벤트 전파는 오직 서버 측에서 처리되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      '이벤트 전파는 핸들러 함수 내에서만 발생하며, 다른 함수에서는 처리할 수 없습니다.',
      '이벤트 전파는 이벤트가 발생한 요소에서 시작하여 하위 요소로 이벤트가 전달되는 프로세스를 의미하며, 이벤트 버블링과 캡처링 단계로 나뉩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이벤트 전파는 이벤트가 발생한 요소에서 시작하여 상위 요소로 이벤트가 전달되는 프로세스를 의미하며, 이벤트 버블링과 캡처링 단계로 나뉩니다. 이를 통해 상위 요소에서 하위 요소까지 이벤트 처리를 관리할 수 있습니다.',
  },
  {
    category: 'JavaScript/Event',
    question: '이벤트 캡처링은 어떤 방식으로 동작하며, 언제 사용되나요?',
    options: [
      '이벤트 캡처링은 이벤트가 상위 요소에서 하위 요소로 전파되는 단계로, 이벤트가 하위 요소에 도달하기 전에 상위 요소에서 캡처링 단계에서 이벤트를 처리합니다. 주로 이벤트를 사전에 가로채고 처리해야 할 때 사용됩니다.',
      '이벤트 캡처링은 이벤트가 하위 요소에서 상위 요소로 전파되는 단계로, 이벤트가 하위 요소에서 발생한 후 상위 요소에서 처리합니다. 주로 이벤트를 후속 처리할 때 사용됩니다.',
      '이벤트 캡처링은 오직 서버 측에서 처리되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      '이벤트 캡처링은 이벤트 처리에 영향을 미치지 않으며, 사용되지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이벤트 캡처링은 이벤트가 상위 요소에서 하위 요소로 전파되는 단계로, 이벤트가 하위 요소에 도달하기 전에 상위 요소에서 캡처링 단계에서 이벤트를 처리합니다. 주로 이벤트를 사전에 가로채고 처리해야 할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 어떤 종류의 이벤트 유형들이 있으며, 각각 어떤 상황에서 사용되나요?',
    options: [
      '클릭, 마우스 오버, 키 누름 등 다양한 이벤트 유형이 있으며, 각각 사용자 상호 작용을 처리하기 위해 사용됩니다.',
      '이벤트 유형은 모두 비슷하며, 상황에 따라 어떤 유형을 사용해도 동일한 결과를 얻을 수 있습니다.',
      '이벤트 유형은 JavaScript에서 사용되지 않으며, HTML 요소에는 관련 이벤트가 없습니다.',
      '이벤트 유형은 오직 서버 측에서 처리되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서는 다양한 이벤트 유형이 있으며, 각각 사용자 상호 작용을 처리하기 위해 사용됩니다. 예를 들어, 클릭 이벤트는 요소를 클릭할 때 발생하고, 마우스 오버 이벤트는 요소 위에 마우스 커서를 올렸을 때 발생합니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      "자바스크립트에서 '이벤트 버블링(event bubbling)'과 '이벤트 캡처링(event capturing)'에 대해 설명하세요.",
    options: [
      '이벤트 버블링은 이벤트가 하위 요소에서 상위 요소로 전파되는 과정을 나타내며, 이벤트 캡처링은 상위 요소에서 하위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다.',
      '이벤트 버블링은 이벤트가 상위 요소에서 하위 요소로 전파되는 과정을 나타내며, 이벤트 캡처링은 하위 요소에서 상위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다.',
      '이벤트 버블링과 이벤트 캡처링은 자바스크립트에서 사용되지 않는 개념입니다.',
      '이벤트 버블링과 이벤트 캡처링은 동일한 개념을 나타냅니다.',
    ],
    correct_answer: 1,
    answer_description:
      '이벤트 버블링은 이벤트가 하위 요소에서 상위 요소로 전파되는 과정을 나타내며, 일반적으로 가장 하위 요소부터 시작하여 상위 요소로 이벤트가 전파됩니다. 이와 반대로, 이벤트 캡처링은 상위 요소에서 하위 요소로 이벤트 전파가 시작되는 과정을 나타냅니다. 이벤트 캡처링은 이벤트 버블링 이전에 발생하며, 상위 요소부터 시작하여 하위 요소로 이벤트가 전파됩니다. 두 과정은 이벤트 전파 방향에 차이가 있으며, 이를 이용하여 이벤트를 적절하게 처리할 수 있습니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 이벤트 핸들러를 어떻게 제거하나요? 이벤트 핸들러를 제거하는 이유는 무엇인가요?',
    options: [
      '이벤트 핸들러를 제거하기 위해 `removeEventListener` 메서드를 사용합니다. 이벤트 핸들러를 제거하는 이유로는 불필요한 이벤트 처리를 방지하거나 메모리 누수를 방지하기 위함이 있습니다.',
      '이벤트 핸들러를 제거하기 위해 `addEventListener` 메서드를 사용합니다. 이벤트 핸들러를 제거하는 이유로는 이벤트 처리를 더 많이 할 수 있게 하기 위함이 있습니다.',
      '이벤트 핸들러를 제거하는 방법은 JavaScript에서 지원하지 않으며, 핸들러는 항상 남아 있습니다.',
      '이벤트 핸들러를 제거하기 위해 `addHandler` 메서드를 사용합니다. 이벤트 핸들러를 제거하는 이유로는 오류를 방지하기 위함이 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`removeEventListener` 메서드를 사용하여 이벤트 핸들러를 제거할 수 있으며, 이를 통해 불필요한 이벤트 처리를 방지하거나 메모리 누수를 방지할 수 있습니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 이벤트 위임이란 무엇이며, 어떤 상황에서 유용하게 사용되나요?',
    options: [
      '이벤트 위임은 하위 요소에 개별적으로 이벤트 핸들러를 등록하는 대신 상위 요소에 이벤트 핸들러를 등록하고, 이벤트가 상위 요소에서 발생한 후 하위 요소를 확인하여 처리하는 방식입니다. 동적으로 생성된 요소를 처리하거나 성능 최적화에 유용합니다.',
      '이벤트 위임은 오직 하위 요소에 개별적으로 이벤트 핸들러를 등록하는 방식으로, 상위 요소에 이벤트 핸들러를 등록하는 것과는 관련이 없습니다.',
      '이벤트 위임은 오직 서버 측에서 처리되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      '이벤트 위임은 이벤트 처리에 영향을 미치지 않으며, 사용되지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이벤트 위임은 하위 요소에 개별적으로 이벤트 핸들러를 등록하는 대신 상위 요소에 이벤트 핸들러를 등록하고, 이벤트가 상위 요소에서 발생한 후 하위 요소를 확인하여 처리하는 방식입니다. 동적으로 생성된 요소를 처리하거나 성능 최적화에 유용합니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      'JavaScript에서 `event.preventDefault()` 메서드는 어떻게 동작하며, 어떤 상황에서 사용되나요?',
    options: [
      '`event.preventDefault()` 메서드는 이벤트의 기본 동작을 취소하거나 막는 역할을 합니다. 주로 링크나 폼 제출과 같은 기본 동작을 방지하여 원하는 동작을 구현할 때 사용됩니다.',
      '`event.preventDefault()` 메서드는 오직 키보드 이벤트에서만 사용되며, 다른 종류의 이벤트에서는 적용되지 않습니다.',
      '`event.preventDefault()` 메서드는 오직 마우스 이벤트에서만 사용되며, 다른 종류의 이벤트에서는 적용되지 않습니다.',
      '`event.preventDefault()` 메서드는 JavaScript에서 지원하지 않으며, 기본 동작을 변경할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`event.preventDefault()` 메서드는 이벤트의 기본 동작을 취소하거나 막는 역할을 합니다. 주로 링크나 폼 제출과 같은 기본 동작을 방지하여 원하는 동작을 구현할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      '이벤트 객체의 `target` 속성은 무엇이며, 어떻게 활용할 수 있나요?',
    options: [
      '`target` 속성은 이벤트가 발생한 HTML 요소를 나타내며, 이를 활용하여 이벤트가 발생한 요소에 대한 조작이나 처리를 할 수 있습니다.',
      '`target` 속성은 이벤트 핸들러의 이름을 나타내며, 이를 활용하여 이벤트 핸들러를 식별하거나 변경할 수 있습니다.',
      '`target` 속성은 이벤트 발생 시간을 나타내며, 이를 활용하여 이벤트 발생 시간을 기록하거나 분석할 수 있습니다.',
      '`target` 속성은 이벤트 핸들러의 매개변수를 나타내며, 이를 활용하여 이벤트 핸들러에 데이터를 전달할 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`target` 속성은 이벤트가 발생한 HTML 요소를 나타내며, 이를 활용하여 이벤트가 발생한 요소에 대한 조작이나 처리를 할 수 있습니다.',
  },
  {
    category: 'JavaScript/Event',
    question:
      '이벤트 객체의 `stopPropagation()` 메서드는 어떻게 동작하며, 언제 사용되나요?',
    options: [
      '`stopPropagation()` 메서드는 이벤트의 전파를 중지하고 이벤트가 상위 요소로 전파되지 않도록 합니다. 이벤트가 하위 요소에서만 처리되어야 할 때 사용됩니다.',
      '`stopPropagation()` 메서드는 이벤트 핸들러를 제거하고 이벤트를 취소하는 역할을 합니다. 모든 이벤트를 중지하는 데 사용됩니다.',
      '`stopPropagation()` 메서드는 이벤트의 전파를 가속화시키고, 이벤트가 빠르게 상위 요소로 전파되도록 합니다. 주로 성능 최적화에 사용됩니다.',
      '`stopPropagation()` 메서드는 JavaScript에서 지원하지 않으며, 이벤트의 전파를 변경할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`stopPropagation()` 메서드는 이벤트의 전파를 중지하고 이벤트가 상위 요소로 전파되지 않도록 합니다. 이벤트가 하위 요소에서만 처리되어야 할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Hoisting',
    question: "자바스크립트에서 '호이스팅(Hoisting)'은 무엇인가요?",
    options: [
      '호이스팅은 함수 내에서 선언한 변수가 해당 함수의 최상단으로 끌어올려지는 것을 의미합니다.',
      '호이스팅은 변수를 초기화하기 전에 사용할 수 있게 하는 것을 의미합니다.',
      '호이스팅은 변수의 스코프를 전역으로 변경하는 것을 의미합니다.',
      '호이스팅은 오류를 발생시키는 자바스크립트의 특징입니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 '호이스팅(Hoisting)'은 함수 내에서 선언한 변수 및 함수 선언문이 해당 함수의 최상단으로 끌어올려지는 것을 의미합니다. 이것은 변수가 선언되기 이전에도 해당 변수를 사용할 수 있게 하는 특징으로, 자바스크립트 엔진이 코드를 실행하기 전에 선언된 변수 및 함수 선언문을 메모리에 먼저 올려놓는 것입니다.",
  },
  {
    category: 'JavaScript/Hoisting',
    question:
      'JavaScript에서 호이스팅(Hoisting)이란 무엇이며, 코드 실행 전에 어떤 처리가 이루어집니까?',
    options: [
      '호이스팅은 변수와 함수 선언을 코드 상단으로 끌어올리는 것을 의미하며, 코드 실행 전에 변수와 함수가 메모리에 할당됩니다.',
      '호이스팅은 코드 실행 중에만 발생하며, 코드 실행 전에는 아무런 처리가 이루어지지 않습니다.',
      '호이스팅은 JavaScript에서 지원하지 않으며, 변수와 함수는 항상 코드에서 선언된 위치에서만 사용됩니다.',
      '호이스팅은 오직 함수 선언만 처리하며, 변수는 처리하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '호이스팅은 변수와 함수 선언을 코드 상단으로 끌어올리는 것을 의미하며, 코드 실행 전에 변수와 함수가 메모리에 할당됩니다.',
  },
  {
    category: 'JavaScript/Hoisting',
    question:
      'JavaScript에서 변수를 선언할 때 호이스팅이 어떻게 동작하며, 초기화 값과 관계가 있나요?',
    options: [
      '변수 선언은 호이스팅되지만, 초기화 값은 호이스팅되지 않습니다. 변수는 선언 단계에서 메모리에 할당되지만 초기화는 변수가 정의된 위치에서 이루어집니다.',
      '변수 선언과 초기화 값은 모두 호이스팅되며, 코드 실행 전에 모든 변수가 메모리에 할당됩니다.',
      '변수 선언과 초기화 값은 모두 호이스팅되지 않으며, 변수는 사용하기 전에 반드시 초기화되어야 합니다.',
      '변수 선언은 호이스팅되지 않으며, 초기화 값은 호이스팅됩니다. 변수는 사용하기 전에 초기화되어야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '변수 선언은 호이스팅되지만, 초기화 값은 호이스팅되지 않습니다. 변수는 선언 단계에서 메모리에 할당되지만 초기화는 변수가 정의된 위치에서 이루어집니다.',
  },
  {
    category: 'JavaScript/Hoisting',
    question:
      'JavaScript에서 함수 선언과 함수 표현식의 호이스팅 동작은 어떻게 다를까요?',
    options: [
      '함수 선언은 함수 전체가 호이스팅되며, 함수를 선언하기 전에도 호출할 수 있습니다. 함수 표현식은 변수만 호이스팅되고 함수 자체는 호이스팅되지 않습니다.',
      '함수 선언과 함수 표현식은 모두 호이스팅되며, 함수를 선언하기 전에도 호출할 수 있습니다.',
      '함수 선언은 변수만 호이스팅되고 함수 자체는 호이스팅되지 않습니다. 함수 표현식은 함수 전체가 호이스팅되며, 함수를 선언하기 전에는 호출할 수 없습니다.',
      '함수 선언과 함수 표현식은 모두 호이스팅되지 않으며, 함수를 사용하기 위해서는 항상 선언 이후에 호출해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '함수 선언은 함수 전체가 호이스팅되며, 함수를 선언하기 전에도 호출할 수 있습니다. 함수 표현식은 변수만 호이스팅되고 함수 자체는 호이스팅되지 않습니다.',
  },
  {
    category: 'JavaScript/Hoisting',
    question: 'JavaScript에서 호이스팅은 변수의 스코프에 어떤 영향을 미치나요?',
    options: [
      '호이스팅은 변수의 스코프에 영향을 미치지 않으며, 변수는 항상 해당 스코프에서 사용됩니다.',
      '호이스팅은 변수의 스코프를 변경하며, 변수는 항상 전역 스코프에서 사용됩니다.',
      '호이스팅은 변수를 스코프 밖으로 끌어올리지 않으며, 변수는 스코프 내에서 사용됩니다.',
      '호이스팅은 변수를 스코프 밖으로 끌어올리며, 변수는 스코프 밖에서도 사용될 수 있습니다.',
    ],
    correct_answer: 2,
    answer_description:
      '호이스팅은 변수를 스코프 밖으로 끌어올리지 않으며, 변수는 스코프 내에서 사용됩니다. 즉, 변수는 선언된 스코프 내에서만 유효합니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript에서 Promise는 무엇이며, 어떤 상황에서 유용하게 사용될까요?',
    options: [
      'Promise는 비동기 작업을 처리하기 위한 객체로, 작업이 완료되면 성공 또는 실패와 같은 결과를 반환합니다. 주로 데이터 로딩, 파일 다운로드, 네트워크 요청과 같은 비동기 작업에 사용됩니다.',
      'Promise는 동기 작업을 처리하기 위한 객체로, 작업이 완료되면 결과를 반환합니다. 주로 숫자 연산, 문자열 처리와 같은 동기 작업에 사용됩니다.',
      'Promise는 오직 클라이언트 측 JavaScript에서만 사용되며, 서버 측에서는 사용할 수 없습니다.',
      'Promise는 데이터를 저장하거나 검색하는 데 사용되며, 비동기 작업과는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'Promise는 비동기 작업을 처리하기 위한 객체로, 작업이 완료되면 성공 또는 실패와 같은 결과를 반환합니다. 주로 데이터 로딩, 파일 다운로드, 네트워크 요청과 같은 비동기 작업에 사용됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise는 어떤 세 가지 상태를 가지며, 각각 어떤 의미를 가지나요?',
    options: [
      '대기(Pending), 완료(Fulfilled), 거부(Rejected) 세 가지 상태를 가지며, 대기 상태에서는 작업이 진행 중이며 완료 또는 거부 상태로 변경됩니다.',
      '대기(Pending), 성공(Success), 실패(Failure) 세 가지 상태를 가지며, 대기 상태에서는 작업이 진행 중이며 성공 또는 실패 상태로 변경됩니다.',
      '대기(Pending), 시작(Started), 종료(Completed) 세 가지 상태를 가지며, 대기 상태에서는 작업이 아직 시작되지 않았으며 종료 또는 시작 상태로 변경됩니다.',
      '대기(Pending), 완료(Finished), 취소(Canceled) 세 가지 상태를 가지며, 대기 상태에서는 작업이 진행 중이며 완료 또는 취소 상태로 변경됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript Promise는 대기(Pending), 완료(Fulfilled), 거부(Rejected) 세 가지 상태를 가지며, 대기 상태에서는 작업이 진행 중이며 완료 또는 거부 상태로 변경됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise에서 체이닝(Chaining)은 무엇이며, 어떻게 사용되나요?',
    options: [
      '체이닝은 여러 Promise를 연결하여 연속적으로 비동기 작업을 수행하는 기법으로, 각 Promise의 결과를 다음 Promise로 전달합니다. 이를 통해 비동기 작업을 순차적으로 처리할 수 있습니다.',
      '체이닝은 여러 Promise를 병렬로 실행하여 빠르게 결과를 얻는 기법으로, 각 Promise의 결과를 병렬로 수집합니다. 이를 통해 동시에 여러 작업을 처리할 수 있습니다.',
      '체이닝은 Promise에서 사용되지 않으며, 비동기 작업은 항상 독립적으로 실행됩니다.',
      '체이닝은 오직 서버 측 JavaScript에서만 사용되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '체이닝은 여러 Promise를 연결하여 연속적으로 비동기 작업을 수행하는 기법으로, 각 Promise의 결과를 다음 Promise로 전달합니다. 이를 통해 비동기 작업을 순차적으로 처리할 수 있습니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise에서 오류 처리는 어떻게 이루어지며, 어떤 방식으로 오류를 처리할 수 있나요?',
    options: [
      'Promise에서 오류는 `.catch()` 메서드나 `try...catch` 구문을 사용하여 처리할 수 있으며, 오류가 발생하면 연관된 오류 핸들러 함수가 실행됩니다.',
      'Promise에서 오류 처리는 기본적으로 내장되어 있으며, 별도의 처리가 필요하지 않습니다.',
      'Promise에서 오류는 오직 서버 측 JavaScript에서만 처리할 수 있으며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      'Promise에서 오류 처리는 `.error()` 메서드나 `if...else` 구문을 사용하여 처리할 수 있으며, 오류가 발생하면 연관된 오류 핸들러 함수가 실행됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      'Promise에서 오류는 `.catch()` 메서드나 `try...catch` 구문을 사용하여 처리할 수 있으며, 오류가 발생하면 연관된 오류 핸들러 함수가 실행됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript에서 `Promise.all`과 `Promise.race`는 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      '`Promise.all`은 여러 개의 Promise를 동시에 실행하고, 모든 Promise가 완료될 때까지 기다린 후 결과를 반환합니다. `Promise.race`는 여러 개의 Promise를 동시에 실행하고, 가장 먼저 완료되는 Promise의 결과를 반환합니다.',
      '`Promise.all`은 하나의 Promise를 실행하고, 해당 Promise가 완료될 때까지 기다린 후 결과를 반환합니다. `Promise.race`는 여러 개의 Promise를 병렬로 실행하고, 모든 Promise의 결과를 병합하여 반환합니다.',
      '`Promise.all`은 여러 개의 Promise를 병렬로 실행하고, 가장 늦게 완료된 Promise의 결과를 반환합니다. `Promise.race`는 여러 개의 Promise를 동시에 실행하고, 모든 Promise의 결과를 병합하여 반환합니다.',
      '`Promise.all`과 `Promise.race`는 JavaScript에서 사용되지 않으며, 다른 Promise 메서드를 대신 사용해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`Promise.all`은 여러 개의 Promise를 동시에 실행하고, 모든 Promise가 완료될 때까지 기다린 후 결과를 반환합니다. `Promise.race`는 여러 개의 Promise를 동시에 실행하고, 가장 먼저 완료되는 Promise의 결과를 반환합니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise에서 `.then()` 메서드는 어떤 역할을 하며, 어떤 상황에서 사용되나요?',
    options: [
      '`.then()` 메서드는 Promise의 성공 상태에서 실행되며, 이전 Promise의 결과를 가지고 추가 작업을 수행합니다. 주로 비동기 작업의 성공 결과를 처리할 때 사용됩니다.',
      '`.then()` 메서드는 Promise의 실패 상태에서 실행되며, 오류 처리를 위한 코드를 작성할 때 사용됩니다. 주로 비동기 작업의 오류 처리에 사용됩니다.',
      '`.then()` 메서드는 Promise의 대기 상태에서 실행되며, 작업이 완료되지 않았을 때 수행할 코드를 작성할 때 사용됩니다. 주로 비동기 작업의 초기 설정에 사용됩니다.',
      '`.then()` 메서드는 Promise에서 사용되지 않으며, 다른 메서드를 대신 사용해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`.then()` 메서드는 Promise의 성공 상태에서 실행되며, 이전 Promise의 결과를 가지고 추가 작업을 수행합니다. 주로 비동기 작업의 성공 결과를 처리할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise에서 `.catch()` 메서드는 어떤 역할을 하며, 언제 어떻게 사용해야 하나요?',
    options: [
      '`.catch()` 메서드는 Promise의 실패 상태에서 실행되며, 오류 처리를 위한 코드를 작성할 때 사용됩니다. 비동기 작업에서 발생하는 오류를 처리할 때 유용합니다.',
      '`.catch()` 메서드는 Promise의 성공 상태에서 실행되며, 추가 작업을 수행할 때 사용됩니다. 주로 비동기 작업의 성공 결과를 처리할 때 사용됩니다.',
      '`.catch()` 메서드는 오직 클라이언트 측 JavaScript에서만 사용되며, 서버 측에서는 사용할 수 없습니다.',
      '`.catch()` 메서드는 Promise에서 사용되지 않으며, 다른 오류 처리 방법을 사용해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`.catch()` 메서드는 Promise의 실패 상태에서 실행되며, 오류 처리를 위한 코드를 작성할 때 사용됩니다. 비동기 작업에서 발생하는 오류를 처리할 때 유용합니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript에서 `async/await` 구문은 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      '`async/await` 구문은 Promise를 보다 간결하게 사용하기 위한 구문으로, 비동기 작업을 동기식으로 작성할 수 있습니다. 주로 비동기 작업을 보다 가독성 좋게 처리할 때 사용됩니다.',
      '`async/await` 구문은 동기 작업을 보다 간결하게 사용하기 위한 구문으로, 비동기 작업과는 관련이 없습니다.',
      '`async/await` 구문은 JavaScript에서 지원하지 않으며, 다른 언어에서만 사용 가능합니다.',
      '`async/await` 구문은 Promise를 대체하는 것으로, 사용하지 않아도 됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`async/await` 구문은 Promise를 보다 간결하게 사용하기 위한 구문으로, 비동기 작업을 동기식으로 작성할 수 있습니다. 주로 비동기 작업을 보다 가독성 좋게 처리할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript Promise에서 언제 `.finally()` 메서드를 사용해야 하며, 이 메서드의 역할은 무엇인가요?',
    options: [
      '`.finally()` 메서드는 Promise에서 예외적인 상황이 아닌 모든 경우에 사용해야 하며, 해당 Promise의 성공 또는 실패 여부와 관계없이 항상 실행됩니다. 보통 정리 작업을 수행할 때 사용됩니다.',
      '`.finally()` 메서드는 오직 실패한 Promise에 대해서만 사용해야 하며, 해당 Promise가 실패할 때에만 실행됩니다. 보통 오류 처리 작업을 수행할 때 사용됩니다.',
      '`.finally()` 메서드는 Promise에서 사용되지 않으며, 다른 방법으로 정리 작업을 수행해야 합니다.',
      '`.finally()` 메서드는 오직 성공한 Promise에 대해서만 사용해야 하며, 해당 Promise가 성공할 때에만 실행됩니다. 보통 성공 결과를 처리할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`.finally()` 메서드는 Promise에서 예외적인 상황이 아닌 모든 경우에 사용해야 하며, 해당 Promise의 성공 또는 실패 여부와 관계없이 항상 실행됩니다. 보통 정리 작업을 수행할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Promise',
    question:
      'JavaScript에서 Promise와 콜백 함수(Callback Function)의 차이점은 무엇이며, 어떤 상황에서 Promise를 사용해야 하나요?',
    options: [
      'Promise는 비동기 작업의 성공 및 실패를 처리하기 위한 내장 기능으로, 콜백 함수보다 가독성이 뛰어나며 오류 처리가 편리합니다. 주로 비동기 작업을 처리할 때 사용됩니다.',
      'Promise와 콜백 함수는 완전히 동일하며, 어떤 것을 사용해도 상관없습니다.',
      '콜백 함수는 비동기 작업의 성공 및 실패를 처리하기 위한 내장 기능으로, Promise보다 간단하며 가벼운 방법입니다. 주로 비동기 작업을 처리할 때 사용됩니다.',
      'Promise와 콜백 함수는 JavaScript에서 사용할 수 없으며, 다른 방법을 사용해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'Promise는 비동기 작업의 성공 및 실패를 처리하기 위한 내장 기능으로, 콜백 함수보다 가독성이 뛰어나며 오류 처리가 편리합니다. 주로 비동기 작업을 처리할 때 사용됩니다.',
  },

  {
    category: 'JavaScript/Closure',
    question:
      'JavaScript에서 클로저(Closure)란 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      '클로저는 함수와 그 함수가 선언된 렉시컬 환경(Lexical Environment)의 조합으로, 함수가 외부 변수에 접근할 수 있는 특별한 기능을 가집니다. 주로 함수 내부에서 외부 변수를 참조할 때 사용됩니다.',
      '클로저는 함수 내부에서만 사용되며, 외부 변수에 접근할 수 없습니다. 주로 함수 내부에서 지역 변수를 활용할 때 사용됩니다.',
      '클로저는 오직 서버 측 JavaScript에서만 사용되며, 클라이언트 측 JavaScript와는 관련이 없습니다.',
      '클로저는 오직 전역 스코프에서만 사용되며, 함수 내부에서는 사용할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 함수와 그 함수가 선언된 렉시컬 환경(Lexical Environment)의 조합으로, 함수가 외부 변수에 접근할 수 있는 특별한 기능을 가집니다. 주로 함수 내부에서 외부 변수를 참조할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      'JavaScript에서 클로저는 어떤 실제적인 상황에서 유용하게 활용될 수 있나요?',
    options: [
      '클로저는 비동기 작업에서 콜백 함수를 사용할 때 유용하며, 외부 상태를 유지하면서 콜백 함수에 접근할 수 있습니다. 또한 정보 은닉과 모듈 패턴 구현에도 활용됩니다.',
      '클로저는 오직 전역 스코프에서만 사용되며, 실제 상황에서 활용할 수 있는 방법은 없습니다.',
      '클로저는 주로 배열과 객체의 처리에 사용되며, 비동기 작업과는 관련이 없습니다.',
      '클로저는 주로 반복문 내부에서 활용되며, 함수 외부 상태를 변경하는 데 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 비동기 작업에서 콜백 함수를 사용할 때 유용하며, 외부 상태를 유지하면서 콜백 함수에 접근할 수 있습니다. 또한 정보 은닉과 모듈 패턴 구현에도 활용됩니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      'JavaScript에서 클로저를 사용할 때 메모리 관리에 어떤 주의점이 있으며, 메모리 누수를 방지하기 위한 방법은 무엇인가요?',
    options: [
      '클로저는 외부 변수에 접근하기 때문에, 불필요한 변수 참조를 피하고 사용이 끝난 클로저는 해제해야 합니다. 이를 통해 메모리 누수를 방지할 수 있습니다.',
      '클로저를 사용할 때 메모리 관리에 별다른 주의가 필요하지 않으며, 자동으로 메모리가 관리됩니다.',
      '클로저는 오직 서버 측 JavaScript에서만 사용되며, 클라이언트 측 JavaScript에서는 메모리 관리가 필요하지 않습니다.',
      '클로저를 사용할 때는 외부 변수에 접근하지 않도록 주의해야 하며, 그렇게 하면 메모리 누수를 방지할 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 외부 변수에 접근하기 때문에, 불필요한 변수 참조를 피하고 사용이 끝난 클로저는 해제해야 합니다. 이를 통해 메모리 누수를 방지할 수 있습니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저와 콜백 함수(Callback Function)는 어떻게 관련이 있으며, 어떤 상황에서 함께 사용되나요?',
    options: [
      '클로저는 콜백 함수 내에서 외부 변수에 접근하기 위해 사용되며, 비동기 작업에서 주로 함께 활용됩니다. 콜백 함수 내에서 클로저를 사용하여 외부 상태를 유지하고 공유할 수 있습니다.',
      '클로저와 콜백 함수는 완전히 독립적인 개념이며, 상호 관련이 없습니다.',
      '클로저는 오직 클라이언트 측 JavaScript에서만 사용되며, 서버 측에서는 사용할 수 없습니다. 이에 따라 콜백 함수와 함께 사용되지 않습니다.',
      '클로저와 콜백 함수는 모두 오래된 JavaScript 패턴으로, 최신 프로그래밍 기술에서는 사용되지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 콜백 함수 내에서 외부 변수에 접근하기 위해 사용되며, 비동기 작업에서 주로 함께 활용됩니다. 콜백 함수 내에서 클로저를 사용하여 외부 상태를 유지하고 공유할 수 있습니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저와 함수 스코프(Function Scope)는 어떻게 상호 작용하며, 어떤 상황에서 함수 스코프를 클로저로 활용할 수 있나요?',
    options: [
      '클로저는 함수 스코프 내에서 선언된 변수에 접근할 수 있으며, 함수 스코프 내부에서 클로저를 반환하면 외부에서 해당 변수에 접근할 수 없게 됩니다. 이를 통해 정보 은닉과 모듈 패턴을 구현할 수 있습니다.',
      '클로저와 함수 스코프는 별개의 개념이며, 상호 작용하지 않습니다. 함수 스코프 내에서 선언된 변수는 항상 외부에서 접근 가능합니다.',
      '클로저는 오직 객체 스코프(Object Scope)에서만 사용되며, 함수 스코프와는 관련이 없습니다.',
      '함수 스코프 내에서 클로저를 활용할 경우, 해당 변수는 오로지 함수 내부에서만 사용 가능하며 외부에서 접근할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 함수 스코프 내에서 선언된 변수에 접근할 수 있으며, 함수 스코프 내부에서 클로저를 반환하면 외부에서 해당 변수에 접근할 수 없게 됩니다. 이를 통해 정보 은닉과 모듈 패턴을 구현할 수 있습니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저가 외부 변수에 접근할 때 어떤 방식으로 동작하며, 어떤 변수를 클로저 내에서 수정할 수 있을까요?',
    options: [
      '클로저는 외부 변수를 기억하고, 해당 변수를 참조하거나 수정할 수 있습니다. 클로저 내에서 외부 변수를 수정하려면 해당 변수를 재할당하거나, 객체 내의 속성을 변경하면 됩니다.',
      '클로저는 외부 변수를 참조할 수는 있지만, 수정할 수 없습니다. 클로저 내에서 외부 변수를 수정하려면 해당 변수를 다시 선언해야 합니다.',
      '클로저는 외부 변수를 무시하며, 해당 변수를 참조하거나 수정할 수 없습니다. 클로저는 오직 함수 내부에서만 작동합니다.',
      '클로저는 오직 외부 변수를 수정할 수 있으며, 해당 변수를 참조하지 않고 수정할 경우 외부 변수에 영향을 미치지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 외부 변수를 기억하고, 해당 변수를 참조하거나 수정할 수 있습니다. 클로저 내에서 외부 변수를 수정하려면 해당 변수를 재할당하거나, 객체 내의 속성을 변경하면 됩니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저는 비동기 작업에서 어떻게 활용되며, 왜 비동기 작업과 함께 사용되는 것이 유용한가요?',
    options: [
      '클로저를 사용하여 비동기 작업 내에서 외부 변수를 유지하고 공유할 수 있습니다. 이로써 비동기 작업이 완료될 때까지 데이터를 안전하게 보관하거나 조작할 수 있습니다.',
      '클로저는 비동기 작업에서 사용할 수 없으며, 이와 관련이 없습니다. 비동기 작업은 항상 독립적으로 처리되어야 합니다.',
      '클로저는 비동기 작업에서만 사용할 수 있으며, 동기 작업과는 관련이 없습니다. 비동기 작업 내에서 외부 변수를 수정할 때 사용됩니다.',
      '클로저는 오직 동기 작업에서만 사용할 수 있으며, 비동기 작업과는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저를 사용하여 비동기 작업 내에서 외부 변수를 유지하고 공유할 수 있습니다. 이로써 비동기 작업이 완료될 때까지 데이터를 안전하게 보관하거나 조작할 수 있습니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저는 어떻게 모듈 패턴(Module Pattern) 구현에 사용되며, 모듈 패턴을 사용하는 장점은 무엇인가요?',
    options: [
      '클로저를 사용하여 모듈 패턴을 구현하면, 외부에서 접근할 수 없는 내부 상태와 함수를 생성할 수 있습니다. 이를 통해 정보 은닉과 캡슐화를 달성하며 코드의 유지보수성을 향상시킵니다.',
      '클로저는 모듈 패턴과 아무런 관련이 없으며, 모듈 패턴을 사용하는 것은 권장하지 않습니다. 모듈 패턴은 오래된 프로그래밍 방식입니다.',
      '클로저는 오직 모듈 패턴 내에서만 사용할 수 있으며, 모듈 패턴을 사용하지 않을 경우 코드의 가독성이 떨어집니다.',
      '클로저를 사용하는 것은 모듈 패턴을 구현하는 유일한 방법이며, 모듈 패턴을 사용하면 코드의 실행 속도를 향상시킬 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저를 사용하여 모듈 패턴을 구현하면, 외부에서 접근할 수 없는 내부 상태와 함수를 생성할 수 있습니다. 이를 통해 정보 은닉과 캡슐화를 달성하며 코드의 유지보수성을 향상시킵니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저를 사용하여 어떻게 프라이빗 변수(Private Variable)를 구현할 수 있으며, 왜 프라이빗 변수를 사용하는 것이 유용한가요?',
    options: [
      '클로저 내에서 선언된 변수는 외부에서 접근할 수 없으며, 이를 통해 프라이빗 변수를 구현할 수 있습니다. 프라이빗 변수를 사용하면 데이터 은닉과 오류 방지에 도움이 됩니다.',
      '클로저를 사용하더라도 외부에서 변수에 접근할 수 있으며, 프라이빗 변수를 구현하는 것은 불가능합니다. 프라이빗 변수를 사용하는 것은 권장하지 않습니다.',
      '클로저는 프라이빗 변수를 구현하는 유일한 방법이며, 프라이빗 변수를 사용하면 코드의 가독성을 향상시킬 수 있습니다.',
      '클로저 내에서 선언된 변수는 오로지 외부에서만 접근할 수 있으며, 이를 통해 프라이빗 변수를 구현할 수 있지만, 코드의 유지보수성은 저하됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저 내에서 선언된 변수는 외부에서 접근할 수 없으며, 이를 통해 프라이빗 변수를 구현할 수 있습니다. 프라이빗 변수를 사용하면 데이터 은닉과 오류 방지에 도움이 됩니다.',
  },
  {
    category: 'JavaScript/Closure',
    question:
      '클로저가 어떻게 스코프 체인(Scope Chain)과 관련이 있으며, 스코프 체인을 통해 클로저가 외부 변수에 접근하는 방식은 어떤가요?',
    options: [
      '클로저는 스코프 체인을 통해 외부 변수를 찾아 접근할 수 있으며, 스코프 체인은 함수의 렉시컬 스코프를 나타냅니다. 클로저는 스코프 체인을 따라 올라가며 변수를 찾습니다.',
      '클로저와 스코프 체인은 서로 무관하며, 클로저가 외부 변수에 접근하는 방식과 스코프 체인은 아무런 관련이 없습니다.',
      '클로저는 스코프 체인을 무시하고, 외부 변수를 직접 접근할 수 있으며, 스코프 체인은 오직 함수 스코프를 나타냅니다.',
      '클로저는 오직 함수 내에서 선언된 변수에만 접근할 수 있으며, 스코프 체인과는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클로저는 스코프 체인을 통해 외부 변수를 찾아 접근할 수 있으며, 스코프 체인은 함수의 렉시컬 스코프를 나타냅니다. 클로저는 스코프 체인을 따라 올라가며 변수를 찾습니다.',
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트에서 '비동기 처리(asynchronous processing)'의 개념에 대한 정확한 설명은 무엇인가요?",
    options: [
      "'setTimeout' 함수는 코드 실행을 동기적으로 지연시킵니다.",
      '비동기 함수는 항상 콜백 함수를 필요로 합니다.',
      '비동기 처리를 사용하면 백그라운드에서 코드 실행이 가능하며, 이는 메인 스레드를 차단하지 않습니다.',
      '자바스크립트는 다중 스레드를 지원하여 여러 작업을 동시에 처리할 수 있습니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 비동기 처리는 백그라운드에서 코드를 실행할 수 있게 해주며, 이는 메인 스레드의 실행을 차단하지 않습니다. 예를 들어, 웹 애플리케이션에서 서버로부터 데이터를 받아오는 동안 사용자 인터페이스가 멈추지 않도록 할 때 비동기 처리가 유용합니다. 'setTimeout' 함수는 지정된 시간 후에 코드를 실행하지만, 이는 비동기적으로 작동합니다. 모든 비동기 함수가 콜백을 필요로 하는 것은 아니며, 자바스크립트는 싱글 스레드 언어로서, 비동기 처리를 통해 단일 스레드의 한계를 극복합니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'Promise' 객체는 비동기 처리에서 어떠한 역할을 합니다?",
    options: [
      "'Promise' 객체는 항상 동기적인 코드 실행을 보장합니다.",
      "비동기 작업이 완료될 때까지 기다리는 데 'Promise' 객체를 사용할 수 없습니다.",
      "'Promise' 객체는 비동기 작업의 성공 또는 실패를 나타내는 결과값을 처리합니다.",
      "자바스크립트에서는 'Promise' 객체 대신 항상 콜백 함수를 사용해야 합니다.",
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 'Promise' 객체는 비동기 작업의 최종 완료(또는 실패)와 그 결과값을 나타냅니다. 'Promise'는 비동기 작업이 성공적으로 완료되었을 때 'resolve' 상태가 되며, 실패하거나 에러가 발생했을 때 'reject' 상태가 됩니다. 이를 통해 개발자들은 비동기 작업의 결과를 보다 우아하게 처리할 수 있으며, 콜백 지옥(callback hell)을 피할 수 있습니다. 따라서 'Promise'는 비동기 프로그래밍에서 중요한 개념이며, 동기적 코드 실행이나 콜백 함수의 대체 수단으로 사용됩니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'Promise' 객체는 비동기 작업에서 주로 어떤 역할을 합니다?",
    options: [
      '동기 함수 호출을 쉽게 처리하기 위해 사용됩니다.',
      '비동기 작업의 성공 또는 실패 결과를 나타내는 데 사용됩니다.',
      '모든 비동기 함수를 자동으로 동기 함수로 변환합니다.',
      '코드 실행을 일정 시간 동안 중지시키는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트의 'Promise' 객체는 비동기 작업을 처리할 때 사용됩니다. 이 객체는 비동기 작업의 최종 성공 또는 실패를 나타내며, 이를 통해 비동기 작업의 결과를 더 쉽게 관리하고 처리할 수 있습니다. 'Promise'는 비동기 작업이 완료될 때까지 기다리고, 작업이 성공적으로 완료되면 'resolve'를, 실패하면 'reject'를 반환합니다. 이를 통해 콜백 지옥(callback hell) 문제를 해결하고, 코드의 가독성과 유지 관리를 향상시키는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트의 'async/await' 구문은 비동기 작업을 처리하는 데 어떤 이점을 제공하나요?",
    options: [
      "'async/await'를 사용하면 모든 비동기 작업이 자동으로 동기 작업으로 변환됩니다.",
      '비동기 작업의 결과를 변수에 직접 할당할 수 있어 코드의 가독성이 향상됩니다.',
      "오직 'Promise' 객체에만 사용할 수 있으며 다른 비동기 패턴과 호환되지 않습니다.",
      '비동기 작업을 수행하는 동안 JavaScript 엔진의 전체 실행을 중단시킵니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트의 'async/await' 구문은 비동기 작업을 간결하고 동기적인 방식으로 작성할 수 있게 해줍니다. 'async' 함수는 암시적으로 'Promise'를 반환하며, 'await' 키워드를 사용하여 'Promise'의 해결을 기다립니다. 이를 통해 비동기 작업의 결과를 변수에 직접 할당할 수 있으며, 이는 코드의 가독성과 구조를 크게 향상시킵니다. 'async/await'는 'Promise'와 함께 사용되지만, JavaScript 엔진의 전체 실행을 중단시키지는 않습니다. 대신, 해당 비동기 작업이 완료될 때까지 함수 실행을 일시 중지합니다.",
  },
  {
    category: 'JavaScript/Asynchronous',
    question:
      "자바스크립트에서 'Event Loop'가 비동기 처리에 어떤 역할을 하는지 설명해 주세요?",
    options: [
      '모든 이벤트를 동기적으로 처리하여 성능을 최적화합니다.',
      '비동기 작업을 위한 별도의 스레드 풀을 관리합니다.',
      '코드 실행 순서를 결정하고, 콜 스택과 태스크 큐 간의 작업을 조정합니다.',
      '오직 사용자 인터랙션 이벤트만을 처리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트의 'Event Loop'는 비동기 처리에서 중요한 역할을 합니다. 이는 싱글 스레드 언어인 자바스크립트가 동시성을 달성할 수 있도록 해줍니다. 'Event Loop'는 콜 스택에 있는 모든 작업이 완료되면 태스크 큐(또는 이벤트 큐)에서 대기 중인 작업을 콜 스택으로 이동시킵니다. 이 과정은 프로그램이 실행되는 동안 계속 반복되어, 비동기 이벤트(예: 타이머, 네트워크 요청 등)가 콜 스택이 비어 있을 때 적절히 처리될 수 있도록 합니다. 이로 인해 자바스크립트는 비동기 작업을 효과적으로 처리할 수 있으며, 이는 애플리케이션의 반응성과 성능에 크게 기여합니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '변수의 범위(scope)'에 대한 설명으로 올바른 것은 무엇입니까?",
    options: [
      "'let' 키워드로 선언된 변수는 함수 레벨 스코프를 가집니다.",
      '전역 변수는 코드의 어느 곳에서나 접근할 수 있습니다.',
      "'var' 키워드로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '지역 변수는 선언된 함수 내부에서만 접근할 수 있습니다.',
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 전역 변수는 코드의 어느 곳에서나 접근할 수 있습니다. 이는 전역 변수가 전체 스크립트에 걸쳐 존재하며, 어떤 함수나 블록 내부가 아닌 최상위 레벨에서 선언됐기 때문입니다. 전역 변수의 이러한 특성은 강력하지만, 예상치 못한 충돌이나 오류를 야기할 수 있어 주의해서 사용해야 합니다. 반면에, 지역 변수(함수 내부에서 선언된 변수)는 해당 함수 내에서만 접근 가능하며, 'let'과 'const'는 블록 레벨 스코프를, 'var'는 함수 레벨 스코프를 가집니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '클로저(closure)'와 관련된 스코프의 특성을 설명하는 올바른 내용은 무엇입니까?",
    options: [
      '클로저는 전역 변수를 사용하여 메모리 누수를 방지합니다.',
      '함수가 선언될 때의 스코프 체인을 기억하여 외부 함수의 변수에 접근할 수 있습니다.',
      '모든 함수는 클로저를 형성하기 때문에 별도의 스코프는 필요 없습니다.',
      "클로저는 오직 'var' 키워드로 선언된 변수에만 접근할 수 있습니다.",
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 클로저는 함수가 자신이 선언될 때의 환경을 '기억'하는 특성을 가지고 있습니다. 이는 함수가 자신이 생성될 때의 스코프 체인에 있는 변수에 접근할 수 있도록 해줍니다. 클로저는 외부 함수의 실행이 완료된 후에도 외부 함수의 변수에 접근할 수 있는 강력한 방법을 제공합니다. 이러한 특성은 데이터 은닉, 모듈 패턴 등 다양한 고급 프로그래밍 패턴에서 유용하게 활용됩니다. 클로저는 'var', 'let', 'const' 등 어떤 종류의 변수 선언에도 적용될 수 있으며, 메모리 누수와는 별개의 개념입니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 '블록 스코프(block scope)'에 대한 설명으로 가장 정확한 것은 무엇인가요?",
    options: [
      '모든 변수는 함수 내부에서만 유효한 스코프를 가집니다.',
      "'var' 키워드로 선언된 변수는 블록 스코프를 가집니다.",
      '블록 스코프는 중괄호({})로 둘러싸인 코드 내부에서만 유효한 변수의 범위를 의미합니다.',
      '블록 스코프는 오직 반복문 내에서만 유효합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "자바스크립트에서 '블록 스코프(block scope)'는 중괄호({})로 둘러싸인 코드 블록 내에서만 유효한 변수의 범위를 의미합니다. 이는 주로 'let' 및 'const' 키워드로 선언된 변수에 적용됩니다. 예를 들어, if 문이나 for 문과 같은 코드 블록 내에서 'let'이나 'const'로 선언된 변수는 해당 블록 외부에서는 접근할 수 없습니다. 이는 'var' 키워드로 선언된 변수가 가지는 함수 레벨 스코프와 구별됩니다. 블록 스코프는 코드의 가독성과 유지 관리를 향상시키며, 예상치 못한 오류를 줄이는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 'let'과 'const' 키워드를 사용하여 선언된 변수의 스코프 특성은 무엇인가요?",
    options: [
      "'let'과 'const'로 선언된 변수는 전역 스코프를 가집니다.",
      '이러한 변수들은 오직 함수 내에서만 유효한 스코프를 가집니다.',
      "'let'과 'const'로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '이 변수들은 선언된 블록 외부에서도 접근이 가능합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "'let'과 'const' 키워드로 선언된 변수는 블록 레벨 스코프(block level scope)를 가집니다. 이는 해당 변수들이 중괄호({})로 둘러싸인 블록(예: if 문, for 문, while 문 등) 내에서만 유효하다는 것을 의미합니다. 블록 밖에서는 해당 변수들에 접근할 수 없습니다. 이 특성은 'var' 키워드와 구별되는데, 'var'로 선언된 변수는 함수 레벨 스코프(function level scope)를 가지므로 함수 내에서 어디서든 접근할 수 있습니다. 'let'과 'const'의 블록 레벨 스코프는 코드의 가독성과 유지 관리를 향상시키는 데 도움이 됩니다.",
  },
  {
    category: 'JavaScript/Scope',
    question:
      "자바스크립트에서 'var' 키워드로 선언된 변수의 스코프 규칙에 대한 설명으로 올바른 것은 무엇인가요?",
    options: [
      "'var'로 선언된 변수는 블록 레벨 스코프를 가집니다.",
      '이러한 변수들은 선언된 함수의 전체 영역에서 접근 가능합니다.',
      "'var'로 선언된 변수는 오직 선언된 블록 내에서만 접근 가능합니다.",
      "함수 외부에서 선언된 'var' 변수는 지역 스코프를 가집니다.",
    ],
    correct_answer: 1,
    answer_description:
      "'var' 키워드로 선언된 변수는 함수 레벨 스코프(function level scope)를 가집니다. 이는 'var'로 선언된 변수가 함수 내부 어디에서든 접근 가능하다는 것을 의미합니다. 예를 들어, 'var'로 선언된 변수가 함수 내의 if 문이나 for 문과 같은 블록 내부에 있더라도, 그 함수 내의 다른 부분에서도 접근할 수 있습니다. 반면에, 함수 외부에서 'var'로 선언된 변수는 전역 스코프(global scope)를 가지므로, 전역적으로 접근 가능합니다. 이러한 특성은 'let'과 'const'와 대조되며, 때때로 예상치 못한 문제를 일으킬 수 있어 주의가 필요합니다.",
  },
  {
    category: 'JavaScript/Observer',
    question:
      'JavaScript에서 옵저버 패턴(Observer Pattern)은 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      '옵저버 패턴은 객체 사이의 일대다(one-to-many) 의존성 관계를 정의하는 디자인 패턴으로, 주로 한 객체의 상태 변경이 다른 여러 객체에게 통지되어 업데이트를 수행할 때 사용됩니다.',
      '옵저버 패턴은 객체 간의 관계를 정의하지 않으며, 오직 상속을 통해 객체를 확장하는 데 사용됩니다. 상태 변경과는 관련이 없습니다.',
      '옵저버 패턴은 주로 객체 내의 메서드를 공유하기 위해 사용되며, 상태 변경과는 관련이 없습니다.',
      '옵저버 패턴은 상태 변경을 감시하고 로그를 기록하는 데 사용되며, 객체 간의 의존성을 정의하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '옵저버 패턴은 객체 사이의 일대다(one-to-many) 의존성 관계를 정의하는 디자인 패턴으로, 주로 한 객체의 상태 변경이 다른 여러 객체에게 통지되어 업데이트를 수행할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/Observer',
    question:
      '옵저버 패턴에서 주체(Subject)와 옵저버(Observer)는 각각 어떤 역할을 수행하며, 어떻게 상호 작용하나요?',
    options: [
      '주체는 상태를 관리하고 옵저버는 상태 변경을 감시하는 역할을 수행합니다. 주체는 상태가 변경되면 등록된 옵저버에게 알리고, 옵저버는 업데이트를 수행합니다.',
      '주체와 옵저버는 독립적인 역할을 수행하며, 상호 작용하지 않습니다. 주체는 상태를 관리하고, 옵저버는 데이터 처리에 관련된 작업을 담당합니다.',
      '주체와 옵저버는 서로 대화하며, 주체는 상태 변경 시 옵저버에게 메시지를 보내고 옵저버는 메시지를 수신하여 상태를 업데이트합니다. 이러한 상호 작용은 주로 이벤트 처리에 사용됩니다.',
      '주체는 옵저버를 생성하고 관리하며, 옵저버는 주체의 명령을 따르는 역할을 수행합니다. 주체는 상태가 변경되면 옵저버에게 알리고 업데이트를 요청합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '주체는 상태를 관리하고 옵저버는 상태 변경을 감시하는 역할을 수행합니다. 주체는 상태가 변경되면 등록된 옵저버에게 알리고, 옵저버는 업데이트를 수행합니다.',
  },
  {
    category: 'JavaScript/Observer',
    question:
      '옵저버 패턴의 실제 예시를 들어보세요. JavaScript에서 어떤 상황에서 옵저버 패턴을 사용할 수 있을까요?',
    options: [
      '예를 들어, 브라우저의 이벤트 처리에서 옵저버 패턴을 사용할 수 있습니다. 버튼 클릭과 같은 이벤트가 발생하면 등록된 옵저버(이벤트 핸들러)에게 알림을 보내고, 각 옵저버는 자체적으로 반응을 정의합니다.',
      '옵저버 패턴은 주로 객체 간의 관계를 정의하는 데 사용됩니다. 예를 들어, 부모 객체와 자식 객체 간의 상호 작용에서 옵저버 패턴을 활용할 수 있습니다.',
      '옵저버 패턴은 주로 데이터베이스 연결에 사용됩니다. 데이터베이스의 변경 사항이 발생하면 등록된 옵저버에게 알림을 보내어 데이터를 업데이트합니다.',
      '옵저버 패턴은 주로 웹 애플리케이션의 사용자 인터페이스(UI)에서 사용됩니다. UI 요소의 상태 변경이 다른 UI 요소에 영향을 미칠 때 옵저버 패턴을 활용할 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '예를 들어, 브라우저의 이벤트 처리에서 옵저버 패턴을 사용할 수 있습니다. 버튼 클릭과 같은 이벤트가 발생하면 등록된 옵저버(이벤트 핸들러)에게 알림을 보내고, 각 옵저버는 자체적으로 반응을 정의합니다.',
  },
  {
    category: 'JavaScript/Observer',
    question:
      'JavaScript에서 옵저버 패턴을 구현하기 위해 어떤 라이브러리나 도구를 사용할 수 있으며, 이러한 도구를 사용하는 이점은 무엇인가요?',
    options: [
      "JavaScript에서는 'EventEmitter'와 같은 라이브러리를 사용하여 옵저버 패턴을 구현할 수 있습니다. 이러한 라이브러리를 사용하면 옵저버 패턴을 간단하게 구현하고 관리할 수 있습니다.",
      '옵저버 패턴을 구현하는 데 특별한 라이브러리나 도구를 사용할 필요가 없으며, 순수 JavaScript로 직접 구현할 수 있습니다. 라이브러리 사용은 권장하지 않습니다.',
      'JavaScript에서 옵저버 패턴을 사용할 때 라이브러리를 사용하면 코드의 가독성과 유지보수성을 향상시킬 수 있으며, 다양한 기능과 옵션을 활용할 수 있습니다.',
      '옵저버 패턴을 구현할 때 라이브러리를 사용하면 성능이 저하될 수 있으며, 순수 JavaScript로 구현하는 것이 더 효율적입니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서는 'EventEmitter'와 같은 라이브러리를 사용하여 옵저버 패턴을 구현할 수 있습니다. 이러한 라이브러리를 사용하면 옵저버 패턴을 간단하게 구현하고 관리할 수 있습니다.",
  },
  {
    category: 'JavaScript/Observer',
    question:
      '옵저버 패턴과 일반적인 JavaScript 이벤트 처리(Event Handling) 방식의 차이는 무엇이며, 어떤 상황에서 어떤 방식을 사용해야 하나요?',
    options: [
      '옵저버 패턴은 객체 간의 느슨한 결합을 제공하며, 주로 다양한 객체 간의 상호 작용을 관리할 때 사용됩니다. 일반적인 이벤트 처리는 주로 단일 요소 또는 컴포넌트의 이벤트 처리에 사용됩니다.',
      '옵저버 패턴은 오직 클래스 내에서만 사용되며, 일반적인 이벤트 처리는 객체 간의 관계를 정의하지 않습니다. 어떤 방식을 사용할지는 개발자의 취향에 따라 다릅니다.',
      '옵저버 패턴은 오직 단일 요소 또는 컴포넌트의 이벤트 처리에 사용되며, 일반적인 이벤트 처리는 다양한 객체 간의 상호 작용을 관리할 때 사용됩니다.',
      '옵저버 패턴과 일반적인 이벤트 처리는 본질적으로 같으며, 상황에 따라 선택적으로 사용할 수 있습니다. 어떤 방식을 사용할지는 프로젝트의 특성에 따라 다릅니다.',
    ],
    correct_answer: 0,
    answer_description:
      '옵저버 패턴은 객체 간의 느슨한 결합을 제공하며, 주로 다양한 객체 간의 상호 작용을 관리할 때 사용됩니다. 일반적인 이벤트 처리는 주로 단일 요소 또는 컴포넌트의 이벤트 처리에 사용됩니다.',
  },
  {
    category: 'TypeScript/Need for Types in JavaScript',
    question:
      'TypeScript와 JavaScript의 주요 차이점은 무엇이며, 이러한 차이점이 개발 프로세스에 어떤 영향을 미치나요?',
    options: [
      'TypeScript는 정적 타입 검사를 제공하며, 변수의 데이터 타입을 명시적으로 선언해야 합니다. JavaScript는 동적 타입 언어로, 타입을 명시적으로 선언하지 않습니다.',
      'TypeScript는 JavaScript의 다른 버전이며, 주요 차이점은 없습니다. TypeScript는 JavaScript의 호환성을 보장합니다.',
      'TypeScript는 JavaScript의 문법을 확장한 것으로, 주요 차이점은 문법의 일부분에 불과합니다. TypeScript는 JavaScript와 완벽하게 호환됩니다.',
      'TypeScript는 JavaScript의 성능을 향상시키며, 주요 차이점은 성능과 관련이 있습니다. TypeScript는 더 빠른 실행 속도를 제공합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TypeScript는 정적 타입 검사를 제공하며, 변수의 데이터 타입을 명시적으로 선언해야 합니다. JavaScript는 동적 타입 언어로, 타입을 명시적으로 선언하지 않습니다. 이러한 차이점은 개발 프로세스에서 코드의 안정성과 가독성을 향상시킵니다.',
  },
  {
    category: 'TypeScript/Need for Types in JavaScript',
    question:
      'TypeScript를 사용하면 개발 생산성을 어떻게 향상시킬 수 있으며, 어떤 상황에서 TypeScript를 선택해야 하나요?',
    options: [
      'TypeScript는 정적 타입 검사를 통해 코드의 안정성을 높이고 오류를 줄이므로 개발 생산성을 향상시킵니다. 특히 대규모 프로젝트와 협업 환경에서 유용합니다.',
      'TypeScript는 개발 생산성을 저하시키며, 주로 작은 규모의 프로젝트나 프로토타이핑에 사용해야 합니다. 대규모 프로젝트에는 적합하지 않습니다.',
      'TypeScript는 JavaScript와 개발 생산성에 차이가 없으며, 어떤 상황에서도 선택할 수 있습니다. TypeScript는 문법 확장으로 인해 코드를 더 명확하게 작성할 수 있습니다.',
      'TypeScript는 주로 백엔드 개발에 사용되며, 프론트엔드 개발에서는 JavaScript를 선호해야 합니다. 프론트엔드 개발에서 TypeScript를 사용하면 성능이 저하될 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TypeScript는 정적 타입 검사를 통해 코드의 안정성을 높이고 오류를 줄이므로 개발 생산성을 향상시킵니다. 특히 대규모 프로젝트와 협업 환경에서 유용하며, 코드의 가독성을 향상시켜 유지보수성을 높입니다.',
  },
  {
    category: 'TypeScript/Need for Types in JavaScript',
    question:
      'TypeScript와 JavaScript의 생태계는 어떻게 다르며, 어떤 라이브러리와 프레임워크에서 TypeScript를 더 많이 사용하나요?',
    options: [
      'TypeScript는 정적 타입 검사를 제공하므로, 대규모 및 엔터프라이즈 프로젝트에서 주로 사용됩니다. Angular와 같은 프레임워크에서 TypeScript를 더 많이 사용합니다.',
      'TypeScript와 JavaScript의 생태계는 완전히 동일하며, 어떤 라이브러리나 프레임워크에서도 TypeScript를 선택적으로 사용할 수 있습니다.',
      'TypeScript는 주로 작은 규모의 프로젝트나 개인 프로젝트에서 사용되며, 대규모 프로젝트에서는 JavaScript가 더 흔하게 사용됩니다. React와 Vue.js와 같은 프레임워크에서 TypeScript를 덜 사용합니다.',
      'TypeScript는 주로 백엔드 개발에 사용되며, 프론트엔드 개발에서는 JavaScript를 더 많이 사용합니다. React Native와 같은 모바일 앱 개발에서 TypeScript를 더 많이 사용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TypeScript는 정적 타입 검사를 제공하므로, 대규모 및 엔터프라이즈 프로젝트에서 주로 사용됩니다. Angular와 같은 프레임워크에서 TypeScript를 더 많이 사용하며, 대규모 프로젝트에서는 코드의 안정성을 높이는 데 도움이 됩니다.',
  },
  {
    category: 'TypeScript/Need for Types in JavaScript',
    question:
      'TypeScript의 타입 시스템은 어떻게 동작하며, 어떤 이점을 제공하나요?',
    options: [
      'TypeScript의 타입 시스템은 정적 타입 검사를 수행하며, 변수와 함수의 입력 및 출력 타입을 명시적으로 지정할 수 있습니다. 이로써 오류를 사전에 방지하고 가독성을 향상시킵니다.',
      'TypeScript는 동적 타입 언어로, 타입 시스템을 제공하지 않습니다. 타입은 실행 시간에 동적으로 결정됩니다.',
      'TypeScript의 타입 시스템은 정적 타입 검사만 수행하며, 변수와 함수의 타입 지정은 선택사항입니다. 타입 지정은 코드 가독성을 향상시키는 데 도움을 줍니다.',
      'TypeScript의 타입 시스템은 주로 백엔드 개발에 사용되며, 프론트엔드 개발에서는 타입 시스템을 사용하지 않는 것이 일반적입니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TypeScript의 타입 시스템은 정적 타입 검사를 수행하며, 변수와 함수의 입력 및 출력 타입을 명시적으로 지정할 수 있습니다. 이로써 오류를 사전에 방지하고 가독성을 향상시킵니다.',
  },
  {
    category: 'TypeScript/Need for Types in JavaScript',
    question:
      'TypeScript 코드는 어떻게 컴파일되며, 컴파일된 JavaScript 코드는 어떻게 동작하나요?',
    options: [
      'TypeScript 코드는 TypeScript 컴파일러를 사용하여 JavaScript 코드로 변환됩니다. 컴파일된 JavaScript 코드는 브라우저 또는 Node.js 환경에서 실행됩니다.',
      'TypeScript 코드는 자동으로 JavaScript로 변환되며, 컴파일러를 사용하지 않습니다. 변환된 JavaScript 코드는 동적 타입 언어처럼 동작합니다.',
      'TypeScript 코드는 TypeScript 실행 환경에서 직접 실행됩니다. TypeScript는 컴파일 단계를 거치지 않습니다.',
      'TypeScript 코드는 JavaScript 코드와 별개로 동작하며, 컴파일 과정은 필요하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TypeScript 코드는 TypeScript 컴파일러를 사용하여 JavaScript 코드로 변환됩니다. 컴파일된 JavaScript 코드는 브라우저 또는 Node.js 환경에서 실행됩니다.',
  },
  {
    category: 'TypeScript/The Basics of Types',
    question:
      'TypeScript에서 타입 추론(Type Inference)은 무엇이며, 코드에서 어떻게 작동하나요?',
    options: [
      '타입 추론은 TypeScript 컴파일러가 변수 또는 표현식의 타입을 자동으로 추측하는 기능입니다. 변수를 선언할 때 타입을 명시적으로 지정하지 않아도 컴파일러가 타입을 추론합니다.',
      '타입 추론은 TypeScript에서 사용할 수 없는 개념으로, 항상 변수의 타입을 명시적으로 지정해야 합니다. 컴파일러는 타입을 추론하지 않습니다.',
      '타입 추론은 주로 JavaScript 코드와 호환성을 유지하기 위해 사용되며, TypeScript 코드에서는 일반적으로 사용되지 않습니다. 모든 변수는 명시적으로 타입을 지정해야 합니다.',
      '타입 추론은 오직 클래스와 인터페이스에서만 사용할 수 있으며, 변수의 타입 추론은 지원되지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '타입 추론은 TypeScript 컴파일러가 변수 또는 표현식의 타입을 자동으로 추측하는 기능입니다. 변수를 선언할 때 타입을 명시적으로 지정하지 않아도 컴파일러가 타입을 추론합니다.',
  },
  {
    category: 'TypeScript/The Basics of Types',
    question:
      'TypeScript에서 타입 단언(Type Assertion)은 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      "타입 단언은 개발자가 컴파일러에게 '이 변수는 이 타입이다'라고 명시적으로 알려주는 것입니다. 주로 개발자가 컴파일러의 타입 추론을 무시하고 자신이 타입을 정확히 알고 있는 경우에 사용됩니다.",
      '타입 단언은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 타입 지정을 대신하는 역할을 합니다.',
      '타입 단언은 주로 표현식의 결과를 강제로 특정 타입으로 변환하는 데 사용됩니다. 이것은 코드의 가독성을 향상시키는 데 도움을 줍니다.',
      '타입 단언은 변수의 초기값을 지정할 때 사용되며, 이렇게 하면 변수의 타입이 명시적으로 지정됩니다. 이는 코드의 가독성을 향상시킵니다.',
    ],
    correct_answer: 0,
    answer_description:
      "타입 단언은 개발자가 컴파일러에게 '이 변수는 이 타입이다'라고 명시적으로 알려주는 것입니다. 주로 개발자가 컴파일러의 타입 추론을 무시하고 자신이 타입을 정확히 알고 있는 경우에 사용됩니다.",
  },
  {
    category: 'TypeScript/The Basics of Types',
    question:
      'TypeScript에서 타입 가드(Type Guard)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '타입 가드는 특정 타입의 변수를 검사하여 해당 변수의 타입 범위를 좁히는 역할을 합니다. 주로 조건문 또는 사용자 정의 함수를 통해 구현됩니다.',
      '타입 가드는 변수의 타입을 명시적으로 지정하는 역할을 합니다. 주로 변수의 초기값을 설정할 때 사용되며, 코드 가독성을 향상시킵니다.',
      '타입 가드는 오직 클래스와 인터페이스에서만 사용할 수 있으며, 변수의 타입 범위를 제한하는 데는 사용되지 않습니다.',
      '타입 가드는 JavaScript 코드와 호환성을 유지하기 위해 사용되며, TypeScript 코드에서는 일반적으로 사용되지 않습니다. 모든 변수는 명시적으로 타입을 지정해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '타입 가드는 특정 타입의 변수를 검사하여 해당 변수의 타입 범위를 좁히는 역할을 합니다. 주로 조건문 또는 사용자 정의 함수를 통해 구현되며, 코드의 타입 안정성을 높이는 데 도움을 줍니다.',
  },
  {
    category: 'TypeScript/The Basics of Types',
    question:
      "TypeScript에서 'null'과 'undefined' 타입은 어떤 역할을 하며, 어떤 상황에서 사용되나요?",
    options: [
      "'null'과 'undefined' 타입은 변수에 값이 없음을 나타내는 타입으로, 주로 초기화되지 않은 변수 또는 비어 있는 변수를 표현하는 데 사용됩니다.",
      "'null'과 'undefined' 타입은 TypeScript에서 지원하지 않는 타입으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      "'null'과 'undefined' 타입은 함수의 매개변수나 반환 값으로 사용되며, 이러한 타입을 사용하면 함수의 동작을 더 명확하게 정의할 수 있습니다.",
      "'null'과 'undefined' 타입은 JavaScript와 완전히 호환되며, TypeScript에서는 사용하지 않는 것이 좋습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'null'과 'undefined' 타입은 변수에 값이 없음을 나타내는 타입으로, 주로 초기화되지 않은 변수 또는 비어 있는 변수를 표현하는 데 사용됩니다. 이러한 타입을 사용하여 코드의 안정성을 향상시킬 수 있습니다.",
  },
  {
    category: 'TypeScript/The Basics of Types',
    question:
      "TypeScript에서 'never' 타입은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?",
    options: [
      "'never' 타입은 함수의 반환 값으로 사용되며, 해당 함수가 절대로 종료되지 않음을 나타냅니다. 주로 무한 루프나 예외를 던지는 함수에서 사용됩니다.",
      "'never' 타입은 TypeScript에서 지원하지 않는 타입으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'void' 타입 대신 사용됩니다.",
      "'never' 타입은 객체와 배열에서 사용되며, 해당 객체나 배열에 어떤 값도 할당할 수 없음을 나타냅니다. 주로 빈 객체 또는 빈 배열을 표현하는 데 사용됩니다.",
      "'never' 타입은 TypeScript에서 지원하지 않는 개념으로, 사용하지 않는 것이 좋습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'never' 타입은 함수의 반환 값으로 사용되며, 해당 함수가 절대로 종료되지 않음을 나타냅니다. 주로 무한 루프나 예외를 던지는 함수에서 사용되며, 코드의 안정성을 높이는 데 도움을 줍니다.",
  },
  {
    category: 'TypeScript/The Basics of Types/advance',
    question:
      'TypeScript에서 유니언 타입(Union Type)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "유니언 타입은 여러 타입 중 하나일 수 있는 변수를 표현하는 방법으로, '|' 기호로 타입을 연결하여 사용합니다. 이를 통해 다양한 입력을 받는 함수나 변수를 정의할 수 있습니다.",
      "유니언 타입은 항상 'null' 또는 'undefined'와 결합되어 사용되며, 주로 옵셔널한 값으로 사용됩니다. 이를 통해 필수적이지 않은 매개변수를 처리할 수 있습니다.",
      "유니언 타입은 TypeScript에서 지원하지 않는 타입으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      "유니언 타입은 항상 모든 타입을 포함하므로 사용하지 않는 것이 좋습니다. 대신, 'never' 타입을 사용하여 유형 안정성을 유지하는 것이 좋습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "유니언 타입은 여러 타입 중 하나일 수 있는 변수를 표현하는 방법으로, '|' 기호로 타입을 연결하여 사용합니다. 이를 통해 다양한 입력을 받는 함수나 변수를 정의하거나, 조건부 동작을 구현할 수 있습니다.",
  },
  {
    category: 'TypeScript/The Basics of Types/advance',
    question:
      '유니언 타입과 함께 타입 가드(Type Guard)는 어떻게 사용되며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '타입 가드는 조건문을 사용하여 변수의 타입 범위를 좁히는 역할을 합니다. 유니언 타입과 함께 사용하면 특정 조건을 만족하는 경우 해당 변수의 타입을 좁힐 수 있습니다.',
      '타입 가드는 오직 클래스와 인터페이스에서만 사용할 수 있으며, 유니언 타입과는 관련이 없습니다.',
      "타입 가드는 주로 'any' 타입과 함께 사용되며, 유니언 타입에서는 사용하지 않는 것이 좋습니다. 대신, 'any' 타입을 사용하여 모든 값을 허용하는 것이 더 간단합니다.",
      '타입 가드는 주로 JavaScript 코드와 호환성을 유지하기 위해 사용되며, TypeScript 코드에서는 일반적으로 사용되지 않습니다. 모든 변수는 명시적으로 타입을 지정해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '타입 가드는 조건문을 사용하여 변수의 타입 범위를 좁히는 역할을 합니다. 유니언 타입과 함께 사용하면 특정 조건을 만족하는 경우 해당 변수의 타입을 좁힐 수 있으며, 코드의 타입 안정성을 높이는 데 도움을 줍니다.',
  },
  {
    category: 'TypeScript/The Basics of Types/advance',
    question:
      'TypeScript에서 타입 별칭(Type Alias)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "타입 별칭은 복잡한 타입을 간결하게 표현하기 위해 사용되는 기능으로, 'type' 키워드를 사용하여 타입을 정의합니다. 이를 통해 코드의 가독성을 향상시키고 중복을 줄일 수 있습니다.",
      '타입 별칭은 주로 함수의 반환 값으로 사용되며, 함수의 반환 타입을 명시적으로 정의할 때 유용합니다. 이를 통해 함수의 시그니처를 명확하게 표현할 수 있습니다.',
      '타입 별칭은 오직 객체와 배열에서만 사용할 수 있으며, 다른 타입에는 적용할 수 없습니다. 객체나 배열의 타입을 정의할 때 사용합니다.',
      "타입 별칭은 JavaScript 코드와 호환성을 유지하기 위해 사용되며, TypeScript 코드에서는 일반적으로 사용되지 않습니다. 모든 타입은 'type' 키워드를 사용하여 정의할 수 있습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "타입 별칭은 복잡한 타입을 간결하게 표현하기 위해 사용되는 기능으로, 'type' 키워드를 사용하여 타입을 정의합니다. 이를 통해 코드의 가독성을 향상시키고 중복을 줄일 수 있습니다.",
  },
  {
    category: 'TypeScript/The Basics of Types/advance',
    question:
      'TypeScript에서 인덱스 시그니처(Index Signature)는 무엇이며, 어떤 상황에서 사용되나요?',
    options: [
      '인덱스 시그니처는 객체의 프로퍼티 이름과 타입을 동적으로 정의하기 위한 메커니즘으로, 객체가 동적 프로퍼티를 가질 때 사용됩니다.',
      '인덱스 시그니처는 주로 함수의 매개변수 타입을 정의할 때 사용되며, 함수의 매개변수를 동적으로 받아들일 수 있게 합니다. 이를 통해 다양한 입력을 처리할 수 있습니다.',
      "인덱스 시그니처는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '인덱스 시그니처는 오직 클래스와 인터페이스에서만 사용할 수 있으며, 객체의 프로퍼티와는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '인덱스 시그니처는 객체의 프로퍼티 이름과 타입을 동적으로 정의하기 위한 메커니즘으로, 객체가 동적 프로퍼티를 가질 때 사용됩니다. 이를 통해 객체의 동적 프로퍼티를 정의하고 접근할 수 있습니다.',
  },
  {
    category: 'TypeScript/The Basics of Types/advance',
    question:
      'TypeScript에서 널 병합 연산자(Nullish Coalescing Operator)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "널 병합 연산자는 변수가 'null' 또는 'undefined'일 때 기본값을 제공하는 연산자로, '??' 기호로 표시됩니다. 이를 통해 변수가 존재하지 않는 경우 기본값을 사용할 수 있습니다.",
      "널 병합 연산자는 변수의 타입을 강제로 변환하는 연산자로, '??' 기호로 표시됩니다. 이를 통해 변수의 타입을 강제로 지정할 수 있습니다.",
      '널 병합 연산자는 오직 숫자 연산에만 사용할 수 있으며, 다른 데이터 타입에는 적용할 수 없습니다. 주로 숫자 연산에서 널 값을 처리할 때 사용됩니다.',
      "널 병합 연산자는 JavaScript와 완전히 호환되며, TypeScript에서는 사용하지 않는 것이 좋습니다. 대신, '||' 연산자를 사용하여 기본값을 처리하는 것이 더 간단합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "널 병합 연산자는 변수가 'null' 또는 'undefined'일 때 기본값을 제공하는 연산자로, '??' 기호로 표시됩니다. 이를 통해 변수가 존재하지 않는 경우 기본값을 사용할 수 있으며, 코드의 가독성을 향상시키는 데 도움을 줍니다.",
  },
  {
    category: 'TypeScript/Functions and Parameter Typing',
    question:
      'TypeScript에서 선택적 매개변수(Optional Parameters)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '선택적 매개변수는 함수의 매개변수 중에서 일부를 생략할 수 있는 매개변수를 나타냅니다. 이를 통해 함수 호출 시 일부 매개변수를 제공하지 않아도 됩니다.',
      "선택적 매개변수는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입을 대신 사용합니다.",
      '선택적 매개변수는 반드시 기본값을 가져야 하며, 생략하면 기본값이 사용됩니다. 이를 통해 함수 호출 시 일부 매개변수를 제공하지 않더라도 안전하게 동작합니다.',
      '선택적 매개변수는 오직 클래스와 인터페이스에서만 사용할 수 있으며, 함수의 매개변수에는 적용할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '선택적 매개변수는 함수의 매개변수 중에서 일부를 생략할 수 있는 매개변수를 나타냅니다. 이를 통해 함수 호출 시 일부 매개변수를 제공하지 않아도 되며, 기본값을 설정하여 유연하게 사용할 수 있습니다.',
  },
  {
    category: 'TypeScript/Functions and Parameter Typing',
    question:
      'TypeScript에서 디폴트 매개변수 값(Default Parameter Values)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '디폴트 매개변수 값은 함수의 매개변수에 기본값을 설정하는 기능으로, 매개변수를 생략할 경우 기본값이 자동으로 사용됩니다. 이를 통해 매개변수를 제공하지 않아도 함수를 호출할 수 있습니다.',
      "디폴트 매개변수 값은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입을 대신 사용합니다.",
      '디폴트 매개변수 값은 반드시 기본값을 가져야 하며, 생략하면 기본값이 사용됩니다. 이를 통해 함수 호출 시 일부 매개변수를 제공하지 않더라도 안전하게 동작합니다.',
      '디폴트 매개변수 값은 오직 클래스와 인터페이스에서만 사용할 수 있으며, 함수의 매개변수에는 적용할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '디폴트 매개변수 값은 함수의 매개변수에 기본값을 설정하는 기능으로, 매개변수를 생략할 경우 기본값이 자동으로 사용됩니다. 이를 통해 함수 호출 시 일부 매개변수를 제공하지 않아도 함수를 호출할 수 있습니다.',
  },
  {
    category: 'TypeScript/Functions and Parameter Typing',
    question:
      'TypeScript에서 레스트 매개변수(Rest Parameters)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '레스트 매개변수는 함수의 매개변수 중에서 나머지 매개변수를 배열로 받아들이는 매개변수입니다. 이를 통해 가변 길이 인수 목록을 처리할 수 있습니다.',
      "레스트 매개변수는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입을 대신 사용합니다.",
      '레스트 매개변수는 오직 배열에만 적용할 수 있으며, 객체나 다른 데이터 타입에는 사용할 수 없습니다. 주로 배열의 요소를 합치거나 변환할 때 사용됩니다.',
      '레스트 매개변수는 함수의 매개변수 중에서 하나만 사용할 수 있으며, 여러 개의 레스트 매개변수를 동시에 사용할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '레스트 매개변수는 함수의 매개변수 중에서 나머지 매개변수를 배열로 받아들이는 매개변수입니다. 이를 통해 가변 길이 인수 목록을 처리하거나, 여러 개의 인수를 배열로 다룰 때 유용합니다.',
  },
  {
    category: 'TypeScript/Functions and Parameter Typing',
    question:
      'TypeScript에서 콜백 함수 타이핑(Callback Function Typing)은 무엇이며, 어떻게 사용되나요?',
    options: [
      '콜백 함수 타이핑은 함수의 매개변수로 콜백 함수를 받아들일 때 해당 콜백 함수의 타입을 정의하는 방법입니다. 이를 통해 콜백 함수의 형태와 반환 타입을 명확히 지정할 수 있습니다.',
      '콜백 함수 타이핑은 오직 프로미스(Promise) 객체와 함께 사용할 수 있으며, 다른 경우에는 적용할 수 없습니다. 프로미스 객체의 콜백 함수를 정의할 때 유용합니다.',
      "콜백 함수 타이핑은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '콜백 함수 타이핑은 오직 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드의 콜백 함수를 정의할 때 유용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '콜백 함수 타이핑은 함수의 매개변수로 콜백 함수를 받아들일 때 해당 콜백 함수의 타입을 정의하는 방법으로, 이를 통해 콜백 함수의 형태와 반환 타입을 명확히 지정할 수 있습니다. 이는 비동기 작업을 다룰 때 코드의 안정성을 높이는 데 도움을 줍니다.',
  },
  {
    category: 'TypeScript/Functions and Parameter Typing',
    question:
      'TypeScript에서 함수 오버로딩(Function Overloading)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '함수 오버로딩은 동일한 함수 이름을 가지면서 다양한 매개변수 타입 또는 개수를 처리할 수 있는 기능으로, 함수의 다양한 사용 방법을 명시적으로 정의할 때 사용됩니다.',
      '함수 오버로딩은 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드의 다양한 사용 방법을 명시적으로 정의할 때 유용합니다.',
      "함수 오버로딩은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '함수 오버로딩은 JavaScript와 완전히 호환되며, TypeScript에서는 사용하지 않는 것이 좋습니다. 대신, 다른 함수 이름을 사용하여 다양한 동작을 구현하세요.',
    ],
    correct_answer: 0,
    answer_description:
      '함수 오버로딩은 동일한 함수 이름을 가지면서 다양한 매개변수 타입 또는 개수를 처리할 수 있는 기능으로, 함수의 다양한 사용 방법을 명시적으로 정의할 때 사용됩니다. 이를 통해 함수의 다양한 사용 시나리오를 처리하고 가독성을 향상시킬 수 있습니다.',
  },
  {
    category: 'TypeScript/Interfaces and Classes',
    question:
      'TypeScript에서 추상 클래스(Abstract Class)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "추상 클래스는 일부 메서드를 구현하고 나머지 메서드는 파생 클래스에서 구현하도록 강제하는 클래스로, 'abstract' 키워드를 사용하여 정의됩니다. 이를 통해 클래스 계층 구조를 정의하고 공통 동작을 공유할 수 있습니다.",
      "추상 클래스는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '추상 클래스는 오직 인터페이스와 함께 사용할 수 있으며, 클래스와는 관련이 없습니다. 인터페이스의 메서드를 추상 클래스에서 구현할 때 유용합니다.',
      '추상 클래스는 클래스의 인스턴스를 생성할 때 사용되며, 인터페이스는 클래스와는 관련이 없는 타입을 정의할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "추상 클래스는 일부 메서드를 구현하고 나머지 메서드는 파생 클래스에서 구현하도록 강제하는 클래스로, 'abstract' 키워드를 사용하여 정의됩니다. 이를 통해 클래스 계층 구조를 정의하고 공통 동작을 공유하거나, 메서드의 구현을 강제할 수 있습니다.",
  },
  {
    category: 'TypeScript/Interfaces and Classes',
    question:
      'TypeScript에서 인터페이스 상속(Interface Inheritance)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "인터페이스 상속은 한 인터페이스가 다른 인터페이스의 멤버를 상속받는 것을 의미하며, 'extends' 키워드를 사용하여 정의됩니다. 이를 통해 인터페이스 간의 관계를 정의하고 코드 재사용을 촉진할 수 있습니다.",
      '인터페이스 상속은 클래스와 관련이 없으며, 오직 인터페이스 간에만 사용됩니다. 클래스와 인터페이스 간의 상속은 TypeScript에서 지원하지 않는 기능입니다.',
      '인터페이스 상속은 TypeScript 코드와 JavaScript 코드 간의 호환성을 유지하기 위해 사용되며, 실제 개발에서는 거의 사용되지 않습니다.',
      '인터페이스 상속은 오직 클래스에서만 사용할 수 있으며, 인터페이스 간의 상속은 TypeScript에서는 지원되지 않습니다. 클래스 간의 상속은 사용할 때 유용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      "인터페이스 상속은 한 인터페이스가 다른 인터페이스의 멤버를 상속받는 것을 의미하며, 'extends' 키워드를 사용하여 정의됩니다. 이를 통해 인터페이스 간의 관계를 정의하고, 코드 재사용과 확장성을 촉진할 수 있습니다.",
  },
  {
    category: 'TypeScript/Interfaces and Classes',
    question:
      'TypeScript에서 클래스 인터페이스(Class Interface)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '클래스 인터페이스는 클래스의 구조를 정의하고 해당 구조를 따르는 클래스를 선언하는 인터페이스입니다. 이를 통해 클래스의 메서드와 프로퍼티를 명시적으로 정의하고, 클래스 간의 관계를 강화할 수 있습니다.',
      '클래스 인터페이스는 오직 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스의 메서드를 명시적으로 정의할 때 유용합니다.',
      "클래스 인터페이스는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '클래스 인터페이스는 클래스와 관련이 없으며, 오직 인터페이스와 클래스 간의 상속만 가능합니다. 클래스의 메서드와 프로퍼티를 정의하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클래스 인터페이스는 클래스의 구조를 정의하고 해당 구조를 따르는 클래스를 선언하는 인터페이스입니다. 이를 통해 클래스의 메서드와 프로퍼티를 명시적으로 정의하고, 클래스 간의 관계를 강화할 수 있습니다. 클래스와 인터페이스 간의 관계를 강조하는 데 사용됩니다.',
  },
  {
    category: 'TypeScript/Interfaces and Classes',
    question:
      'TypeScript에서 인터페이스 확장(Interface Extension)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "인터페이스 확장은 이미 정의된 인터페이스에 새로운 멤버를 추가하거나 기존 멤버를 확장하는 방법으로, 'extends' 키워드를 사용하여 다른 인터페이스를 기반으로 새로운 인터페이스를 정의할 때 사용됩니다.",
      '인터페이스 확장은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스의 인터페이스를 확장하여 새로운 멤버를 추가할 때 유용합니다.',
      "인터페이스 확장은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '인터페이스 확장은 인터페이스 간의 관계를 정의할 때 사용되며, 클래스와는 관련이 없습니다. 다른 인터페이스를 기반으로 새로운 인터페이스를 정의하는 데 유용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      "인터페이스 확장은 이미 정의된 인터페이스에 새로운 멤버를 추가하거나 기존 멤버를 확장하는 방법으로, 'extends' 키워드를 사용하여 다른 인터페이스를 기반으로 새로운 인터페이스를 정의할 때 사용됩니다. 이를 통해 인터페이스 간의 관계를 강화하고, 코드 재사용을 촉진할 수 있습니다.",
  },
  {
    category: 'TypeScript/Interfaces and Classes',
    question:
      'TypeScript에서 클래스 데코레이터(Class Decorator)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "클래스 데코레이터는 클래스 선언을 수정하거나 클래스 생성자를 바꿀 수 있는 함수로, 클래스 선언 바로 위에 '@' 기호를 사용하여 적용됩니다. 이를 통해 클래스의 동작을 수정하거나 확장할 수 있습니다.",
      "클래스 데코레이터는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '클래스 데코레이터는 오직 클래스 메서드에서만 사용할 수 있으며, 클래스 선언에는 적용할 수 없습니다. 클래스의 메서드를 수정하거나 확장할 때 유용합니다.',
      '클래스 데코레이터는 오직 인터페이스와 함께 사용할 수 있으며, 클래스와는 관련이 없습니다. 인터페이스의 메서드에 데코레이터를 적용하여 동작을 수정할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "클래스 데코레이터는 클래스 선언을 수정하거나 클래스 생성자를 바꿀 수 있는 함수로, 클래스 선언 바로 위에 '@' 기호를 사용하여 적용됩니다. 이를 통해 클래스의 동작을 수정하거나 확장할 수 있으며, 주로 라이브러리나 프레임워크에서 사용되어 클래스에 기능을 추가하는 데 유용합니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 클래스(Generic Class)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "제네릭 클래스는 클래스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 클래스로, 'class' 키워드 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 클래스를 여러 데이터 타입에 대해 재사용할 수 있습니다.",
      "제네릭 클래스는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 클래스는 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수의 입력 데이터 타입을 동적으로 처리할 때 유용합니다.',
      '제네릭 클래스는 클래스와 관련이 없으며, 오직 인터페이스와 함께 사용할 수 있습니다. 인터페이스의 멤버 타입을 동적으로 지정할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 클래스는 클래스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 클래스로, 'class' 키워드 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 클래스를 여러 데이터 타입에 대해 재사용하고, 타입 안정성을 유지할 수 있습니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 함수(Generic Function)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "제네릭 함수는 함수 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 함수로, 함수 이름 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 함수를 여러 데이터 타입에 대해 재사용할 수 있습니다.",
      "제네릭 함수는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 함수는 오직 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드의 입력 데이터 타입을 동적으로 처리할 때 유용합니다.',
      '제네릭 함수는 함수와 관련이 없으며, 오직 인터페이스와 함께 사용할 수 있습니다. 인터페이스의 멤버 타입을 동적으로 지정할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 함수는 함수 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 함수로, 함수 이름 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 함수를 여러 데이터 타입에 대해 재사용하고, 타입 안정성을 유지할 수 있습니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 인터페이스(Generic Interface)는 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "제네릭 인터페이스는 인터페이스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 인터페이스로, 'interface' 키워드 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 인터페이스를 여러 데이터 타입에 대해 재사용할 수 있습니다.",
      "제네릭 인터페이스는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 인터페이스는 오직 클래스에서만 사용할 수 있으며, 인터페이스에서는 적용할 수 없습니다. 클래스의 멤버 타입을 동적으로 처리할 때 유용합니다.',
      '제네릭 인터페이스는 인터페이스와 관련이 없으며, 오직 함수와 함께 사용할 수 있습니다. 함수의 입력 데이터 타입을 동적으로 처리할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 인터페이스는 인터페이스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 인터페이스로, 'interface' 키워드 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 인터페이스를 여러 데이터 타입에 대해 재사용하고, 코드의 재사용성과 유지보수성을 향상시킬 수 있습니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 타입 제한(Generic Type Constraint)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "제네릭 타입 제한은 제네릭 타입 매개변수에 특정 타입 또는 속성을 제한하는 방법으로, 'extends' 키워드를 사용하여 타입 제한을 정의합니다. 이를 통해 특정 타입을 준수하는 값만 사용할 수 있습니다.",
      "제네릭 타입 제한은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 타입 제한은 오직 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드의 입력 데이터 타입을 제한할 때 유용합니다.',
      '제네릭 타입 제한은 함수와 관련이 없으며, 오직 클래스와 인터페이스에서만 사용할 수 있습니다. 클래스나 인터페이스의 타입을 제한하거나 확장할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 타입 제한은 제네릭 타입 매개변수에 특정 타입 또는 속성을 제한하는 방법으로, 'extends' 키워드를 사용하여 타입 제한을 정의합니다. 이를 통해 특정 타입을 준수하는 값만 사용할 수 있으며, 타입 안정성을 유지할 때 유용합니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 유틸리티 타입(Generic Utility Types)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "제네릭 유틸리티 타입은 기본 타입을 조작하고 변환하기 위한 내장 타입 중 하나로, 'Partial', 'Pick', 'Record' 등이 있습니다. 이를 통해 타입을 변환하거나 재사용할 수 있습니다.",
      "제네릭 유틸리티 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 유틸리티 타입은 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수에서 타입을 조작하거나 변환할 때 유용합니다.',
      '제네릭 유틸리티 타입은 함수와 관련이 없으며, 오직 클래스와 인터페이스에서만 사용할 수 있습니다. 클래스나 인터페이스의 타입을 조작하거나 확장할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 유틸리티 타입은 기본 타입을 조작하고 변환하기 위한 내장 타입 중 하나로, 'Partial', 'Pick', 'Record' 등이 있습니다. 이를 통해 타입을 변환하거나 재사용하며, 코드의 재사용성과 가독성을 향상시키는 데 도움을 줍니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 함수 시그니처(Generic Function Signature)는 무엇이며, 어떻게 사용되나요?',
    options: [
      "제네릭 함수 시그니처는 함수의 매개변수와 반환 타입에 제네릭 타입 매개변수를 적용하는 방법으로, 함수 이름 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 함수를 여러 데이터 타입에 대해 사용할 수 있습니다.",
      "제네릭 함수 시그니처는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 함수 시그니처는 오직 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드의 입력 데이터 타입을 동적으로 처리할 때 유용합니다.',
      '제네릭 함수 시그니처는 함수와 관련이 없으며, 오직 인터페이스와 함께 사용할 수 있습니다. 인터페이스의 메서드를 정의할 때 타입을 동적으로 처리할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "제네릭 함수 시그니처는 함수의 매개변수와 반환 타입에 제네릭 타입 매개변수를 적용하는 방법으로, 함수 이름 뒤에 '<T>'와 같이 타입 매개변수를 정의합니다. 이를 통해 함수를 여러 데이터 타입에 대해 사용하고, 타입 안정성을 유지할 수 있습니다.",
  },
  {
    category: 'TypeScript/Generics',
    question:
      'TypeScript에서 제네릭 클래스와 상속을 어떻게 함께 사용할 수 있으며, 어떤 이점이 있나요?',
    options: [
      '제네릭 클래스는 클래스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 클래스로, 상속 시에도 타입 매개변수를 그대로 사용하여 하위 클래스에서 다양한 타입을 다룰 수 있습니다. 이를 통해 코드의 재사용성과 타입 안정성을 향상시킬 수 있습니다.',
      "제네릭 클래스와 상속은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭 클래스와 상속은 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수의 입력 데이터 타입을 동적으로 처리하고 하위 클래스에서 상속된 타입을 재사용할 때 유용합니다.',
      '제네릭 클래스와 상속은 오직 인터페이스와 함께 사용할 수 있으며, 클래스와는 관련이 없습니다. 인터페이스의 타입을 동적으로 처리하고 확장할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '제네릭 클래스는 클래스 내부에서 사용하는 데이터 타입을 외부에서 지정할 수 있는 클래스로, 상속 시에도 타입 매개변수를 그대로 사용하여 하위 클래스에서 다양한 타입을 다룰 수 있습니다. 이를 통해 코드의 재사용성을 높이고 타입 안정성을 유지할 수 있습니다.',
  },
  {
    category: 'TypeScript/Generics',
    question:
      '키오스크 제어 시스템을 개발할 때 TypeScript 제네릭을 어떻게 활용할 수 있으며, 어떤 이점이 있나요?',
    options: [
      '키오스크 제어 시스템에서는 다양한 하드웨어 및 데이터 소스와 상호 작용해야 합니다. TypeScript 제네릭을 활용하여 하드웨어 및 데이터 소스별로 타입을 동적으로 처리하고 관리할 수 있으며, 코드의 재사용성을 높이고 유지보수성을 향상시킬 수 있습니다.',
      '키오스크 제어 시스템에서는 TypeScript가 지원되지 않으며, 다른 언어를 사용해야 합니다. TypeScript는 웹 애플리케이션 개발에만 적합하며, 하드웨어 제어에는 사용할 수 없습니다.',
      '키오스크 제어 시스템에서 TypeScript를 사용하더라도 제네릭을 활용하는 이점은 없습니다. TypeScript는 정적 타입 검사를 위한 도구일 뿐입니다.',
      '키오스크 제어 시스템에서는 TypeScript가 필수적이지 않으며, JavaScript로 충분합니다. TypeScript는 복잡한 시스템 개발에는 부적합합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '키오스크 제어 시스템에서는 다양한 하드웨어 및 데이터 소스와 상호 작용해야 하므로 TypeScript 제네릭을 활용하여 다양한 타입을 동적으로 처리하고 관리할 수 있습니다. 이를 통해 코드의 재사용성을 높이고 유지보수성을 향상시킬 수 있습니다.',
  },
  {
    category: 'TypeScript/Generics',
    question:
      '비동기 프로그래밍에서 TypeScript 제네릭을 어떻게 활용할 수 있으며, 어떤 이점이 있나요?',
    options: [
      '비동기 프로그래밍에서 TypeScript 제네릭을 사용하여 Promise와 같은 비동기 작업의 결과 타입을 동적으로 처리하고, 타입 안정성을 유지할 수 있습니다. 이를 통해 비동기 코드를 보다 안정적으로 작성할 수 있습니다.',
      "비동기 프로그래밍에서 TypeScript 제네릭은 사용하지 않으며, Promise와 같은 비동기 작업의 결과 타입은 항상 'any'로 처리합니다.",
      "비동기 프로그래밍에서 TypeScript 제네릭을 사용할 경우 성능 문제가 발생할 수 있으며, Promise와 같은 비동기 작업은 'any' 타입으로 처리하는 것이 더 효율적입니다.",
      '비동기 프로그래밍에서는 TypeScript가 필수적이지 않으며, JavaScript로 충분합니다. TypeScript는 복잡한 비동기 코드 작성에는 부적합합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '비동기 프로그래밍에서 TypeScript 제네릭을 사용하여 Promise와 같은 비동기 작업의 결과 타입을 동적으로 처리하고, 타입 안정성을 유지할 수 있습니다. 이를 통해 비동기 코드를 보다 안정적으로 작성하고 유지보수하기 쉽게 만들 수 있습니다.',
  },
  {
    category: 'TypeScript/Generics',
    question:
      '제네릭을 활용하여 데이터 컬렉션을 구현할 때 어떤 장점이 있으며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      '제네릭을 활용한 데이터 컬렉션은 다양한 데이터 타입을 저장하고 다룰 수 있으며, 타입 안정성을 유지할 수 있습니다. 이를 통해 데이터 컬렉션을 사용하는 코드에서 타입 에러를 사전에 방지할 수 있습니다.',
      "제네릭을 활용한 데이터 컬렉션은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '제네릭을 활용한 데이터 컬렉션은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 내부에서 데이터를 저장하고 다룰 때 유용합니다.',
      '제네릭을 활용한 데이터 컬렉션은 데이터 처리에 아무런 도움이 되지 않으며, JavaScript의 기본 배열과 객체로 충분합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '제네릭을 활용한 데이터 컬렉션은 다양한 데이터 타입을 저장하고 다룰 수 있으며, 타입 안정성을 유지할 수 있습니다. 이를 통해 데이터 컬렉션을 사용하는 코드에서 타입 에러를 사전에 방지하고 안정적인 코드를 작성할 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 조건부 타입(Conditional Types)은 무엇이며, 어떤 상황에서 유용하게 쓰이나요?',
    options: [
      "조건부 타입은 입력 타입에 따라 다른 타입을 반환하는 타입입니다. 'T extends U ? X : Y'와 같은 형태로 사용되며, 타입 매개변수 'T'가 타입 'U'를 확장하는 경우 'X' 타입을, 그렇지 않은 경우 'Y' 타입을 반환합니다. 이를 통해 유연한 타입 변환을 할 수 있습니다.",
      "조건부 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '조건부 타입은 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수의 반환 타입을 동적으로 처리할 때 유용합니다.',
      '조건부 타입은 조건문과 관련이 없으며, 오직 인터페이스와 함께 사용할 수 있습니다. 인터페이스의 멤버 타입을 동적으로 처리할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '조건부 타입은 입력 타입에 따라 다른 타입을 반환하는 타입으로, 입력 타입이 지정한 타입을 확장하는 경우와 그렇지 않은 경우에 따라 다른 타입을 사용할 수 있습니다. 이를 통해 유연한 타입 변환과 제네릭 타입 처리를 할 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 맵드 타입(Mapped Types)은 무엇이며, 어떻게 사용되나요?',
    options: [
      "맵드 타입은 기존 타입의 각 속성을 변환하여 새로운 타입을 생성하는 타입입니다. 'key in Type' 형태로 사용되며, 각 속성의 타입을 변경하거나 선택적 속성으로 만들거나 읽기 전용으로 변경할 수 있습니다.",
      "맵드 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '맵드 타입은 오직 클래스 내부에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스의 멤버 타입을 동적으로 처리할 때 유용합니다.',
      '맵드 타입은 맵 데이터 구조와 관련이 없으며, 오직 배열과 객체의 타입을 조작할 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '맵드 타입은 기존 타입의 각 속성을 변환하여 새로운 타입을 생성하는 타입으로, 각 속성의 타입을 변경하거나 선택적 속성으로 만들거나 읽기 전용으로 변경할 수 있습니다. 이를 통해 기존 타입을 변형하거나 확장할 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 문자열 리터럴 타입(String Literal Types)과 유니온 타입(Union Types)은 무엇이며, 어떻게 사용되나요?',
    options: [
      "문자열 리터럴 타입은 문자열 값 중 하나를 나타내는 타입으로, 'type' 키워드와 함께 사용되며 고정된 문자열 값을 갖습니다. 유니온 타입은 여러 타입 중 하나를 나타내는 타입으로, 'A | B'와 같이 사용되며 여러 타입을 합칠 때 유용합니다.",
      "문자열 리터럴 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '문자열 리터럴 타입과 유니온 타입은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스의 멤버나 속성 타입을 제한하거나 다양한 값으로 초기화할 때 유용합니다.',
      '문자열 리터럴 타입과 유니온 타입은 숫자와 관련이 없으며, 문자열 값의 처리에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '문자열 리터럴 타입은 문자열 값 중 하나를 나타내는 타입으로, 유니온 타입은 여러 타입 중 하나를 나타내는 타입으로 사용됩니다. 문자열 리터럴 타입은 정적 타입 검사를 향상시키고 코드 가독성을 높이는 데 유용하며, 유니온 타입은 여러 타입을 다룰 때 유용합니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 인덱스 타입(Index Types)과 문자열 인덱스 시그니처(String Index Signature)은 무엇이며, 어떻게 사용되나요?',
    options: [
      "인덱스 타입은 객체의 속성 이름을 사용하여 해당 속성의 타입을 동적으로 지정하는 기능입니다. 문자열 인덱스 시그니처는 'key: string' 형태로 사용되며, 객체에서 문자열로 인덱싱할 때 사용됩니다.",
      "인덱스 타입과 문자열 인덱스 시그니처은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '인덱스 타입과 문자열 인덱스 시그니처은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 내부에서 동적 속성을 처리하거나 다룰 때 유용합니다.',
      '인덱스 타입과 문자열 인덱스 시그니처은 오직 배열과 관련이 있으며, 배열의 인덱스를 다룰 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '인덱스 타입은 객체의 속성 이름을 사용하여 해당 속성의 타입을 동적으로 지정하는 기능이며, 문자열 인덱스 시그니처는 객체에서 문자열로 인덱싱할 때 사용됩니다. 이를 통해 객체의 동적 속성을 다룰 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 레스트 파라미터(Rest Parameters)와 스프레드 연산자(Spread Operator)는 무엇이며, 어떻게 활용되나요?',
    options: [
      "레스트 파라미터는 함수의 매개변수 앞에 '...'을 붙여 여러 개의 인자를 배열로 받는 방법입니다. 스프레드 연산자는 배열이나 객체를 풀어서 개별 요소로 분리하는 방법입니다. 이를 통해 가변 인자를 다루거나 배열/객체를 복제할 때 유용합니다.",
      "레스트 파라미터와 스프레드 연산자는 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'arguments' 객체를 사용합니다.",
      '레스트 파라미터와 스프레드 연산자는 클래스 메서드에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 메서드에서 가변 인자를 다룰 때 유용합니다.',
      '레스트 파라미터와 스프레드 연산자는 배열과 관련이 없으며, 오직 객체의 속성을 다룰 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "레스트 파라미터는 함수의 매개변수 앞에 '...'을 붙여 여러 개의 인자를 배열로 받는 방법이며, 스프레드 연산자는 배열이나 객체를 풀어서 개별 요소로 분리하는 방법입니다. 이를 통해 가변 인자를 다루거나 배열/객체를 복제하고 확장할 때 유용합니다. 레스트 파라미터는 함수가 불특정 다수의 인자를 배열로 받아 처리할 수 있게 해주며, 스프레드 연산자는 배열이나 객체의 요소를 개별적으로 펼쳐 새로운 배열이나 객체를 생성하거나 기존 배열/객체에 병합할 때 사용됩니다. 이러한 기능은 코드의 가독성과 유연성을 향상시키며, 다양한 상황에서 유용하게 활용됩니다.",
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 템플릿 리터럴 타입(Template Literal Types)은 무엇이며, 어떻게 사용되나요?',
    options: [
      '템플릿 리터럴 타입은 문자열 리터럴 타입을 확장한 것으로, 템플릿 문자열에서 사용되는 문자열 값의 구조를 정의하는 타입입니다. 템플릿 문자열과 함께 사용하여 문자열 패턴을 체크하고 유용한 타입을 생성할 수 있습니다.',
      "템플릿 리터럴 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '템플릿 리터럴 타입은 오직 클래스 내부에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 내부에서 문자열 패턴을 다룰 때 유용합니다.',
      '템플릿 리터럴 타입은 문자열과 관련이 없으며, 오직 숫자 값의 처리에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '템플릿 리터럴 타입은 문자열 리터럴 타입을 확장한 것으로, 템플릿 문자열에서 사용되는 문자열 값의 구조를 정의하는 타입입니다. 이를 통해 문자열 패턴을 체크하고 유용한 타입을 생성할 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 재귀 타입(Recursive Types)은 무엇이며, 어떻게 사용되나요?',
    options: [
      '재귀 타입은 타입 정의 내에서 자기 자신을 참조하는 타입입니다. 이를 활용하여 복잡한 데이터 구조를 정의하고 다룰 수 있으며, 특히 트리 구조나 중첩된 객체를 다룰 때 유용합니다.',
      "재귀 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '재귀 타입은 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수 내부에서 데이터 구조를 동적으로 처리할 때 유용합니다.',
      '재귀 타입은 숫자와 관련이 없으며, 오직 문자열 값의 처리에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '재귀 타입은 타입 정의 내에서 자기 자신을 참조하는 타입으로, 복잡한 데이터 구조를 정의하고 다룰 때 유용합니다. 트리 구조나 중첩된 객체와 같은 데이터를 다룰 때 재귀 타입을 활용할 수 있습니다.',
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 좌측 연산자(Infer)와 조건부 추론(Conditional Inference)은 무엇이며, 어떻게 사용되나요?',
    options: [
      "좌측 연산자(Infer)는 함수의 반환 타입에서 타입 매개변수를 추론하는 데 사용되며, 반환 타입 내부에서 'infer' 키워드를 활용합니다. 조건부 추론(Conditional Inference)은 조건부 타입과 함께 사용되며, 'T extends (...args: any[]) => infer R' 형태로 사용됩니다.",
      "좌측 연산자와 조건부 추론은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '좌측 연산자와 조건부 추론은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 내부에서 반환 타입을 추론하거나 다룰 때 유용합니다.',
      '좌측 연산자와 조건부 추론은 문자열과 관련이 없으며, 오직 함수와 관련된 타입 추론에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "좌측 연산자(Infer)와 조건부 추론(Conditional Inference)은 함수의 반환 타입에서 타입 매개변수를 추론하는 데 사용됩니다. 반환 타입 내부에서 'infer' 키워드를 활용하며, 조건부 타입과 함께 사용하여 타입 추론을 정교하게 처리할 수 있습니다.",
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 전개된 조건부 타입(Spread Conditional Types)은 무엇이며, 어떻게 활용되나요?',
    options: [
      "전개된 조건부 타입은 조건부 타입과 함께 사용되며, 'T extends U ? X : Y' 형태로 사용됩니다. 이때 'X'와 'Y'의 조건부 타입을 전개하여 새로운 조건부 타입을 생성하며, 다양한 유형의 조건부 타입을 합칠 때 유용합니다.",
      "전개된 조건부 타입은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '전개된 조건부 타입은 오직 함수에서만 사용할 수 있으며, 클래스에서는 적용할 수 없습니다. 함수 내부에서 다양한 조건부 타입을 처리하거나 합칠 때 유용합니다.',
      '전개된 조건부 타입은 숫자와 관련이 없으며, 오직 객체의 속성을 다룰 때 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "전개된 조건부 타입은 조건부 타입과 함께 사용되며, 다양한 유형의 조건부 타입을 합칠 때 유용합니다. 'T extends U ? X : Y' 형태로 사용되며, 'X'와 'Y'의 조건부 타입을 전개하여 새로운 조건부 타입을 생성합니다.",
  },
  {
    category: 'TypeScript/Advanced Types',
    question:
      'TypeScript에서 타입 별칭(Type Aliases)과 선언 병합(Declaration Merging)은 무엇이며, 어떻게 사용되나요?',
    options: [
      "타입 별칭은 기존 타입에 대한 별칭을 생성하고, 'type' 키워드로 정의됩니다. 선언 병합은 같은 이름의 여러 선언을 병합하여 하나의 타입으로 합치는 기능으로, 주로 인터페이스와 함께 사용됩니다.",
      "타입 별칭과 선언 병합은 TypeScript에서 지원하지 않는 기능으로, 사용하려면 추가적인 라이브러리가 필요합니다. 주로 'any' 타입 대신 사용됩니다.",
      '타입 별칭과 선언 병합은 오직 클래스에서만 사용할 수 있으며, 함수에서는 적용할 수 없습니다. 클래스 내부에서 타입을 정의하거나 다룰 때 유용합니다.',
      '타입 별칭과 선언 병합은 숫자와 관련이 없으며, 오직 문자열 값의 처리에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "타입 별칭은 기존 타입에 대한 별칭을 생성하고, 'type' 키워드로 정의되며, 복잡한 타입을 간결하게 표현할 때 사용됩니다. 선언 병합은 같은 이름을 가진 두 개 이상의 인터페이스나 네임스페이스 선언을 단일 구조로 합치는 TypeScript의 고급 기능입니다. 이 기능을 활용하면 여러 선언을 한 곳에서 관리할 수 있어 코드의 유지보수성이 향상됩니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '가상 DOM(Virtual DOM)'은 무엇이며 어떤 역할을 하나요?",
    options: [
      '가상 DOM은 가상 현실 세계를 나타내는 것으로 React 앱의 3D 시뮬레이션을 위해 사용됩니다.',
      '가상 DOM은 React 앱에서 실제 DOM과 동일한 역할을 하며 렌더링을 담당합니다.',
      '가상 DOM은 React에서 변경 사항을 비교하고 효율적으로 업데이트하는 데 사용되며, 실제 DOM 조작을 최소화합니다.',
      '가상 DOM은 React 앱의 스타일을 관리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      "React에서 '가상 DOM(Virtual DOM)'은 실제 DOM 조작을 최소화하고 성능을 향상시키는 데 사용됩니다. 가상 DOM은 React 업데이트 시에 이전과 현재의 가상 DOM 트리를 비교하고 변경된 부분만을 실제 DOM에 반영함으로써 렌더링 효율을 높이고 빠른 업데이트를 가능하게 합니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '컴포넌트 라이프사이클(Component Lifecycle)'의 주요 단계는 어떤 것들이 있나요?",
    options: [
      '사용자 입력, 렌더링, 데이터 요청, 완료',
      '마운트, 갱신, 언마운트',
      '시작, 진행, 완료',
      '로딩, 실행, 종료',
    ],
    correct_answer: 1,
    answer_description:
      "React의 '컴포넌트 라이프사이클(Component Lifecycle)'은 세 가지 주요 단계인 '마운트(Mount)', '갱신(Update)', '언마운트(Unmount)'로 구성됩니다. 마운트 단계는 컴포넌트가 DOM에 추가될 때 발생하고, 갱신 단계는 컴포넌트의 상태나 프로퍼티 변경 시에 발생하며, 언마운트 단계는 컴포넌트가 DOM에서 제거될 때 발생합니다.",
  },
  {
    category: 'JavaScript/React',
    question:
      "React에서 '상태(State)'와 '프로퍼티(Props)'의 차이점은 무엇인가요?",
    options: [
      '상태(State)는 컴포넌트 내에서 변경 가능한 데이터를 나타내고, 프로퍼티(Props)는 컴포넌트 간에 전달되는 읽기 전용 데이터입니다.',
      '상태(State)와 프로퍼티(Props)는 완전히 동일한 개념이며, 상황에 따라 다른 용어를 사용합니다.',
      '상태(State)는 컴포넌트 간에 전달되는 데이터를 나타내고, 프로퍼티(Props)는 컴포넌트 내에서 변경 가능한 데이터입니다.',
      '상태(State)와 프로퍼티(Props)는 모두 컴포넌트 내에서 변경 가능한 데이터를 나타냅니다.',
    ],
    correct_answer: 0,
    answer_description:
      "React에서 '상태(State)'는 컴포넌트 내에서 변경 가능한 데이터를 나타내고, '프로퍼티(Props)'는 컴포넌트 간에 전달되는 읽기 전용 데이터입니다. 상태(State)는 컴포넌트 내에서 관리되며 변경될 때마다 렌더링이 트리거됩니다. 프로퍼티(Props)는 컴포넌트 외부에서 전달되며 해당 컴포넌트는 이를 읽기 전용으로 사용합니다.",
  },
  {
    category: 'JavaScript/React',
    question: "React에서 '컴포넌트(Component)'란 무엇인가요?",
    options: [
      '컴포넌트는 React 앱의 화면을 그리는 그림이나 이미지를 의미합니다.',
      '컴포넌트는 React 앱에서 사용자 인터페이스(UI)를 구성하는 데 사용되는 독립적인 요소입니다.',
      '컴포넌트는 React 앱에서 데이터베이스와 연동하는 역할을 합니다.',
      '컴포넌트는 React 앱의 서버 측 로직을 처리하는 역할을 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      "React에서 '컴포넌트(Component)'는 React 앱의 사용자 인터페이스(UI)를 구성하는 데 사용되는 독립적인 요소를 의미합니다. 컴포넌트는 UI를 작은 조각으로 분할하고 재사용 가능하도록 만들어줍니다. 이를 통해 React 앱은 모듈화되고 관리하기 쉬운 코드를 작성할 수 있습니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question: 'Next.js란 무엇이며, 어떤 장점을 가지고 있나요?',
    options: [
      'Next.js는 JavaScript 런타임 환경을 위한 엔진입니다.',
      'Next.js는 웹 애플리케이션을 구축하기 위한 JavaScript 프레임워크입니다.',
      'Next.js는 레거시 브라우저에서만 동작합니다.',
      'Next.js는 서버 측 렌더링을 지원하지 않습니다.',
    ],
    correct_answer: 1,
    answer_description:
      'Next.js는 웹 애플리케이션을 구축하기 위한 JavaScript 프레임워크로, React 기반의 빠르고 강력한 도구입니다. 이 프레임워크는 서버 측 렌더링(SSR)을 기본으로 지원하며, SEO 최적화와 초기 로딩 성능 향상에 도움을 줍니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question: "Next.js에서 '라우팅(Routing)'은 어떻게 작동하나요?",
    options: [
      'Next.js에서 라우팅은 항상 서버 측에서 처리되며 클라이언트 측에서는 라우팅이 없습니다.',
      'Next.js에서 라우팅은 클라이언트 측에서 JavaScript를 사용하여 동적으로 처리됩니다.',
      'Next.js에서 라우팅은 오직 정적 파일을 사용하여 처리됩니다.',
      'Next.js에서는 라우팅이 없으며, 페이지 간의 이동을 직접 처리해야 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      "Next.js에서 라우팅은 클라이언트 측에서 JavaScript를 사용하여 동적으로 처리됩니다. 이는 페이지 간의 전환을 부드럽게 처리하고, 사용자 경험을 향상시키는 데 도움이 됩니다. Next.js는 'react-router'나 'react-navigation'과 같은 라이브러리 없이도 내장된 라우팅 시스템을 제공합니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question: "Next.js에서 'SSR (Server-Side Rendering)'이 왜 중요한가요?",
    options: [
      'SSR은 브라우저에서 JavaScript를 실행하지 않으므로 페이지 속도가 빨라집니다.',
      'SSR을 사용하면 클라이언트에서 데이터를 더 빠르게 캐시할 수 있습니다.',
      'SSR을 통해 검색 엔진 최적화(SEO)가 향상되며 검색 결과에 노출이 더 잘 됩니다.',
      'SSR은 개발자의 생산성을 높이기 위한 기술적 선택일 뿐 중요하지 않습니다.',
    ],
    correct_answer: 2,
    answer_description:
      'Next.js에서 SSR은 검색 엔진 최적화(SEO)에 중요한 역할을 합니다. SSR을 사용하면 서버에서 페이지를 렌더링하고 HTML로 제공하기 때문에 검색 엔진이 콘텐츠를 쉽게 파악하고 인덱싱할 수 있습니다. 이로 인해 웹 애플리케이션의 검색 결과 노출이 향상되어 사용자에게 더 많은 가시성을 제공합니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 '프리렌더링(Pre-rendering)'과 '서버사이드 렌더링(SSR)'의 차이점은 무엇인가요?",
    options: [
      '프리렌더링과 SSR은 완전히 동일한 개념이며, 이름만 다를 뿐입니다.',
      '프리렌더링은 사전에 페이지를 생성하여 정적으로 제공하고, SSR은 요청 시에 동적으로 페이지를 생성합니다.',
      '프리렌더링은 클라이언트 측에서 작동하고, SSR은 서버 측에서 작동합니다.',
      '프리렌더링은 React에서만 사용 가능하고, SSR은 모든 프레임워크에서 사용 가능합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '프리렌더링과 SSR은 다른 개념입니다. 프리렌더링은 사전에 페이지를 생성하여 정적으로 제공하는 방식으로, 미리 페이지를 렌더링하고 클라이언트에 제공합니다. 반면에 SSR은 요청 시에 서버에서 페이지를 동적으로 생성하여 클라이언트에게 제공합니다. 두 기술은 각각의 장점과 사용 사례가 있습니다.',
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 'CSR (Client-Side Rendering)'과 'SSR (Server-Side Rendering)'을 언제 사용해야 할까요?",
    options: [
      'CSR을 사용해야 하는 경우는 항상, SSR은 선택사항입니다.',
      'SSR을 사용해야 하는 경우는 항상, CSR은 선택사항입니다.',
      'CSR은 초기 렌더링 성능을 향상시키기 위해 사용하고, SSR은 SEO를 향상시키기 위해 사용합니다.',
      'CSR과 SSR은 동일한 상황에서 사용할 수 있으며, 개발자의 선호에 따라 선택합니다.',
    ],
    correct_answer: 2,
    answer_description:
      'CSR은 초기 렌더링 성능을 향상시키는 데 사용되며, 페이지가 빠르게 로드됩니다. 반면에 SSR은 검색 엔진 최적화(SEO)를 향상시키는 데 사용되며, 페이지 내용이 서버에서 생성되어 검색 엔진에 노출됩니다. 따라서 사용 사례에 따라 CSR과 SSR을 혼합하여 활용할 수도 있습니다.',
  },
  {
    category: 'Network',
    question: "인터넷에서 'IP 주소(IP address)'가 무엇을 나타내나요?",
    options: [
      'IP 주소는 인터넷 프로토콜의 약어로, 인터넷 연결의 비밀번호를 나타냅니다.',
      'IP 주소는 웹 사이트의 물리적 위치를 나타내며, 도메인 이름과 동일합니다.',
      'IP 주소는 인터넷에서 컴퓨터, 서버 또는 장치를 식별하는 고유한 숫자입니다.',
      'IP 주소는 전자우편 주소와 동일하며, 이메일 통신에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'IP 주소는 인터넷에서 컴퓨터, 서버 또는 장치를 식별하는 고유한 숫자입니다. 이 주소를 사용하여 데이터를 목적지로 라우팅하고 통신합니다. 도메인 이름과는 달리, IP 주소는 숫자로 표시되며, IPv4 또는 IPv6와 같은 버전이 있습니다.',
  },
  {
    category: 'Network',
    question: "무선 네트워크에서 'SSID'는 무엇을 나타내나요?",
    options: [
      'SSID는 스마트폰에서 사용하는 GPS 신호를 나타냅니다.',
      'SSID는 무선 네트워크에 연결할 때 사용하는 비밀번호를 나타냅니다.',
      'SSID는 무선 네트워크의 고유한 이름을 나타냅니다.',
      'SSID는 무선 네트워크의 전송 속도를 나타냅니다.',
    ],
    correct_answer: 2,
    answer_description:
      'SSID는 무선 네트워크의 고유한 이름을 나타냅니다. 이 이름은 무선 라우터나 액세스 포인트를 식별하는 데 사용되며, 사용자가 무선 네트워크를 선택하고 연결할 때 필요합니다.',
  },
  {
    category: 'Network',
    question:
      "TCP/IP 프로토콜 스택에서 'TCP'와 'UDP'의 주요 차이점은 무엇인가요?",
    options: [
      'TCP는 연결 지향적이며 신뢰성 있는 전송을 제공하고, UDP는 비연결성이며 신뢰성이 낮은 전송을 제공합니다.',
      'TCP는 데이터 그램을 사용하고, UDP는 스트림 기반 데이터를 사용합니다.',
      'TCP는 멀티캐스팅을 지원하고, UDP는 단일 주소에만 데이터를 전송할 수 있습니다.',
      'TCP는 전송 시 데이터를 암호화하며, UDP는 암호화를 지원하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TCP는 연결 지향적인 프로토콜로, 데이터를 신뢰성 있게 전송하기 위해 연결 설정 및 오류 복구 메커니즘을 가지고 있습니다. UDP는 비연결성 프로토콜로, 데이터를 빠르게 전송하고자 할 때 사용되며, 데이터 손실이 발생할 수 있습니다.',
  },
  {
    category: 'Network',
    question:
      "인터넷에서 'URL (Uniform Resource Locator)'이 무엇을 나타내나요?",
    options: [
      'URL은 전자우편 주소를 나타냅니다.',
      'URL은 웹 사이트의 물리적 위치를 나타내며, IP 주소와 동일합니다.',
      'URL은 웹 페이지나 리소스의 주소를 나타내며, 웹 브라우징에 사용됩니다.',
      'URL은 컴퓨터의 고유 식별자를 나타냅니다.',
    ],
    correct_answer: 2,
    answer_description:
      "URL은 웹 페이지나 리소스의 주소를 나타내는데 사용됩니다. 이를 통해 웹 브라우저는 사용자가 원하는 웹 페이지를 찾아내고 표시합니다. URL은 주로 'http://' 또는 'https://'로 시작하며, 도메인 이름, 경로, 쿼리 매개변수 등을 포함합니다.",
  },
  {
    category: 'Network',
    question: 'DNS(Domain Name System)은 무엇이며, 어떤 역할을 하나요?',
    options: [
      'DNS는 동적 네트워크 서비스의 약자로, 네트워크 연결을 관리합니다.',
      'DNS는 웹 브라우징을 통해 웹 페이지를 미리 볼 수 있는 서비스를 제공합니다.',
      'DNS는 도메인 이름을 IP 주소로 변환하고, 네트워크에서 호스트를 식별하는 역할을 합니다.',
      'DNS는 데이터 전송을 위해 웹 서버와 클라이언트 간의 연결을 설정합니다.',
    ],
    correct_answer: 2,
    answer_description:
      'DNS(Domain Name System)은 도메인 이름을 IP 주소로 변환하고, 네트워크에서 호스트를 식별하는 역할을 합니다. 이를 통해 사용자가 의미 있는 도메인 이름을 사용하여 웹 페이지에 액세스할 수 있으며, 인터넷에서 효율적인 데이터 통신을 가능하게 합니다.',
  },
  {
    category: 'Network',
    question:
      "TCP (Transmission Control Protocol)과 UDP (User Datagram Protocol) 중 어떤 프로토콜이 '신뢰성' 있는 데이터 전송을 보장하나요?",
    options: [
      'TCP는 신뢰성 있는 데이터 전송을 보장합니다.',
      'UDP는 신뢰성 있는 데이터 전송을 보장합니다.',
      '모든 경우에 TCP와 UDP는 동일한 신뢰성을 제공합니다.',
      'TCP와 UDP 모두 데이터 손실이 발생할 수 있으며, 신뢰성은 프로토콜 설정에 따라 다릅니다.',
    ],
    correct_answer: 0,
    answer_description:
      'TCP는 신뢰성 있는 데이터 전송을 보장하기 위한 프로토콜로, 데이터 전송 중 손실이나 손상이 발생하면 재전송을 통해 보완합니다. UDP는 비연결성 프로토콜로, 데이터를 보내고 받는 동안 손실이나 손상을 보장하지 않습니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '리스트 컴프리헨션(List Comprehension)'이란 무엇인가요?",
    options: [
      '리스트 컴프리헨션은 리스트를 생성하는 반복문의 축약된 표현으로, 한 줄로 리스트를 초기화할 수 있는 기능입니다.',
      '리스트 컴프리헨션은 리스트를 정렬하는 데 사용되는 특수한 함수입니다.',
      '리스트 컴프리헨션은 리스트를 복제하는 데 사용되며, 기존 리스트를 변경하지 않습니다.',
      '리스트 컴프리헨션은 리스트 요소를 삭제하는 데 사용되며, 리스트 크기를 줄입니다.',
    ],
    correct_answer: 0,
    answer_description:
      '리스트 컴프리헨션은 파이썬에서 리스트를 생성하는 편리한 방법으로, 반복문을 사용하여 리스트를 초기화할 때 한 줄로 간결하게 작성할 수 있습니다. 이를 통해 리스트를 빠르고 간단하게 생성할 수 있습니다.',
  },
  {
    category: 'Python',
    question: "파이썬에서 '인덱싱(Indexing)'은 무엇이며, 어떻게 사용되나요?",
    options: [
      '인덱싱은 문자열을 암호화하는 데 사용되며, 암호 해독에 필요합니다.',
      '인덱싱은 리스트, 튜플, 문자열 등의 시퀀스 데이터 타입에서 특정 요소를 선택하는 방법입니다.',
      '인덱싱은 파일을 생성하고 관리하는 데 사용되며, 파일 시스템에서 파일 위치를 지정합니다.',
      '인덱싱은 파이썬에서 사용할 수 없는 기능입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '인덱싱은 리스트, 튜플, 문자열 등의 시퀀스 데이터 타입에서 특정 요소를 선택하는 방법입니다. 파이썬에서는 0부터 시작하는 인덱스를 사용하며, 대괄호를 통해 원하는 요소를 참조하거나 수정할 수 있습니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '가상 환경(Virtual Environment)'은 무엇이며, 어떤 목적으로 사용되나요?",
    options: [
      '가상 환경은 실제 환경과 동일한 모든 기능을 가진 가상 세계를 생성합니다.',
      '가상 환경은 파이썬 패키지와 종속성을 격리하여 프로젝트 간의 충돌을 방지하고 프로젝트별로 독립적인 환경을 제공합니다.',
      '가상 환경은 파이썬 코드를 암호화하고 보호하는 데 사용됩니다.',
      '가상 환경은 파이썬의 버전을 변경하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '가상 환경은 파이썬 패키지와 종속성을 격리하여 프로젝트 간의 충돌을 방지하고, 각 프로젝트마다 독립적인 환경을 제공합니다. 이를 통해 여러 프로젝트를 동시에 개발하거나 다른 파이썬 버전을 사용하는 데 유용합니다.',
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '제너레이터(Generator)'란 무엇이며, 어떻게 사용되나요?",
    options: [
      '제너레이터는 파일을 생성하는 데 사용되며, 텍스트 파일을 만드는 데 유용합니다.',
      '제너레이터는 무한한 연속 데이터 시퀀스를 생성하며, 한 번에 메모리에 로드하지 않습니다.',
      '제너레이터는 그래픽 디자인에 사용되는 특별한 이미지 생성 도구입니다.',
      '제너레이터는 웹 개발에서 HTML 코드를 생성하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "제너레이터는 무한한 연속 데이터 시퀀스를 생성하는 데 사용됩니다. 이러한 데이터 시퀀스는 한 번에 메모리에 로드되지 않고 필요할 때 생성되므로 메모리 효율적입니다. 파이썬에서 제너레이터는 함수 내에서 'yield' 키워드를 사용하여 정의하며, 'next()' 함수로 값을 하나씩 생성할 수 있습니다.",
  },
  {
    category: 'Python',
    question:
      "파이썬에서 '인터프리터(Interpreter)'란 무엇이며, 어떤 역할을 하나요?",
    options: [
      '인터프리터는 프로그램 코드를 기계어로 변환하는 도구로, 프로그램 실행 시 필요한 라이브러리를 제공합니다.',
      '인터프리터는 코드를 한 줄씩 읽고 실행하는 프로그램으로, 파이썬 코드를 해석하고 실행합니다.',
      '인터프리터는 컴파일된 바이너리 코드를 생성하여 프로그램 실행 속도를 향상시킵니다.',
      '인터프리터는 소스 코드를 보호하고 암호화하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '인터프리터는 코드를 한 줄씩 읽고 실행하는 프로그램으로, 파이썬과 같은 스크립트 언어의 코드를 해석하고 실행합니다. 이를 통해 코드를 실행할 수 있고, 파이썬 프로그램을 개발하고 실행할 수 있게 됩니다.',
  },
  {
    category: 'Python/Memory',
    question:
      "파이썬에서 '가비지 컬렉션(Garbage Collection)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '가비지 컬렉션은 메모리 누수를 방지하기 위한 프로세스로, 사용하지 않는 메모리를 자동으로 회수합니다.',
      '가비지 컬렉션은 메모리를 미리 할당하여 프로그램의 실행 속도를 향상시킵니다.',
      '가비지 컬렉션은 메모리에서 중요한 데이터를 검색하는 데 사용됩니다.',
      '가비지 컬렉션은 파일 시스템 관리를 위한 도구입니다.',
    ],
    correct_answer: 0,
    answer_description:
      '가비지 컬렉션은 파이썬과 같은 프로그래밍 언어에서 사용하지 않는 메모리를 자동으로 감지하고 회수하는 프로세스를 의미합니다. 이를 통해 메모리 누수를 방지하고 프로그램의 안정성을 향상시킵니다.',
  },
  {
    category: 'Python/Memory',
    question:
      "파이썬에서 '참조 카운트(Reference Count)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '참조 카운트는 사용된 메모리 영역의 크기를 측정하는 도구로, 메모리 누수를 방지합니다.',
      '참조 카운트는 객체를 가리키는 변수 또는 참조의 수를 추적하여 메모리에서 객체의 해제를 관리합니다.',
      '참조 카운트는 파이썬에서 사용되지 않는 변수를 검색하는 데 사용됩니다.',
      '참조 카운트는 파이썬 코드의 실행 속도를 향상시키는 도구입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '참조 카운트는 객체를 가리키는 변수 또는 참조의 수를 추적하여 메모리에서 객체의 해제를 관리하는 기술입니다. 이를 통해 파이썬은 더 이상 사용되지 않는 객체를 자동으로 회수하고 메모리를 효율적으로 관리합니다.',
  },
  {
    category: 'Python/Decorator',
    question:
      "파이썬에서 '데코레이터(Decorator)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '데코레이터는 그래픽 디자인에 사용되는 이미지 디자인 도구입니다.',
      '데코레이터는 함수나 메서드의 기능을 확장하거나 수정하는 데 사용되며, 다른 함수를 감싸고 변경합니다.',
      '데코레이터는 웹 개발에서 웹 페이지의 스타일과 레이아웃을 디자인하는 데 사용됩니다.',
      '데코레이터는 데이터베이스 디자인 및 관리를 위한 도구입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '데코레이터는 파이썬에서 함수나 메서드의 동작을 확장하거나 수정하는 데 사용되며, 다른 함수를 감싸고 변경합니다. 이를 통해 코드 재사용과 모듈성을 향상시키며, 예를 들어 로깅, 인증, 캐싱 등과 같은 기능을 함수에 추가할 수 있습니다.',
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 감싸고 수정할 때 어떤 키워드를 사용해야 하나요?',
    options: [
      '데코레이터 키워드',
      '변경 키워드',
      '장식 키워드',
      '데코레이트 키워드',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터를 사용할 때 '장식(Decorator)' 키워드를 사용합니다. 데코레이터는 기존 함수를 감싸고 수정할 수 있으며, '@' 기호를 사용하여 함수 위에 데코레이터를 지정합니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 수정할 때 어떤 구문을 사용해야 합니까?',
    options: [
      'def 함수명(인자):',
      'function @데코레이터',
      '@데코레이터\ndef 함수명(인자):',
      '@데코레이터 함수명(인자):',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터를 사용하여 함수를 수정할 때는 '@' 기호를 사용하여 함수 정의 위에 데코레이터를 지정해야 합니다. 따라서 '@데코레이터' 구문을 사용하고, 그 아래에 함수 정의를 작성합니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      '파이썬에서 데코레이터(Decorator)를 사용하여 함수를 수정할 때, 데코레이터 함수는 어떤 인자를 받아야 하나요?',
    options: [
      "데코레이터 함수는 항상 'self' 인자를 받아야 합니다.",
      "데코레이터 함수는 항상 'cls' 인자를 받아야 합니다.",
      "데코레이터 함수는 데코레이팅할 함수를 가리키는 'func' 인자를 받아야 합니다.",
      '데코레이터 함수는 데코레이팅할 함수의 이름을 받아야 합니다.',
    ],
    correct_answer: 2,
    answer_description:
      "파이썬에서 데코레이터 함수는 데코레이팅할 함수를 가리키는 'func' 인자를 받아야 합니다. 이를 통해 데코레이터 함수는 데코레이팅할 함수를 변경하거나 보완하는 작업을 수행할 수 있습니다.",
  },
  {
    category: 'Python/Decorator',
    question:
      "파이썬에서 '클래스 메소드 데코레이터(Class Method Decorator)'와 '인스턴스 메소드 데코레이터(Instance Method Decorator)'는 어떻게 다릅니까?",
    options: [
      '클래스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 특정 인스턴스 메소드에만 영향을 미칩니다.',
      '클래스 메소드 데코레이터는 클래스 내의 특정 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미칩니다.',
      '클래스 메소드 데코레이터는 클래스의 속성을 수정하는 데 사용되며, 인스턴스 메소드 데코레이터는 인스턴스 변수를 수정하는 데 사용됩니다.',
      '클래스 메소드 데코레이터와 인스턴스 메소드 데코레이터 사이에는 차이가 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '클래스 메소드 데코레이터는 클래스 내의 모든 인스턴스 메소드에 영향을 미치며, 인스턴스 메소드 데코레이터는 특정 인스턴스 메소드에만 영향을 미칩니다. 이를 통해 클래스 메소드 데코레이터는 클래스 전체에 영향을 주는 반면, 인스턴스 메소드 데코레이터는 특정 메소드 동작을 수정할 수 있습니다.',
  },
  {
    category: 'Swift',
    question: "Swift에서 '옵셔널(Optional)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '옵셔널은 모든 변수와 상수가 필수로 값을 가져야 하는 데이터 타입입니다.',
      "옵셔널은 값이 있을 수도 있고 없을 수도 있는 데이터를 나타내는 타입으로, 'nil'을 포함할 수 있습니다.",
      '옵셔널은 Swift에서 사용할 수 없는 특별한 데이터 타입입니다.',
      '옵셔널은 함수의 반환값을 나타내는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      "Swift에서 옵셔널은 값이 있을 수도 있고 없을 수도 있는 데이터를 나타내는 타입으로, 'nil'을 포함할 수 있습니다. 이를 통해 변수 또는 상수가 값이 없을 때 안전하게 처리할 수 있으며, 런타임 오류를 방지합니다.",
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '옵셔널 체이닝(Optional Chaining)'은 무엇이며, 어떤 상황에서 사용되나요?",
    options: [
      '옵셔널 체이닝은 옵셔널 값을 감싸고 있는 것으로, 옵셔널 변수를 정수로 변환하는 데 사용됩니다.',
      '옵셔널 체이닝은 옵셔널 값에 접근하고 메서드를 호출하거나 속성을 가져올 때 사용되며, 값이 없는 경우에도 코드 실행을 중단시키지 않습니다.',
      '옵셔널 체이닝은 두 개의 옵셔널 변수를 연결하여 하나의 옵셔널 변수로 만드는 기능입니다.',
      '옵셔널 체이닝은 Swift에서 사용할 수 없는 특별한 문법입니다.',
    ],
    correct_answer: 1,
    answer_description:
      '옵셔널 체이닝은 옵셔널 값에 접근하고 메서드를 호출하거나 속성을 가져올 때 사용됩니다. 이를 통해 값이 없는 경우에도 코드 실행을 중단시키지 않고 안전하게 옵셔널 변수를 다룰 수 있습니다.',
  },
  {
    category: 'Swift',
    question: "Swift에서 '클로저(Closure)'란 무엇이며, 어떤 역할을 하나요?",
    options: [
      '클로저는 옵셔널 값을 생성하는 특수한 함수로, 값이 존재하지 않을 때 사용됩니다.',
      '클로저는 객체의 메서드를 호출하는 방법으로, 객체 지향 프로그래밍에서 사용됩니다.',
      '클로저는 코드 블록으로, 함수처럼 독립적으로 호출되거나 다른 함수에 전달될 수 있으며, 변수나 상수로 저장될 수 있습니다.',
      '클로저는 파일 입출력 및 네트워크 통신을 관리하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'Swift에서 클로저는 코드 블록으로, 함수와 유사하게 독립적으로 호출되거나 다른 함수에 전달되며, 변수나 상수로 저장될 수 있습니다. 클로저는 주로 함수의 인자로 전달되거나 반환값으로 사용되며, 다양한 용도로 활용됩니다.',
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '옵셔널 강제 해제(Unwrapping)'는 어떤 역할을 하며, 어떤 방법으로 수행되나요?",
    options: [
      "옵셔널 강제 해제는 옵셔널 값을 무시하고 무조건 값을 가지고 오는 것으로, '!' 기호를 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값을 안전하게 사용하는 방법으로, 'if let' 또는 'guard let' 구문을 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값에 대한 조건 검사를 수행하는 것으로, 'if' 구문을 사용합니다.",
      "옵셔널 강제 해제는 옵셔널 값의 속성을 변경하는 것으로, '=>' 기호를 사용합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "Swift에서 옵셔널 강제 해제는 옵셔널 값의 'nil' 여부를 무시하고 강제로 값을 가져오는 것을 의미합니다. 이를 위해 '!' 기호를 사용하며, 주의가 필요하며, 값이 'nil'인 경우 런타임 오류가 발생할 수 있습니다.",
  },
  {
    category: 'Swift',
    question:
      "Swift에서 '구조체(Struct)'와 '클래스(Class)'의 주요 차이점은 무엇인가요?",
    options: [
      '구조체는 값 타입(Value Type)으로, 복사본을 생성하여 데이터를 전달합니다. 클래스는 참조 타입(Reference Type)으로, 같은 인스턴스를 여러 변수에서 공유할 수 있습니다.',
      '구조체는 클래스와 완전히 동일한 기능을 제공하며, 주로 이름만 다를 뿐입니다.',
      '구조체는 클래스보다 메모리를 더 효율적으로 사용하며, 일반적으로 더 빠릅니다.',
      '구조체는 값 타입(Value Type)으로, 참조 타입(Reference Type)인 클래스와 동일한 방식으로 데이터를 전달합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'Swift에서 구조체(Struct)는 값 타입(Value Type)으로, 복사본을 생성하여 데이터를 전달합니다. 클래스(Class)는 참조 타입(Reference Type)으로, 같은 인스턴스를 여러 변수에서 공유할 수 있습니다. 이는 구조체와 클래스의 주요 차이점 중 하나입니다.',
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드 앱 개발에서 '코루틴(Coroutines)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '코루틴은 앱의 사용자 인터페이스를 디자인하는 데 사용되는 도구입니다.',
      '코루틴은 앱의 데이터베이스 관련 작업을 처리하기 위한 라이브러리입니다.',
      '코루틴은 비동기 작업을 보다 간편하게 다루기 위한 Kotlin 기능으로, UI 스레드를 차단하지 않고 비동기 코드를 작성할 수 있게 합니다.',
      '코루틴은 안드로이드에서 사용되지 않는 특별한 개념입니다.',
    ],
    correct_answer: 2,
    answer_description:
      '코루틴은 Kotlin에서 제공하는 비동기 작업 처리 기능으로, UI 스레드를 차단하지 않고 비동기 코드를 작성하고 관리할 수 있게 합니다. 안드로이드 앱 개발에서 주로 사용되며, 네트워크 요청, 데이터베이스 액세스 및 기타 비동기 작업을 효율적으로 처리하는 데 도움을 줍니다.',
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드에서 'MVVM(Model-View-ViewModel)' 아키텍처는 무엇이며, 어떤 이점을 제공하나요?",
    options: [
      "MVVM은 'Model-View-ViewController'의 약자로, 안드로이드 앱의 UI 디자인을 위한 아키텍처입니다.",
      "MVVM은 'Model-View-ViewModel'의 약자로, UI와 비즈니스 로직을 분리하여 앱을 보다 모듈화하고 유지보수하기 쉽게 만듭니다.",
      "MVVM은 'Model-View-ViewPresenter'의 약자로, 사용자 인터페이스를 관리하는 아키텍처로서 성능을 최적화합니다.",
      "MVVM은 'Model-View-ViewModel'의 약자로, 안드로이드 앱에서 데이터베이스를 관리하는 아키텍처입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "MVVM은 'Model-View-ViewModel'의 약자로, UI와 비즈니스 로직을 분리하여 앱을 모듈화하고 유지보수하기 쉽게 만드는 아키텍처입니다. 이 아키텍처는 안드로이드 앱 개발에서 많이 사용되며, 코드의 재사용성을 높이고 테스트 가능한 앱을 만드는 데 도움을 줍니다.",
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드 앱에서 '레이아웃(XML Layout)'은 무엇이며, 어떤 역할을 하나요?",
    options: [
      '레이아웃은 사용자 인터페이스를 디자인하고 렌더링하는데 사용되는 프로그래밍 언어입니다.',
      '레이아웃은 앱의 데이터를 저장하는 데 사용되는 저장소입니다.',
      '레이아웃은 앱의 UI 요소를 배치하고 디자인하는 데 사용되는 XML 파일로, 화면의 구조와 모양을 정의합니다.',
      '레이아웃은 Android OS의 커널 부분을 의미하며, 앱의 실행과 관련이 없습니다.',
    ],
    correct_answer: 2,
    answer_description:
      '안드로이드 앱에서 레이아웃(XML Layout)은 UI 요소를 배치하고 디자인하는 데 사용되는 XML 파일입니다. 이를 통해 화면의 구조와 모양을 정의하고, UI를 사용자에게 효과적으로 표시할 수 있습니다.',
  },
  {
    category: 'Android/Kotlin',
    question: "안드로이드에서 '인텐트(Intent)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '인텐트는 안드로이드 앱의 그래픽 디자인을 구성하는 데 사용되는 도구입니다.',
      '인텐트는 앱에서 사용자에게 데이터를 보여주는 데 사용되는 위젯입니다.',
      '인텐트는 다른 앱 구성 요소와 통신하고 작업을 수행하기 위한 메시지 객체로, 액티비티 전환, 서비스 시작 등에 사용됩니다.',
      '인텐트는 Android 앱을 설치하고 관리하는 데 사용되는 프로그램입니다.',
    ],
    correct_answer: 2,
    answer_description:
      "안드로이드에서 '인텐트(Intent)'는 다른 앱 구성 요소와 통신하고 작업을 수행하기 위한 메시지 객체로 사용됩니다. 인텐트를 통해 액티비티 전환, 서비스 시작, 데이터 공유 등 다양한 작업을 수행할 수 있습니다.",
  },
  {
    category: 'Android/Kotlin',
    question:
      "안드로이드에서 '리사이클러뷰(RecyclerView)'는 무엇이며, 어떤 역할을 하나요?",
    options: [
      '리사이클러뷰는 화면에 이미지를 출력하는 데 사용되는 위젯입니다.',
      '리사이클러뷰는 데이터 목록을 표시하고 스크롤 가능한 목록 형태로 제공하는 위젯으로, 커스텀 UI 목록을 만들 때 사용됩니다.',
      '리사이클러뷰는 GPS 기능을 활용하여 위치 정보를 제공하는 위젯입니다.',
      '리사이클러뷰는 텍스트 메시지를 처리하는 위젯입니다.',
    ],
    correct_answer: 1,
    answer_description:
      "안드로이드에서 '리사이클러뷰(RecyclerView)'는 데이터 목록을 표시하고 스크롤 가능한 목록 형태로 제공하는 위젯으로, 주로 커스텀 UI 목록을 만들 때 사용됩니다. 리사이클러뷰는 화면에 동적인 목록을 표시하고 다양한 뷰홀더(ViewHolder) 패턴을 활용하여 효율적인 목록 관리를 지원합니다.",
  },
  {
    category: 'JavaScript/Next.js',
    question:
      "Next.js에서 'getStaticProps'와 'getServerSideProps'의 차이점은 무엇인가요?",
    options: [
      "'getStaticProps'는 정적 생성된 페이지를 위한 데이터를 미리 빌드하고 캐시하며, 'getServerSideProps'는 매 요청 시에 서버 측에서 데이터를 생성합니다.",
      "'getStaticProps'는 클라이언트 측에서 데이터를 생성하며, 'getServerSideProps'는 서버 측에서 데이터를 미리 빌드하고 캐시합니다.",
      "'getStaticProps'는 동적 페이지를 위한 데이터를 생성하며, 'getServerSideProps'는 정적 페이지를 위한 데이터를 생성합니다.",
      "'getStaticProps'와 'getServerSideProps' 간에는 차이가 없습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "Next.js에서 'getStaticProps'는 정적 생성된 페이지를 위한 데이터를 미리 빌드하고 캐시하며, 'getServerSideProps'는 매 요청 시에 서버 측에서 데이터를 생성합니다. 이것은 페이지의 데이터 요구 사항에 따라 선택할 수 있는 두 가지 서버 사이드 렌더링(SSR) 방법 중 하나이며, 'getStaticProps'는 빌드 시간에 데이터를 가져오고 'getServerSideProps'는 요청 시간에 데이터를 가져옵니다.",
  },
  {
    category: 'JavaScript/undefined',
    question:
      "자바스크립트에서 'undefined'란 무엇이며, 어떤 상황에서 발생하나요?",
    options: [
      "'undefined'는 변수가 값이 없거나 선언되지 않았을 때 발생하며, 자바스크립트의 기본 데이터 타입 중 하나입니다.",
      "'undefined'는 항상 에러를 나타내며, 프로그램 실행 중에는 발생하지 않습니다.",
      "'undefined'는 오직 함수 내에서만 발생하며, 변수에는 영향을 미치지 않습니다.",
      "'undefined'는 항상 'null'과 동일한 값을 갖습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'undefined'는 자바스크립트에서 변수가 값이 없거나 선언되지 않았을 때 발생합니다. 이는 자바스크립트의 기본 데이터 타입 중 하나이며, 변수가 초기화되지 않거나 값이 할당되지 않은 경우에 자동으로 설정됩니다. 'undefined'는 변수에 할당할 수 있는 값 중 하나이며, 에러를 나타내는 것은 아닙니다.",
  },
  {
    category: 'JavaScript/undefined',
    question: "자바스크립트에서 'null'과 'undefined'의 차이점은 무엇인가요?",
    options: [
      "'null'은 변수가 값이 없음을 나타내는 특별한 값으로, 'undefined'는 변수가 아직 정의되지 않았거나 값이 할당되지 않았을 때 나타납니다.",
      "'undefined'는 변수가 값이 없음을 나타내는 특별한 값으로, 'null'은 자바스크립트에서 사용되지 않습니다.",
      "'null'은 변수의 타입을 나타내며, 'undefined'는 변수의 상태를 나타냅니다.",
      "'null'과 'undefined'는 완전히 동일한 의미를 가지며 상황에 따라 사용법만 다릅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'null'과 'undefined'는 자바스크립트에서 다른 의미를 가집니다. 'null'은 변수가 값이 없음을 나타내는 특별한 값으로 사용되며, 프로그래머가 명시적으로 변수에 'null'을 할당할 수 있습니다. 반면에 'undefined'는 변수가 아직 정의되지 않았거나 값이 할당되지 않았을 때 자동으로 설정되는 값입니다.",
  },
  {
    category: 'JavaScript/undefined',
    question:
      "자바스크립트에서 'undefined'와 'null'의 차이를 설명하세요. 어떤 경우에 각각 사용되나요?",
    options: [
      "'undefined'는 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 'null'은 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용됩니다.",
      "'null'은 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 'undefined'는 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용됩니다.",
      "'undefined'는 변수의 타입을 나타내며, 'null'은 변수의 상태를 나타냅니다.",
      "'null'과 'undefined'는 완전히 동일한 의미를 가지며, 사용법만 다릅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'undefined'와 'null'은 자바스크립트에서 다른 의미를 가집니다. 'undefined'는 변수가 값이 없거나 아직 할당되지 않았을 때 나타나는 기본값이며, 이는 자바스크립트 엔진이 자동으로 설정하는 것입니다. 'null'은 개발자가 명시적으로 변수에 '값 없음'을 나타내기 위해 사용되며, 프로그램에서 의도적으로 변수에 값을 제거할 때 주로 활용됩니다.",
  },
  {
    category: 'JavaScript/Array',
    question:
      '자바스크립트에서 배열(Array)은 무엇이며, 어떻게 배열을 생성하고 요소를 추가할 수 있나요?',
    options: [
      "배열은 숫자로만 이루어진 데이터 구조로, 배열을 생성할 때는 'array()' 함수를 사용하며 'push()' 메서드로 요소를 추가합니다.",
      "배열은 순서가 있는 데이터 집합으로, 배열을 생성할 때 대괄호 '[]'를 사용하며 'push()' 메서드나 'concat()' 메서드로 요소를 추가합니다.",
      "배열은 객체와 유사한 데이터 구조로, 배열을 생성할 때 'object()' 함수를 사용하며 'add()' 메서드로 요소를 추가합니다.",
      "배열은 문자열로만 이루어진 데이터 구조로, 배열을 생성할 때는 'string()' 함수를 사용하며 'append()' 메서드로 요소를 추가합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "자바스크립트에서 배열은 순서가 있는 데이터 집합으로, 배열을 생성할 때는 대괄호 '[]'를 사용합니다. 요소를 추가할 때 'push()' 메서드나 'concat()' 메서드 등을 사용합니다. 배열은 다양한 데이터 타입을 포함할 수 있으며, 인덱스를 사용하여 요소에 접근할 수 있습니다.",
  },
  {
    category: 'JavaScript/Array',
    question:
      "자바스크립트 배열에서 'forEach()' 메서드의 역할은 무엇이며, 어떤 상황에서 유용하게 활용할 수 있나요?",
    options: [
      "'forEach()' 메서드는 배열의 각 요소를 반복하면서 지정된 콜백 함수를 실행하며, 각 요소를 가공하거나 수정하는 데 사용됩니다.",
      "'forEach()' 메서드는 배열의 요소를 무작위로 섞는 데 사용되며, 배열의 요소를 쉽게 정렬할 때 유용합니다.",
      "'forEach()' 메서드는 배열에서 특정 요소를 찾는 데 사용되며, 조건에 맞는 요소를 필터링할 때 유용합니다.",
      "'forEach()' 메서드는 배열의 길이를 반환하는 데 사용되며, 배열의 크기를 확인할 때 유용합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'forEach()' 메서드는 자바스크립트 배열에서 각 요소를 반복하면서 지정된 콜백 함수를 실행합니다. 이를 통해 각 요소를 가공하거나 수정할 수 있으며, 배열의 각 항목에 대해 일괄 작업을 수행하는 데 유용합니다. 예를 들어, 배열의 각 요소를 출력하거나 특정 작업을 수행하려는 경우에 'forEach()' 메서드를 활용할 수 있습니다.",
  },
  {
    category: 'JavaScript/typeof',
    question:
      "자바스크립트에서 'typeof' 연산자는 어떤 목적으로 사용되며, 그것의 동작 방식에 대해 설명해주세요.",
    options: [
      "'typeof' 연산자는 변수의 데이터 유형을 결정하기 위해 사용되며, 데이터 유형에 따라 다른 문자열을 반환합니다.",
      "'typeof' 연산자는 변수의 값이 숫자일 때만 사용 가능하며, 문자열 또는 논리값에는 적용할 수 없습니다.",
      "'typeof' 연산자는 변수의 이름을 확인하고 해당 변수의 값을 반환합니다.",
      "'typeof' 연산자는 항상 'object'를 반환하며, 변수의 데이터 유형과는 관련이 없습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'typeof' 연산자는 변수의 데이터 유형을 결정하기 위해 사용되며, 데이터 유형에 따라 다른 문자열을 반환합니다. 예를 들어, 'typeof 42'를 실행하면 'number'를 반환하고, 'typeof 'Hello''를 실행하면 'string'을 반환합니다. 'typeof' 연산자는 변수의 값이 아닌 변수 자체의 데이터 유형을 확인합니다.",
  },
  {
    category: 'JavaScript/Advanced',
    question:
      "자바스크립트에서 '선언되지 않은 것(undeclared)'과 '정의되지 않은 것(undefined)'의 차이점은 무엇인가요?",
    options: [
      "'선언되지 않은 것'은 변수를 선언하지 않고 사용하는 것을 나타내며, '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않은 상태를 의미합니다.",
      "'선언되지 않은 것'과 '정의되지 않은 것'은 동일한 개념으로 사용되며 차이가 없습니다.",
      "'선언되지 않은 것'은 변수를 정의하지 않고 사용하는 것을 나타내며, '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않은 상태를 의미합니다.",
      "'선언되지 않은 것'과 '정의되지 않은 것'은 모두 오류를 발생시키지 않으며, JavaScript 엔진이 자동으로 처리합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "자바스크립트에서 '선언되지 않은 것'과 '정의되지 않은 것'은 다릅니다. '선언되지 않은 것'은 변수를 선언하지 않고 사용하려고 할 때 발생하는 오류를 의미하며, 이는 JavaScript 엔진이 변수를 인식하지 못하고 있을 때 발생합니다. 반면에 '정의되지 않은 것'은 변수가 선언되었지만 값이 할당되지 않았을 때 발생하는 현상을 나타내며, 이 경우 변수는 존재하지만 값이 없는 상태입니다.",
  },
  {
    category: 'JavaScript/Advanced',
    question:
      "다음 코드에서 'var a;'와 'typeof a;' 그리고 'typeof b;'의 결과는 어떻게 다르며, 그 이유는 무엇인가요?",
    options: [
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과도 'undefined'입니다. 'typeof b;'는 오류를 발생시킵니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'undefined'입니다. 'typeof b;'의 결과는 'undefined'입니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'string'입니다. 'typeof b;'는 오류를 발생시킵니다.",
      "'var a;'의 결과는 'undefined'이고, 'typeof a;'의 결과는 'string'입니다. 'typeof b;'의 결과는 'undefined'입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 'var a;'와 같이 변수를 선언하면 변수는 'undefined' 값으로 초기화됩니다. 'typeof a;'는 변수 'a'의 데이터 유형을 확인하는데, 여기서 'a'는 'undefined' 값이므로 'typeof a;'의 결과도 'undefined'가 됩니다. 그러나 'b'는 선언되지 않은 변수이므로 'typeof b;'를 실행하면 'undefined'가 아니라 오류가 발생합니다.",
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '알고리즘의 시간 복잡도(Time Complexity)와 공간 복잡도(Space Complexity)는 무엇이며, 왜 중요한가요?',
    options: [
      '시간 복잡도는 알고리즘을 실행하는 데 소요되는 시간을 측정하며, 공간 복잡도는 알고리즘을 실행하는 데 필요한 메모리 공간을 측정합니다. 이러한 복잡도는 알고리즘의 효율성과 성능을 평가하는 데 중요합니다.',
      '시간 복잡도는 알고리즘의 코드 길이를 나타내며, 공간 복잡도는 알고리즘의 실행 순서를 나타냅니다. 이러한 복잡도는 알고리즘의 복잡성을 평가하는 데 중요합니다.',
      '시간 복잡도는 알고리즘의 정확성을 측정하며, 공간 복잡도는 알고리즘의 로직을 나타냅니다. 이러한 복잡도는 알고리즘의 성능과 효율성을 개선하는 데 중요합니다.',
      '시간 복잡도와 공간 복잡도는 알고리즘의 적합성을 판단하는 데만 중요하며, 실제 프로그래밍에서는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '알고리즘의 시간 복잡도와 공간 복잡도는 각각 알고리즘이 실행하는 데 소요되는 시간과 필요한 메모리 공간을 측정하는데 사용됩니다. 이러한 복잡도 측정은 알고리즘의 효율성을 평가하고, 다양한 알고리즘 중에서 최적의 선택을 도와줍니다. 시간과 공간 복잡도를 고려하여 알고리즘을 설계하면 프로그램의 성능을 최적화하고 자원을 효율적으로 활용할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '이진 검색 알고리즘(Binary Search Algorithm)은 무엇이며, 어떤 상황에서 효과적으로 활용할 수 있나요?',
    options: [
      '이진 검색 알고리즘은 정렬된 배열에서 특정 원소를 찾는 알고리즘으로, 배열의 중간 요소와 비교하여 검색 대상을 반으로 줄여나가는 방식입니다. 정렬된 데이터에서 빠르게 원하는 값을 찾을 때 효과적입니다.',
      '이진 검색 알고리즘은 임의의 순서로 정렬된 배열에서 특정 원소를 찾는 알고리즘으로, 배열의 첫 번째 요소와 비교하여 검색 대상을 찾아가는 방식입니다. 임의의 데이터에서 효과적입니다.',
      '이진 검색 알고리즘은 선형 탐색과 동일하게 배열의 모든 요소를 한 번씩 검사하는 방식으로 동작하며, 데이터의 정렬 여부에 상관없이 효과적입니다.',
      '이진 검색 알고리즘은 데이터의 형태와 정렬 여부와 무관하게 항상 선형 시간 내에 검색을 완료할 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '이진 검색 알고리즘은 정렬된 배열에서 특정 원소를 빠르게 찾는데 효과적인 알고리즘입니다. 배열의 중간 요소와 비교하여 검색 대상을 반으로 줄여나가므로 시간 복잡도가 O(log n)으로 매우 효율적입니다. 이 알고리즘은 주로 크기가 큰 정렬된 데이터 집합에서 특정 값을 찾을 때 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '빅 오 표기법(Big O Notation)은 무엇이며, 왜 알고리즘 분석에 중요한가요?',
    options: [
      '빅 오 표기법은 알고리즘의 복잡도를 나타내는 방법으로, 알고리즘의 실행 시간을 정확하게 측정하는 데 사용됩니다.',
      '빅 오 표기법은 알고리즘의 시간 복잡도를 대략적으로 표현하는 방법으로, 알고리즘의 성능을 예측하고 다른 알고리즘과 비교하는 데 사용됩니다.',
      '빅 오 표기법은 알고리즘의 출력 결과를 표현하는 방법으로, 알고리즘의 정확성을 평가하는 데 사용됩니다.',
      '빅 오 표기법은 알고리즘의 가독성을 향상시키는 방법으로, 코드 작성을 더 쉽게 만들어 줍니다.',
    ],
    correct_answer: 1,
    answer_description:
      '빅 오 표기법은 알고리즘의 시간 복잡도를 대략적으로 표현하는 방법으로, 알고리즘의 성능을 예측하고 다른 알고리즘과 비교하는 데 중요합니다. 이 표기법을 사용하여 알고리즘의 실행 시간이 입력 크기에 어떻게 의존하는지 이해하고, 최적의 알고리즘을 선택하거나 개발하는 데 도움이 됩니다. 빅 오 표기법은 알고리즘 분석과 알고리즘 설계에 중요한 개념 중 하나입니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '어떤 상황에서 선택 정렬(Selection Sort) 알고리즘을 사용하는 것이 유용할까요? 선택 정렬의 시간 복잡도는 어떻게 되나요?',
    options: [
      '선택 정렬은 대량의 데이터를 정렬할 때 가장 효과적이며, 시간 복잡도는 O(n)입니다.',
      '선택 정렬은 데이터가 이미 정렬되어 있을 때 사용하며, 시간 복잡도는 O(1)입니다.',
      '선택 정렬은 간단한 구현이 가능하며, 데이터의 크기에 상관없이 항상 최적의 선택입니다.',
      '선택 정렬은 일반적으로 다른 정렬 알고리즘보다 비효율적이며, 시간 복잡도는 O(n^2)입니다.',
    ],
    correct_answer: 3,
    answer_description:
      '선택 정렬은 일반적으로 다른 정렬 알고리즘보다 비효율적으로 알려져 있으며, 시간 복잡도는 O(n^2)입니다. 따라서 선택 정렬은 데이터의 크기가 작거나 이미 거의 정렬된 상태일 때 사용할 수 있습니다. 대량의 데이터를 정렬할 때에는 빠른 정렬 알고리즘(예: 퀵 정렬 또는 병합 정렬)을 고려하는 것이 더 효율적입니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '퀵 정렬(Quick Sort) 알고리즘은 무엇이며, 어떤 상황에서 가장 효과적으로 사용될 수 있나요?',
    options: [
      '퀵 정렬은 대량의 데이터를 정렬할 때 가장 효과적이며, 시간 복잡도는 항상 O(n)입니다.',
      '퀵 정렬은 데이터가 이미 정렬되어 있을 때 사용하며, 시간 복잡도는 O(1)입니다.',
      '퀵 정렬은 임의의 데이터에 대해 효과적이며, 시간 복잡도는 일반적으로 O(n log n)입니다.',
      '퀵 정렬은 간단한 구현이 가능하며, 데이터의 크기에 상관없이 항상 최적의 선택입니다.',
    ],
    correct_answer: 2,
    answer_description:
      '퀵 정렬은 임의의 데이터에 대해 효과적으로 작동하며, 일반적으로 시간 복잡도는 O(n log n)입니다. 이 알고리즘은 대량의 데이터를 빠르게 정렬할 때 가장 효과적이며, 일반적인 상황에서 다른 정렬 알고리즘과 비교했을 때 빠른 성능을 보입니다. 따라서 퀵 정렬은 많은 정렬 작업에서 기본적으로 고려되는 정렬 알고리즘 중 하나입니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '그래프(Graph)는 무엇이며, 어떤 상황에서 그래프를 사용하는 것이 유용할까요?',
    options: [
      '그래프는 수학적인 공간에서 물체와 물체 사이의 관계를 표현하는 방법으로, 주로 2차원 평면에서 사용됩니다.',
      '그래프는 데이터를 표현하는 자료 구조로, 주로 정렬된 목록에서 사용됩니다.',
      '그래프는 노드(Node)와 간선(Edge)의 집합으로 표현되며, 복잡한 관계를 나타내고 다양한 분야에서 활용됩니다.',
      '그래프는 텍스트 문서에서 특정 단어의 빈도를 세는 데 주로 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '그래프는 노드(Node)와 간선(Edge)의 집합으로 표현되며, 복잡한 관계를 나타내고 다양한 분야에서 활용됩니다. 그래프는 네트워크, 노드 간의 관계, 경로 찾기, 최단 경로 문제, 소셜 네트워크 분석 등 다양한 영역에서 유용하게 사용됩니다. 또한 그래프 알고리즘은 컴퓨터 공학 분야에서도 중요한 역할을 합니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '재귀 함수(Recursive Function)는 무엇이며, 어떤 상황에서 유용하게 활용할 수 있나요?',
    options: [
      '재귀 함수는 반복문을 사용하여 작성되며, 주로 반복적인 작업을 수행할 때 유용합니다.',
      '재귀 함수는 자기 자신을 호출하여 작성되며, 주로 문제를 작은 부분으로 분할하고 해결할 때 유용합니다.',
      '재귀 함수는 모든 종류의 알고리즘에서 사용되며, 프로그램의 성능을 향상시킵니다.',
      '재귀 함수는 항상 스택 오버플로우(Stack Overflow)를 발생시키므로 사용하지 않아야 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '재귀 함수는 자기 자신을 호출하여 작성되며, 주로 문제를 작은 부분으로 분할하고 해결할 때 유용합니다. 재귀적인 접근은 문제를 더 작은 하위 문제로 쪼개고 해결함으로써 복잡한 문제를 해결할 때 효과적입니다. 예를 들어, 퀵 정렬, 피보나치 수열 계산, 이진 트리 탐색 등 다양한 알고리즘이 재귀적으로 구현됩니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '동적 프로그래밍(Dynamic Programming)은 무엇이며, 어떤 유형의 문제 해결에 사용될 수 있나요?',
    options: [
      '동적 프로그래밍은 프로그램 실행 중 동적으로 코드를 수정하는 기술로, 주로 성능 최적화에 사용됩니다.',
      '동적 프로그래밍은 프로그램의 동작을 기록하고 분석하는 방법으로, 디버깅에 사용됩니다.',
      '동적 프로그래밍은 중복되는 계산을 피하고 최적 부분 구조를 활용하여 문제를 효율적으로 해결하는 알고리즘 설계 기법입니다.',
      '동적 프로그래밍은 프로그램의 입력과 출력을 동적으로 생성하는 기술로, 주로 데이터베이스 시스템에서 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '동적 프로그래밍은 중복되는 계산을 피하고 최적 부분 구조를 활용하여 문제를 효율적으로 해결하는 알고리즘 설계 기법입니다. 이 기법은 다양한 유형의 문제 해결에 사용됩니다. 예를 들어, 피보나치 수열 계산, 그리드 최적화, 최단 경로 문제 등 다양한 동적 프로그래밍 기반의 알고리즘이 존재합니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '해시 테이블(Hash Table)은 무엇이며, 어떤 상황에서 유용하게 활용할 수 있나요?',
    options: [
      '해시 테이블은 정렬된 데이터를 저장하는 자료 구조로, 주로 검색 연산에 사용됩니다.',
      '해시 테이블은 데이터를 해시 함수를 사용하여 인덱싱하고 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다.',
      '해시 테이블은 연결 리스트로 데이터를 저장하며, 데이터 정렬과 관련된 작업에 사용됩니다.',
      '해시 테이블은 주로 데이터의 압축과 관련된 작업에 사용되며, 검색 및 삽입 연산에는 적합하지 않습니다.',
    ],
    correct_answer: 1,
    answer_description:
      '해시 테이블은 데이터를 해시 함수를 사용하여 인덱싱하고 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다. 해시 테이블은 데이터의 키를 해시 함수를 통해 해시값으로 변환하고 이 해시값을 인덱스로 사용하여 데이터를 저장하므로 매우 효율적인 검색과 삽입이 가능합니다. 해시 테이블은 데이터베이스, 캐싱, 인덱싱, 빠른 검색이 필요한 상황에서 유용하게 활용됩니다.',
  },
  {
    category: 'Computer Engineering/Algorithm',
    question:
      '그리디 알고리즘이 무엇이며, 어떤 유형의 문제 해결에 사용될 수 있나요?',
    options: [
      '그리디 알고리즘은 시간 복잡도를 최소화하기 위해 실행 시간을 제한하는 기술로, 주로 성능 최적화에 사용됩니다.',
      '그리디 알고리즘은 현재 상태에서 최적인 선택을 하며, 각 단계에서 지역 최적해를 찾는 기술로, 최적화 문제를 해결하는 데 사용됩니다.',
      '그리디 알고리즘은 모든 가능한 경우를 검사하여 해를 찾는 기술로, 결정 문제를 해결하는 데 사용됩니다.',
      '그리디 알고리즘은 복잡한 데이터 구조를 생성하고 관리하는 데 사용되며, 데이터베이스 시스템에서 주로 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '그리디 알고리즘은 현재 상태에서 최적인 선택을 하며, 각 단계에서 지역 최적해를 찾는 기술로, 최적화 문제를 해결하는 데 사용됩니다. 그리디 알고리즘은 주어진 문제에 대해 가장 쉬운 선택을 계속하여 해결해나가는 방법이며, 이를 통해 전역 최적해를 찾을 수 있는 문제에 적용됩니다. 예를 들어, 거스름돈 문제, 태스크 스케줄링, 그리드 네트워크 디자인 등 다양한 문제에서 그리디 알고리즘이 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '배열(Array)은 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '배열은 정렬된 데이터를 저장하는 자료 구조로, 주로 검색 연산에 사용됩니다.',
      '배열은 동적으로 크기가 조정되는 자료 구조로, 주로 삽입 및 삭제 연산에 사용됩니다.',
      '배열은 동일한 데이터 유형의 요소를 순서대로 저장하는 자료 구조로, 빠른 인덱스 기반 접근이 필요한 상황에 사용됩니다.',
      '배열은 연결 리스트와 동일한 자료 구조로, 데이터의 연속된 저장이 필요한 상황에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '배열은 동일한 데이터 유형의 요소를 순서대로 저장하는 자료 구조로, 빠른 인덱스 기반 접근이 필요한 상황에 주로 사용됩니다. 배열은 연속된 메모리 공간에 요소를 저장하므로 빠른 접근이 가능하지만 크기가 고정되어 있으므로 삽입 및 삭제 연산에는 제약이 있을 수 있습니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question:
      '연결 리스트(Linked List)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '연결 리스트는 요소들을 연결하여 순서대로 저장하는 자료 구조로, 주로 인덱스 기반 접근이 필요한 상황에 사용됩니다.',
      '연결 리스트는 동일한 데이터 유형의 요소를 배열 형태로 저장하는 자료 구조로, 빠른 검색 연산에 사용됩니다.',
      '연결 리스트는 동적으로 크기가 조정되는 자료 구조로, 삽입 및 삭제 연산이 빈번한 상황에 사용됩니다.',
      '연결 리스트는 정렬된 데이터를 저장하는 자료 구조로, 주로 검색 연산에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '연결 리스트는 요소들을 연결하여 순서대로 저장하는 자료 구조로, 주로 삽입 및 삭제 연산이 빈번한 상황에 사용됩니다. 연결 리스트는 크기가 동적으로 조정 가능하므로 삽입 및 삭제가 용이하며, 메모리 상에서 연속된 공간을 필요로 하지 않습니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '스택(Stack)은 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '스택은 선입후출(LIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 재귀 함수 호출과 관련된 상황에서 사용됩니다.',
      '스택은 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 데이터의 정렬에 사용됩니다.',
      '스택은 데이터를 어떤 순서로든 저장하는 자료 구조로, 다양한 상황에서 사용될 수 있습니다.',
      '스택은 재귀 함수 호출과는 관련이 없으며, 사용되는 상황은 거의 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '스택은 선입후출(LIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 재귀 함수 호출과 관련된 상황에서 사용됩니다. 스택은 함수 호출 정보나 임시 데이터를 저장하기 위해 사용되며, 함수가 호출된 역순으로 반환되어야 할 때 유용합니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '큐(Queue)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '큐는 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 재귀 함수 호출과 관련된 상황에서 사용됩니다.',
      '큐는 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 작업 큐(프로세스 스케줄링)와 관련된 상황에서 사용됩니다.',
      '큐는 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 재귀 함수 호출을 대체하는 데 사용됩니다.',
      '큐는 재귀 함수 호출과는 관련이 없으며, 사용되는 상황은 거의 없습니다.',
    ],
    correct_answer: 1,
    answer_description:
      '큐는 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 작업 큐(프로세스 스케줄링)와 관련된 상황에서 사용됩니다. 큐는 다양한 컴퓨터 프로그램 및 시스템에서 작업을 관리하고 순서대로 처리하는 데 유용합니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '트리(Tree)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '트리는 노드와 간선으로 이루어진 그래프 자료 구조로, 주로 정렬된 데이터를 저장하는 데 사용됩니다.',
      '트리는 계층 구조를 표현하기 위한 자료 구조로, 주로 파일 시스템 및 조직도와 관련된 상황에서 사용됩니다.',
      '트리는 키-값 쌍을 저장하기 위한 자료 구조로, 주로 검색과 관련된 상황에서 사용됩니다.',
      '트리는 모든 종류의 자료 구조와 상관없이 일반적으로 사용되며, 다양한 상황에서 활용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '트리는 계층 구조를 표현하기 위한 자료 구조로, 주로 파일 시스템, 조직도, 계층적 데이터를 표현하고 다루는 데 사용됩니다. 트리의 계층적 구조는 데이터를 효과적으로 구조화하고 관리하는 데 도움이 됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '해시맵(Hash Map)은 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '해시맵은 정렬된 데이터를 저장하는 자료 구조로, 주로 검색 연산에 사용됩니다.',
      '해시맵은 데이터를 해시 함수를 사용하여 암호화하고 보안 목적으로 사용됩니다.',
      '해시맵은 데이터를 키-값 쌍으로 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다.',
      '해시맵은 모든 종류의 자료 구조와 상관없이 일반적으로 사용되며, 다양한 상황에서 활용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '해시맵(Hash Map)은 데이터를 키-값 쌍으로 저장하는 자료 구조로, 빠른 검색과 삽입 연산에 사용됩니다. 해시맵은 해시 함수를 사용하여 데이터를 해시화하고 해시 테이블에 저장하므로 빠른 검색이 가능하며, 데이터베이스, 캐싱, 인덱싱 등 다양한 응용 분야에서 활용됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '힙(Heap)은 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '힙은 키-값 쌍을 저장하기 위한 자료 구조로, 주로 검색 연산에 사용됩니다.',
      '힙은 우선순위 큐를 구현하기 위한 자료 구조로, 주로 최댓값 또는 최솟값 검색에 사용됩니다.',
      '힙은 데이터를 해시 함수를 사용하여 인덱싱하고 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다.',
      '힙은 모든 종류의 자료 구조와 상관없이 일반적으로 사용되며, 다양한 상황에서 활용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '힙(Heap)은 우선순위 큐를 구현하기 위한 자료 구조로, 주로 최댓값 또는 최솟값 검색에 사용됩니다. 힙은 특정 순서에 따라 데이터를 정렬하여 빠른 우선순위 기반 연산을 수행할 수 있도록 도와줍니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '그래프(Graph)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '그래프는 데이터를 해시 함수를 사용하여 인덱싱하고 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다.',
      '그래프는 수학적인 공간에서 물체와 물체 사이의 관계를 표현하는 방법으로, 주로 2차원 평면에서 사용됩니다.',
      '그래프는 노드(Node)와 간선(Edge)의 집합으로 표현되며, 복잡한 관계를 나타내고 다양한 분야에서 활용됩니다.',
      '그래프는 정렬된 데이터를 저장하기 위한 자료 구조로, 주로 검색 연산에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '그래프(Graph)는 노드(Node)와 간선(Edge)의 집합으로 표현되며, 복잡한 관계를 나타내고 다양한 분야에서 활용됩니다. 그래프는 네트워크, 노드 간의 관계, 경로 찾기, 최단 경로 문제, 소셜 네트워크 분석 등 다양한 영역에서 유용하게 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question:
      '이진 트리(Binary Tree)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '이진 트리는 계층 구조를 표현하기 위한 자료 구조로, 주로 파일 시스템 및 조직도와 관련된 상황에서 사용됩니다.',
      '이진 트리는 키-값 쌍을 저장하기 위한 자료 구조로, 주로 검색과 관련된 상황에서 사용됩니다.',
      '이진 트리는 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 자료 구조로, 주로 재귀 함수 호출과 관련된 상황에서 사용됩니다.',
      '이진 트리는 데이터 정렬과 관련된 작업에 사용되며, 주로 데이터 검색에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '이진 트리(Binary Tree)는 키-값 쌍을 저장하기 위한 자료 구조로, 주로 검색과 관련된 상황에서 사용됩니다. 이진 트리는 데이터를 계층적으로 구조화하고 검색 및 정렬 작업을 효율적으로 수행할 수 있도록 도와줍니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question:
      '이중 연결 리스트(Doubly Linked List)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '이중 연결 리스트는 요소들을 순서대로 저장하는 자료 구조로, 주로 빠른 검색 연산에 사용됩니다.',
      '이중 연결 리스트는 이진 트리를 구현하기 위한 자료 구조로, 주로 정렬된 데이터를 저장하는 데 사용됩니다.',
      '이중 연결 리스트는 각 요소가 이전 요소와 다음 요소에 대한 참조를 가지고 있는 자료 구조로, 삽입 및 삭제 연산이 빈번한 상황에서 사용됩니다.',
      '이중 연결 리스트는 데이터를 해시 함수를 사용하여 인덱싱하고 저장하는 자료 구조로, 빠른 검색 및 삽입 연산에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '이중 연결 리스트(Doubly Linked List)는 각 요소가 이전 요소와 다음 요소에 대한 참조를 가지고 있는 자료 구조로, 삽입 및 삭제 연산이 빈번한 상황에서 사용됩니다. 이중 연결 리스트는 양방향으로 순회할 수 있어 빠른 삽입과 삭제가 가능하며, 예를 들어 텍스트 편집기에서 커서 관리에 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question:
      '그래프(Graph) 알고리즘은 어떤 종류가 있으며, 어떤 문제를 해결하기 위해 사용될 수 있나요?',
    options: [
      '그래프 알고리즘에는 정렬 알고리즘과 검색 알고리즘이 포함되며, 주로 데이터 정렬 및 검색에 사용됩니다.',
      '그래프 알고리즘에는 최단 경로 찾기, 최소 신장 트리 구축, 그래프 순회 등 다양한 종류가 있으며, 네트워크, 노드 간의 관계 분석, GPS 경로 탐색 등 다양한 문제를 해결하기 위해 사용됩니다.',
      '그래프 알고리즘은 주로 문자열 처리와 관련된 작업에 사용되며, 텍스트 검색과 분석에 유용합니다.',
      '그래프 알고리즘은 컴퓨터 게임 개발에 주로 사용되며, 게임 엔진 및 그래픽 렌더링에 필요합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '그래프 알고리즘에는 최단 경로 찾기, 최소 신장 트리 구축, 그래프 순회 등 다양한 종류가 있으며, 네트워크, 노드 간의 관계 분석, GPS 경로 탐색, 소셜 네트워크 분석, 게임 레벨 디자인 등 다양한 문제를 해결하기 위해 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Data Structures',
    question: '비트마스크(Bitmask)는 무엇이며, 어떤 상황에서 사용될 수 있나요?',
    options: [
      '비트마스크는 비트 연산을 사용하여 숫자를 저장하는 자료 구조로, 주로 데이터 압축에 사용됩니다.',
      '비트마스크는 비트 연산을 사용하여 집합을 표현하는 자료 구조로, 주로 부분 집합 합 연산 및 비교에 사용됩니다.',
      '비트마스크는 키-값 쌍을 저장하기 위한 자료 구조로, 주로 검색과 관련된 상황에서 사용됩니다.',
      '비트마스크는 문자열 처리와 관련된 작업에 사용되며, 텍스트 검색과 분석에 유용합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '비트마스크(Bitmask)는 비트 연산을 사용하여 집합을 표현하는 자료 구조로, 주로 부분 집합 합 연산, 비교, 필터링, 상태 플래그 등 다양한 상황에서 사용됩니다. 비트마스크는 메모리를 효율적으로 사용하며, 알고리즘 최적화 및 효율적인 데이터 구조 설계에 중요한 역할을 합니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question: '시스템 호출(System Call)은 무엇이며, 어떤 역할을 하고 있나요?',
    options: [
      '시스템 호출은 프로그램의 실행 중에 다른 프로그램을 호출하는 메커니즘으로, 주로 다른 프로그램과의 통신에 사용됩니다.',
      '시스템 호출은 운영 체제 커널에 의해 제공되는 서비스에 접근하기 위한 인터페이스로, 주로 운영 체제 서비스 호출 및 자원 관리에 사용됩니다.',
      '시스템 호출은 프로그램의 소스 코드에서 사용되는 주석으로, 주로 코드의 가독성을 높이기 위해 사용됩니다.',
      '시스템 호출은 네트워크 통신에 사용되며, 주로 데이터 전송과 관련된 작업에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '시스템 호출(System Call)은 운영 체제 커널에 의해 제공되는 서비스에 접근하기 위한 인터페이스로, 주로 운영 체제 서비스 호출, 파일 입출력, 프로세스 제어, 메모리 관리 등 다양한 시스템 리소스와 상호 작용하기 위해 사용됩니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '프로세스(Process)와 스레드(Thread)는 어떻게 다르며, 각각 어떤 상황에서 사용될까요?',
    options: [
      '프로세스는 독립적인 실행 단위로, 각각 자신만의 주소 공간을 가지며 주로 다중 프로그램 환경에서 사용됩니다. 스레드는 프로세스 내에서 실행되며, 주로 공유 메모리 환경에서 병렬 처리에 사용됩니다.',
      '프로세스와 스레드는 완전히 동일하며, 상황에 따라 어떤 것을 사용할지는 개발자의 선택에 달려 있습니다.',
      '프로세스는 주로 실시간 응용 프로그램에서 사용되며, 스레드는 주로 데이터베이스 관리 시스템에서 사용됩니다.',
      '프로세스와 스레드는 모두 네트워크 통신에 사용되며, 주로 데이터 전송과 관련된 작업에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '프로세스는 독립적인 실행 단위로, 각각 자신만의 주소 공간을 가지며 주로 다중 프로그램 환경에서 사용됩니다. 스레드는 프로세스 내에서 실행되며, 공유 메모리 환경에서 병렬 처리와 자원 공유에 사용됩니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '동기화(Synchronization)와 뮤텍스(Mutex)는 어떤 역할을 하며, 어떤 상황에서 사용될까요?',
    options: [
      '동기화는 프로세스와 스레드 간의 통신을 위한 메커니즘으로, 주로 파일 입출력에 사용됩니다. 뮤텍스는 자원 공유를 위한 동기화 도구로, 주로 데이터베이스 관리 시스템에서 사용됩니다.',
      '동기화는 병렬 처리 환경에서 데이터 일관성을 유지하기 위한 메커니즘으로, 뮤텍스는 공유 자원에 대한 접근을 제어하기 위한 도구로, 다중 스레드 환경에서 사용됩니다.',
      '동기화는 네트워크 통신에 사용되며, 뮤텍스는 주로 파일 시스템 관리에 사용됩니다.',
      '동기화와 뮤텍스는 서로 상호 배타적인 역할을 하며, 상황에 따라 어떤 것을 사용할지는 개발자의 선택에 달려 있습니다.',
    ],
    correct_answer: 1,
    answer_description:
      '동기화(Synchronization)는 병렬 처리 환경에서 데이터 일관성을 유지하기 위한 메커니즘으로, 뮤텍스(Mutex)는 공유 자원에 대한 접근을 제어하기 위한 도구로, 다중 스레드 환경에서 사용됩니다. 뮤텍스를 사용하여 여러 스레드가 동시에 공유 자원에 접근하지 못하도록 보호할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '프로세스 간 통신(Interprocess Communication, IPC)은 무엇이며, 어떤 상황에서 사용될까요?',
    options: [
      'IPC는 주로 파일 시스템과 관련된 작업을 위해 사용되며, 데이터의 영속성을 보장하기 위한 메커니즘입니다.',
      'IPC는 프로세스 간 데이터 공유 및 통신을 위한 메커니즘으로, 주로 다중 프로세스 환경에서 사용됩니다.',
      'IPC는 프로세스 간 네트워크 통신을 위한 메커니즘으로, 주로 데이터 전송과 관련된 작업에 사용됩니다.',
      'IPC는 주로 프로세스 간 자원 경쟁을 해결하기 위해 사용되며, 주로 데이터베이스 관리 시스템에서 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '프로세스 간 통신(Interprocess Communication, IPC)은 프로세스 간 데이터 공유 및 통신을 위한 메커니즘으로, 다중 프로세스 환경에서 사용됩니다. IPC를 사용하여 서로 다른 프로세스가 데이터를 주고받거나 동기화할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '동적 링크(Shared Libraries)는 어떤 역할을 하며, 어떤 상황에서 사용될까요?',
    options: [
      '동적 링크는 컴파일된 프로그램과 관련된 라이브러리를 포함하는 메커니즘으로, 주로 실행 파일의 크기를 줄이기 위해 사용됩니다.',
      '동적 링크는 런타임에 필요한 라이브러리를 로드하는 메커니즘으로, 주로 코드의 재사용성을 높이고 메모리 공유를 통해 시스템 자원을 효율적으로 사용하기 위해 사용됩니다.',
      '동적 링크는 주로 파일 시스템과 관련된 작업을 위해 사용되며, 파일의 압축 및 해제에 사용됩니다.',
      '동적 링크는 주로 데이터베이스 관리 시스템에서 사용되며, 데이터 액세스 및 쿼리 작업에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '동적 링크(Shared Libraries)는 런타임에 필요한 라이브러리를 로드하는 메커니즘으로, 코드의 재사용성을 높이고 메모리 공유를 통해 시스템 자원을 효율적으로 사용하기 위해 사용됩니다. 동적 링크를 통해 여러 프로그램이 동일한 라이브러리를 공유하여 메모리를 절약하고 유지 보수성을 높일 수 있습니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '프로세스 스케줄링(Process Scheduling)은 무엇이며, 어떤 목적으로 사용될까요?',
    options: [
      '프로세스 스케줄링은 시스템의 동시 실행 가능한 프로세스를 관리하고, CPU 시간을 각 프로세스에 공정하게 할당하기 위한 메커니즘으로, 주로 다중 프로세스 환경에서 사용됩니다.',
      '프로세스 스케줄링은 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업의 성능을 향상시키기 위해 사용됩니다.',
      '프로세스 스케줄링은 파일 시스템과 관련된 작업을 위해 사용되며, 파일 액세스 및 관리에 사용됩니다.',
      '프로세스 스케줄링은 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '프로세스 스케줄링(Process Scheduling)은 시스템의 동시 실행 가능한 프로세스를 관리하고, CPU 시간을 각 프로세스에 공정하게 할당하기 위한 메커니즘으로, 다중 프로세스 환경에서 사용됩니다. 스케줄링을 통해 CPU 자원을 효율적으로 활용하고 프로세스 간의 공정한 실행을 보장합니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question: '파일 시스템(File System)은 무엇이며, 어떤 목적으로 사용될까요?',
    options: [
      '파일 시스템은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 저장 및 전송에 사용됩니다.',
      '파일 시스템은 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
      '파일 시스템은 주로 디스크와 관련된 작업을 위한 메커니즘으로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
      '파일 시스템은 주로 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업을 위해 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '파일 시스템(File System)은 주로 디스크와 관련된 작업을 위한 메커니즘으로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다. 파일 시스템을 통해 데이터를 영구적으로 저장하고 관리할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '메모리 관리(Memory Management)는 어떤 역할을 하며, 어떤 목적으로 사용될까요?',
    options: [
      '메모리 관리는 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업의 성능을 향상시키기 위해 사용됩니다.',
      '메모리 관리는 주로 파일 시스템과 관련된 작업을 위한 메커니즘으로, 파일의 액세스 및 저장에 사용됩니다.',
      '메모리 관리는 주로 프로세스의 가상 메모리를 관리하고, 물리적 메모리 자원을 효율적으로 할당하기 위한 메커니즘으로, 프로세스 및 시스템 안정성을 유지하는 데 사용됩니다.',
      '메모리 관리는 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '메모리 관리(Memory Management)는 주로 프로세스의 가상 메모리를 관리하고, 물리적 메모리 자원을 효율적으로 할당하기 위한 메커니즘으로, 프로세스 및 시스템 안정성을 유지하는 데 사용됩니다. 메모리 관리를 통해 프로세스 간 메모리 충돌을 방지하고 효율적인 자원 활용이 가능합니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '네트워크 프로그래밍(Network Programming)은 무엇이며, 어떤 목적으로 사용될까요?',
    options: [
      '네트워크 프로그래밍은 주로 메모리 관리를 위한 메커니즘으로, 데이터 저장 및 관리에 사용됩니다.',
      '네트워크 프로그래밍은 주로 파일 시스템과 관련된 작업을 위한 메커니즘으로, 파일의 액세스 및 저장에 사용됩니다.',
      '네트워크 프로그래밍은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송과 원격 서비스에 사용됩니다.',
      '네트워크 프로그래밍은 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '네트워크 프로그래밍(Network Programming)은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송과 원격 서비스에 사용됩니다. 네트워크 프로그래밍을 통해 서로 다른 시스템 간 데이터 통신 및 서비스 제공이 가능합니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '시스템 보안(System Security)은 무엇이며, 어떤 목적으로 사용될까요?',
    options: [
      '시스템 보안은 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
      '시스템 보안은 주로 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업의 성능을 향상시키기 위해 사용됩니다.',
      '시스템 보안은 시스템 자원과 데이터를 외부 위협으로부터 보호하기 위한 메커니즘으로, 시스템 및 데이터의 무결성과 기밀성을 유지하는 데 사용됩니다.',
      '시스템 보안은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송과 원격 서비스에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '시스템 보안(System Security)은 시스템 자원과 데이터를 외부 위협으로부터 보호하기 위한 메커니즘으로, 시스템 및 데이터의 무결성과 기밀성을 유지하는 데 사용됩니다. 시스템 보안을 통해 데이터 유출, 악의적인 공격, 시스템 손상과 같은 위협을 방지할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '시스템 호출(System Call)은 어떻게 작동하며, 프로그램이 시스템 호출을 사용하는 예시는 어떤 것이 있나요?',
    options: [
      "시스템 호출은 일반적으로 사용자 프로그램이 직접 호출하는 것이 아니라, 운영 체제 커널에 의해 수행됩니다. 예를 들어, 파일 입출력을 위해 'open' 시스템 호출을 사용하거나, 프로세스를 생성하기 위해 'fork' 시스템 호출을 사용할 수 있습니다.",
      "시스템 호출은 사용자 프로그램이 직접 호출하여 실행되며, 예를 들어 파일을 복사하는 프로그램에서 'copy_file()' 함수를 호출하는 것이 시스템 호출의 예시입니다.",
      '시스템 호출은 주로 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업의 성능을 향상시키기 위해 사용됩니다.',
      '시스템 호출은 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "시스템 호출(System Call)은 일반적으로 사용자 프로그램이 직접 호출하는 것이 아니라, 운영 체제 커널에 의해 수행됩니다. 예를 들어, 파일 입출력을 위해 'open' 시스템 호출을 사용하거나, 프로세스를 생성하기 위해 'fork' 시스템 호출을 사용할 수 있습니다.",
  },
  {
    category: 'Computer Engineering/System Programming',
    question: '파일 디스크립터(File Descriptor)는 무엇이며, 어떻게 사용되나요?',
    options: [
      '파일 디스크립터는 파일의 이름과 경로를 나타내는 고유한 식별자로, 파일 시스템에서 사용됩니다.',
      '파일 디스크립터는 프로세스가 열린 파일을 추적하고 관리하는 데 사용되는 정수 값입니다. 주로 파일 입출력 함수에서 파일을 식별하는 데 사용됩니다.',
      '파일 디스크립터는 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 수신에 사용됩니다.',
      '파일 디스크립터는 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '파일 디스크립터(File Descriptor)는 프로세스가 열린 파일을 추적하고 관리하는 데 사용되는 정수 값입니다. 파일 입출력 함수에서 파일을 식별하는 데 주로 사용되며, 파일을 열고 읽고 쓰고 닫는 데 필요한 핵심 요소 중 하나입니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '컴파일러(Compiler)와 어셈블러(Assembler)는 각각 어떤 역할을 하며, 어떤 프로그래밍 단계에서 사용될까요?',
    options: [
      '컴파일러는 소스 코드를 기계어로 번역하는 도구로, 주로 실행 파일을 생성하는 데 사용됩니다. 어셈블러는 기계어 코드를 어셈블리어로 변환하는 도구로, 주로 소스 코드를 작성하는 데 사용됩니다.',
      '컴파일러와 어셈블러는 모두 실행 파일을 생성하는 도구로, 어셈블러는 컴파일된 코드를 메모리에 로드하는 데 사용됩니다.',
      '컴파일러는 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다. 어셈블러는 파일 시스템 관리에 사용됩니다.',
      '컴파일러와 어셈블러는 모두 네트워크 통신을 위한 도구로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '컴파일러(Compiler)는 소스 코드를 기계어로 번역하는 도구로, 주로 실행 파일을 생성하는 데 사용됩니다. 어셈블러(Assembler)는 기계어 코드를 어셈블리어로 변환하는 도구로, 주로 소스 코드를 작성하는 데 사용됩니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question: '시그널(Signal)은 무엇이며, 어떤 상황에서 사용될까요?',
    options: [
      '시그널은 주로 데이터베이스 관리 시스템에서 사용되며, 데이터 검색 및 쿼리 작업의 성능을 향상시키기 위해 사용됩니다.',
      '시그널은 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
      '시그널은 주로 파일 시스템과 관련된 작업을 위해 사용되며, 파일의 압축 및 해제에 사용됩니다.',
      '시그널은 프로세스나 커널에서 발생하는 이벤트나 알림을 나타내는 메커니즘으로, 예외 처리나 프로세스 간 상호작용에 사용됩니다.',
    ],
    correct_answer: 3,
    answer_description:
      '시그널(Signal)은 프로세스나 커널에서 발생하는 이벤트나 알림을 나타내는 메커니즘으로, 예외 처리나 프로세스 간 상호작용에 사용됩니다. 예를 들어, 프로세스가 다른 프로세스에게 중단 요청을 보내거나, 예외 상황(예: 분할 오류)을 처리하는 데 시그널이 사용됩니다.',
  },
  {
    category: 'Computer Engineering/System Programming',
    question:
      '캐시 메모리(Cache Memory)는 어떤 역할을 하며, 어떤 상황에서 사용될까요?',
    options: [
      '캐시 메모리는 주로 디스크와 관련된 작업을 위해 사용되며, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
      '캐시 메모리는 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
      '캐시 메모리는 주로 메인 메모리와 프로세서(CPU) 간의 속도 차이를 완화하고 데이터 액세스 속도를 향상시키기 위해 사용됩니다.',
      '캐시 메모리는 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '캐시 메모리(Cache Memory)는 주로 메인 메모리와 프로세서(CPU) 간의 속도 차이를 완화하고 데이터 액세스 속도를 향상시키기 위해 사용됩니다. 캐시는 데이터를 더 빠르게 액세스할 수 있도록 저장하는 역할을 하며, 주로 프로세서의 성능 향상을 위해 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Database',
    question:
      '데이터베이스 관리 시스템(DBMS)은 무엇이며, 어떤 목적으로 사용되나요?',
    options: [
      'DBMS는 주로 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
      'DBMS는 주로 메인 메모리 관리를 위한 도구로, 메모리 자원의 할당과 해제에 사용됩니다.',
      'DBMS는 데이터를 구조화하고 저장하며, 데이터의 효율적인 관리와 액세스를 제공하기 위해 사용됩니다.',
      'DBMS는 주로 파일 시스템과 관련된 작업을 위해 사용되며, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '데이터베이스 관리 시스템(DBMS)은 데이터를 구조화하고 저장하며, 데이터의 효율적인 관리와 액세스를 제공하기 위해 사용됩니다. DBMS를 사용하면 데이터베이스를 생성, 관리, 업데이트, 검색 및 삭제할 수 있으며, 데이터의 일관성과 무결성을 유지할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/Database',
    question:
      'SQL(Structured Query Language)은 무엇이며, 어떤 목적으로 사용되나요?',
    options: [
      'SQL은 주로 파일 시스템 관리를 위한 도구로, 파일의 압축 및 해제에 사용됩니다.',
      'SQL은 데이터베이스에서 데이터를 검색, 삽입, 업데이트 및 삭제하기 위한 표준 질의 언어로, 데이터베이스 관리 시스템(DBMS)과 상호작용하는 데 사용됩니다.',
      'SQL은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
      'SQL은 프로세스 간 통신을 위한 메커니즘으로, 데이터 공유와 메시징에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      'SQL(Structured Query Language)은 데이터베이스에서 데이터를 검색, 삽입, 업데이트 및 삭제하기 위한 표준 질의 언어로, 데이터베이스 관리 시스템(DBMS)과 상호작용하는 데 사용됩니다. SQL을 사용하여 데이터베이스에서 원하는 정보를 추출하거나 데이터를 조작할 수 있습니다.',
  },

  {
    category: 'Computer Engineering/Database',
    question:
      '관계형 데이터베이스(Relational Database)는 어떤 특징을 가지고 있으며, 어떤 상황에서 사용될까요?',
    options: [
      '관계형 데이터베이스는 데이터를 계층적으로 저장하며, 주로 계층형 데이터 구조를 다루는 데 사용됩니다.',
      '관계형 데이터베이스는 테이블 형태로 데이터를 저장하며, 데이터 간의 관계를 정의하고 SQL을 사용하여 데이터를 조회하는 데 사용됩니다.',
      '관계형 데이터베이스는 주로 파일 시스템 관리를 위한 도구로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
      '관계형 데이터베이스는 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '관계형 데이터베이스(Relational Database)는 테이블 형태로 데이터를 저장하며, 데이터 간의 관계를 정의하고 SQL을 사용하여 데이터를 조회하는 데 사용됩니다. 관계형 데이터베이스는 대부분의 업무 응용 프로그램과 데이터 분석에 널리 사용됩니다.',
  },
  {
    category: 'Computer Engineering/Database',
    question:
      'NoSQL 데이터베이스(NoSQL Database)는 무엇이며, 어떤 특징을 가지고 있나요?',
    options: [
      'NoSQL 데이터베이스는 주로 데이터를 계층적으로 저장하며, 계층형 데이터 구조를 다루는 데 사용됩니다.',
      'NoSQL 데이터베이스는 관계형 데이터베이스와 달리 테이블이나 스키마 없이 다양한 형식의 데이터를 저장하고 쿼리하는 데 사용됩니다.',
      'NoSQL 데이터베이스는 주로 파일 시스템 관리를 위한 도구로, 파일의 압축 및 해제에 사용됩니다.',
      'NoSQL 데이터베이스는 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      'NoSQL 데이터베이스(NoSQL Database)는 관계형 데이터베이스와 달리 테이블이나 스키마 없이 다양한 형식의 데이터를 저장하고 쿼리하는 데 사용됩니다. NoSQL 데이터베이스는 유연성과 확장성을 강조하며, 대용량 데이터 및 실시간 데이터 처리에 적합합니다.',
  },
  {
    category: 'Computer Engineering/Database',
    question:
      '데이터베이스 인덱스(Database Index)는 무엇이며, 어떤 목적으로 사용되나요?',
    options: [
      '데이터베이스 인덱스는 데이터베이스 테이블의 데이터를 압축하여 저장하며, 데이터 저장 공간을 최적화하는 데 사용됩니다.',
      '데이터베이스 인덱스는 데이터 검색 성능을 향상시키기 위해 사용되며, 특정 열(필드)의 값을 빠르게 찾을 수 있도록 합니다.',
      '데이터베이스 인덱스는 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
      '데이터베이스 인덱스는 주로 파일 시스템 관리를 위한 도구로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '데이터베이스 인덱스(Database Index)는 데이터 검색 성능을 향상시키기 위해 사용됩니다. 특정 열(필드)의 값을 빠르게 찾을 수 있도록 하며, 데이터베이스 쿼리의 속도를 향상시키는 데 기여합니다.',
  },
  {
    category: 'Computer Engineering/Database/Advance',
    question: '트랜잭션(Transaction)은 무엇이며, 어떤 역할을 하고 있나요?',
    options: [
      '트랜잭션은 데이터베이스에 새로운 데이터를 추가하기 위한 작업을 나타내며, 데이터베이스에 새로운 레코드를 삽입하는 데 사용됩니다.',
      '트랜잭션은 데이터베이스에서 여러 작업을 논리적으로 묶은 작업 단위로, 일련의 데이터베이스 작업을 원자적으로 수행하고 성공 또는 실패로 완료합니다.',
      '트랜잭션은 데이터베이스 테이블 간의 관계를 정의하고, 데이터를 쿼리하여 정보를 추출하는 데 사용됩니다.',
      '트랜잭션은 데이터베이스에서 데이터의 수정 및 삭제 작업을 수행하는 데 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '트랜잭션(Transaction)은 데이터베이스에서 여러 작업을 논리적으로 묶은 작업 단위로, 일련의 데이터베이스 작업을 원자적으로 수행하고 성공 또는 실패로 완료합니다. 트랜잭션은 데이터베이스의 일관성과 무결성을 유지하기 위해 중요한 역할을 합니다.',
  },
  {
    category: 'Computer Engineering/Database/Advance',
    question:
      '데이터베이스 복제(Database Replication)는 무엇이며, 어떤 상황에서 사용될까요?',
    options: [
      '데이터베이스 복제는 데이터베이스의 스키마를 변경하고 관리하는 데 사용되며, 데이터 모델을 수정하거나 새로운 필드를 추가하는 데 활용됩니다.',
      '데이터베이스 복제는 데이터베이스의 백업을 생성하고, 데이터 손실을 방지하기 위해 주기적으로 사용됩니다.',
      '데이터베이스 복제는 데이터베이스의 사본을 생성하여 여러 위치 또는 서버 간에 데이터를 동기화하고 가용성을 향상시키기 위해 사용됩니다.',
      '데이터베이스 복제는 데이터베이스 테이블 간의 관계를 정의하고, 데이터를 쿼리하여 정보를 추출하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '데이터베이스 복제(Database Replication)는 데이터베이스의 사본을 생성하여 여러 위치 또는 서버 간에 데이터를 동기화하고 가용성을 향상시키기 위해 사용됩니다. 이를 통해 데이터베이스 시스템의 신뢰성을 높이고 부하 분산을 달성할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/Database/Advance',
    question:
      '데이터베이스 샤딩(Database Sharding)은 무엇이며, 어떤 이점을 제공하나요?',
    options: [
      '데이터베이스 샤딩은 데이터베이스의 스키마를 변경하고 관리하는 데 사용되며, 데이터 모델을 수정하거나 새로운 필드를 추가하는 데 활용됩니다.',
      '데이터베이스 샤딩은 데이터베이스 테이블 간의 관계를 정의하고, 데이터를 쿼리하여 정보를 추출하는 데 사용됩니다.',
      '데이터베이스 샤딩은 대용량 데이터베이스를 여러 작은 파티션(샤드)으로 분할하여 데이터베이스 성능을 향상시키고 확장성을 제공합니다.',
      '데이터베이스 샤딩은 데이터베이스의 백업을 생성하고, 데이터 손실을 방지하기 위해 주기적으로 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      '데이터베이스 샤딩(Database Sharding)은 대용량 데이터베이스를 여러 작은 파티션(샤드)으로 분할하여 데이터베이스 성능을 향상시키고 확장성을 제공합니다. 이를 통해 데이터베이스 시스템이 더 많은 데이터와 요청을 처리할 수 있습니다.',
  },
  {
    category: 'Computer Engineering/Database/Advance',
    question:
      '빅데이터(Big Data)와 데이터 웨어하우스(Data Warehouse)는 어떤 개념이며, 어떻게 다른가요?',
    options: [
      '빅데이터는 대규모 및 다양한 종류의 데이터를 처리하고 분석하는 데 사용되며, 데이터 웨어하우스는 작은 규모의 정형 데이터를 저장하는 데 사용됩니다.',
      '빅데이터와 데이터 웨어하우스는 동일한 개념으로, 대규모 데이터 저장소를 나타냅니다.',
      '빅데이터는 데이터 분석을 위해 대규모 데이터를 저장하고 처리하는 데 사용되며, 데이터 웨어하우스는 데이터를 저장하고 보관하기 위해 사용됩니다.',
      '빅데이터와 데이터 웨어하우스는 모두 파일 시스템 관리를 위한 도구로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '빅데이터(Big Data)는 대규모 및 다양한 종류의 데이터를 처리하고 분석하는 데 사용되며, 데이터 웨어하우스(Data Warehouse)는 주로 작은 규모의 정형 데이터를 저장하고 분석하기 위해 사용됩니다. 빅데이터는 대부분의 비정형 데이터를 다루며, 데이터의 실시간 처리와 분석에 중점을 둡니다.',
  },
  {
    category: 'Computer Engineering/Database/Advance',
    question:
      '데이터베이스 보안(Database Security)은 왜 중요하며, 어떤 보안 조치가 필요한가요?',
    options: [
      '데이터베이스 보안은 주로 데이터베이스의 성능을 향상시키기 위한 조치로, 데이터베이스 쿼리의 실행 속도를 최적화합니다.',
      '데이터베이스 보안은 데이터의 기밀성, 무결성 및 가용성을 보호하기 위한 조치로, 액세스 제어, 암호화, 감사 및 감시가 필요합니다.',
      '데이터베이스 보안은 데이터의 백업 및 복원을 관리하기 위한 조치로, 데이터 손실을 방지합니다.',
      '데이터베이스 보안은 주로 파일 시스템 관리를 위한 도구로, 파일의 생성, 읽기, 쓰기, 삭제 등 파일 관리에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '데이터베이스 보안(Database Security)은 데이터의 기밀성, 무결성 및 가용성을 보호하기 위한 조치로, 액세스 제어, 암호화, 감사 및 감시가 필요합니다. 데이터베이스 보안은 중요한 비즈니스 정보를 보호하고 불법 액세스와 데이터 유출을 방지하는 데 필수적입니다.',
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript 객체의 속성(Property)과 메서드(Method)는 어떤 차이점이 있나요? 예시를 들어 설명해주세요.',
    options: [
      "속성은 객체에 저장된 데이터 값을 나타내며, 메서드는 객체의 동작을 나타냅니다. 예를 들어, 객체의 '이름' 속성은 이름 값을 가지고, '출력' 메서드는 이름을 화면에 출력합니다.",
      "속성과 메서드는 모두 객체에 저장된 데이터 값을 나타냅니다. 예를 들어, 객체의 '이름' 속성과 '출력' 메서드는 모두 이름 값을 가지고 있습니다.",
      "속성은 주로 객체의 상태를 나타내며, 메서드는 객체의 동작을 나타냅니다. 예를 들어, 객체의 '색상' 속성은 색상 값을 가지고, '변경' 메서드는 색상을 변경합니다.",
      "속성은 주로 메서드 내에서 사용되며, 메서드는 주로 객체의 상태를 나타내는 데 사용됩니다. 예를 들어, '계산' 메서드 내에서 사용되는 '값' 속성이 있을 수 있습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript 객체의 속성(Property)은 객체에 저장된 데이터 값을 나타내며, 메서드(Method)는 객체의 동작을 나타냅니다. 예를 들어, 객체의 '이름' 속성은 이름 값을 가지고, '출력' 메서드는 이름을 화면에 출력하는 동작을 수행합니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 어떻게 생성할 수 있으며, 다양한 객체 생성 방법에는 어떤 것들이 있나요?',
    options: [
      "JavaScript에서 객체를 생성하려면 'new Object()' 생성자를 사용합니다. 또한 객체 리터럴 문법을 사용하여 '{}'로 빈 객체를 생성할 수 있습니다.",
      "JavaScript에서 객체를 생성하려면 'createObject()' 함수를 사용합니다. 또한 객체 리터럴 문법을 사용하여 '[]'로 빈 객체를 생성할 수 있습니다.",
      "JavaScript에서 객체를 생성하려면 'new Object()' 생성자를 사용합니다. 또한 객체 리터럴 문법을 사용하여 '()'로 빈 객체를 생성할 수 있습니다.",
      "JavaScript에서 객체를 생성하려면 'createObject()' 함수를 사용합니다. 또한 객체 리터럴 문법을 사용하여 '{}'로 빈 객체를 생성할 수 있습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 객체를 생성하려면 'new Object()' 생성자를 사용하거나 객체 리터럴 문법을 사용하여 '{}'로 빈 객체를 생성할 수 있습니다. 또한 다른 객체 생성 방법으로 생성자 함수, 클래스 등도 사용할 수 있습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체에 어떻게 프로퍼티(속성)를 추가하고 삭제할 수 있나요? 각각의 예시를 들어주세요.',
    options: [
      "프로퍼티를 추가하려면 객체의 이름과 값을 지정하여 할당하고, 'delete' 키워드를 사용하여 프로퍼티를 삭제합니다. 예를 들어, 'person.name = 'Alice''로 프로퍼티를 추가하고, 'delete person.name'으로 프로퍼티를 삭제할 수 있습니다.",
      "프로퍼티를 추가하려면 'addProperty()' 함수를 사용하고, 'removeProperty()' 함수를 사용하여 프로퍼티를 삭제합니다. 예를 들어, 'addProperty(person, 'name', 'Alice')'로 프로퍼티를 추가하고, 'removeProperty(person, 'name')'으로 프로퍼티를 삭제할 수 있습니다.",
      "프로퍼티를 추가하려면 객체의 이름과 값을 지정하여 할당하고, 'remove' 키워드를 사용하여 프로퍼티를 삭제합니다. 예를 들어, 'person.name = 'Alice''로 프로퍼티를 추가하고, 'remove person.name'으로 프로퍼티를 삭제할 수 있습니다.",
      "프로퍼티를 추가하려면 'setProperty()' 함수를 사용하고, 'deleteProperty()' 함수를 사용하여 프로퍼티를 삭제합니다. 예를 들어, 'setProperty(person, 'name', 'Alice')'로 프로퍼티를 추가하고, 'deleteProperty(person, 'name')'으로 프로퍼티를 삭제할 수 있습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 객체에 프로퍼티(속성)를 추가하려면 객체의 이름과 값을 지정하여 할당하고, 'delete' 키워드를 사용하여 프로퍼티를 삭제할 수 있습니다. 예를 들어, 'person.name = 'Alice''로 프로퍼티를 추가하고, 'delete person.name'으로 프로퍼티를 삭제할 수 있습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 중첩(Nested)하는 것은 어떤 의미이며, 언제 사용되나요? 예시를 들어 설명해주세요.',
    options: [
      "객체 중첩은 객체 내부에 또 다른 객체를 포함하는 것을 의미합니다. 이는 복잡한 데이터 구조를 표현하거나, 객체 간의 계층적인 관계를 나타낼 때 사용됩니다. 예를 들어, 주소 정보를 포함하는 'person' 객체를 생성하고 'person.address'에 주소 관련 정보를 저장하는 것이 중첩입니다.",
      "객체 중첩은 객체의 속성과 메서드를 구분하는 것을 의미합니다. 이는 코드를 더 읽기 쉽게 만들고 객체의 구조를 정리할 때 사용됩니다. 예를 들어, 'person' 객체 내에 'person.address' 메서드를 정의하여 주소 관련 동작을 분리할 수 있습니다.",
      "객체 중첩은 객체의 속성과 메서드를 그룹화하는 것을 의미합니다. 이는 코드를 구조화하고 유지보수를 용이하게 만들 때 사용됩니다. 예를 들어, 'person' 객체 내에 'person.address' 속성을 포함하여 주소 정보를 그룹화할 수 있습니다.",
      "객체 중첩은 주로 상속을 구현하기 위해 사용되며, 객체 간의 계층 구조를 만들 때 사용됩니다. 예를 들어, 'person' 객체를 상속하여 'student' 객체를 생성하고, 'student.address'에 주소 관련 정보를 저장하는 것이 중첩과 상속의 조합입니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 객체를 중첩(Nested)하는 것은 객체 내부에 또 다른 객체를 포함하는 것을 의미합니다. 이는 복잡한 데이터 구조를 표현하거나, 객체 간의 계층적인 관계를 나타낼 때 사용됩니다. 예를 들어, 주소 정보를 포함하는 'person' 객체를 생성하고 'person.address'에 주소 관련 정보를 저장하는 것이 중첩입니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 생성하는 방법은 어떤 것들이 있으며, 각 방법의 차이점은 무엇인가요?',
    options: [
      "객체는 'createObject()' 함수를 호출하여 생성하며, 이 함수는 객체의 속성과 메서드를 정의합니다.",
      "객체는 중괄호 '{}'를 사용하여 리터럴 객체를 생성하거나, 'new Object()' 생성자 함수를 사용하여 생성할 수 있습니다.",
      "객체는 'class' 키워드를 사용하여 클래스를 정의하고 'new' 키워드를 사용하여 클래스의 인스턴스를 생성합니다.",
      "객체는 'function' 키워드를 사용하여 함수를 정의하고 'new' 키워드를 사용하여 함수의 인스턴스를 생성합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체를 생성하는 방법은 중괄호 '{}'를 사용하여 리터럴 객체를 생성하거나, 'new Object()' 생성자 함수를 사용하여 생성할 수 있습니다. 두 방법의 결과는 동일하며, 객체의 속성과 메서드를 추가하거나 수정할 수 있습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript 객체의 속성과 메서드는 어떻게 정의하며, 어떻게 액세스하나요?',
    options: [
      "객체의 속성은 'get' 및 'set' 메서드를 사용하여 정의하며, 액세스할 때는 'obj.getProperty()' 및 'obj.setProperty(value)' 형태로 사용합니다.",
      "객체의 속성은 객체 리터럴 내부에서 'key: value' 형태로 정의하며, 액세스할 때는 'obj.key' 또는 'obj['key']' 형태로 사용합니다.",
      "객체의 메서드는 'function' 키워드를 사용하여 정의하며, 액세스할 때는 'obj.method()' 형태로 사용합니다.",
      "객체의 속성은 'addProperty()' 메서드를 사용하여 정의하며, 액세스할 때는 'obj.getProperty()' 형태로 사용합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript 객체의 속성은 객체 리터럴 내부에서 'key: value' 형태로 정의하며, 액세스할 때는 'obj.key' 또는 'obj['key']' 형태로 사용합니다. 객체의 메서드는 'function' 키워드를 사용하여 정의하며, 액세스할 때는 'obj.method()' 형태로 사용합니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 프로토타입(Prototype)은 무엇이며, 어떤 역할을 하나요?',
    options: [
      '프로토타입은 객체의 생성자 함수에 연결된 특수한 메서드로, 객체의 속성을 초기화하는 역할을 합니다.',
      '프로토타입은 객체가 다른 객체로부터 상속받을 수 있는 속성과 메서드를 정의하는 객체입니다. 모든 객체는 프로토타입을 가집니다.',
      '프로토타입은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
      '프로토타입은 객체의 생성 시에만 사용되며, 객체가 생성된 이후에는 영향을 미치지 않습니다.',
    ],
    correct_answer: 1,
    answer_description:
      '프로토타입(Prototype)은 객체가 다른 객체로부터 상속받을 수 있는 속성과 메서드를 정의하는 객체입니다. 모든 객체는 프로토타입을 가지며, 프로토타입 체인을 통해 상위 객체의 속성과 메서드를 액세스할 수 있습니다.',
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체는 어떻게 다른 객체로부터 상속받을 수 있으며, 어떤 장점이 있나요?',
    options: [
      "객체는 'inheritFrom()' 함수를 사용하여 다른 객체로부터 상속받으며, 상속된 속성과 메서드는 모두 복사됩니다.",
      'JavaScript에서 객체는 프로토타입 체인을 통해 다른 객체의 프로퍼티와 메서드를 상속받습니다. 이로써 코드 재사용과 구조화가 용이해집니다.',
      "객체는 'extends' 키워드를 사용하여 다른 객체로부터 상속받으며, 상속된 메서드는 오버라이드할 수 없습니다.",
      "객체는 'prototype' 속성을 사용하여 다른 객체로부터 상속받으며, 상속된 속성과 메서드는 읽기 전용입니다.",
    ],
    correct_answer: 1,
    answer_description:
      'JavaScript에서 객체는 프로토타입 체인을 통해 다른 객체의 프로퍼티와 메서드를 상속받습니다. 이로써 코드 재사용과 구조화가 용이해지며, 상속된 속성 및 메서드를 수정하거나 확장할 수 있습니다.',
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 생성하는 데 사용되는 생성자 함수(Constructor Function)는 무엇이며, 어떻게 정의하고 사용하나요?',
    options: [
      "생성자 함수는 객체를 초기화하기 위한 특수한 함수로, 'function' 키워드를 사용하여 정의하고 'new' 키워드를 사용하여 호출합니다.",
      "생성자 함수는 'createObject()' 함수를 사용하여 정의하며, 객체를 생성하고 초기화하는 데 사용됩니다.",
      "생성자 함수는 'class' 키워드를 사용하여 정의하고 'new' 키워드를 사용하여 호출합니다. 모든 객체는 생성자 함수를 사용하여 생성됩니다.",
      "생성자 함수는 'prototype' 속성을 사용하여 객체를 초기화하며, 'new' 키워드 없이 직접 호출합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 생성자 함수(Constructor Function)는 객체를 초기화하기 위한 특수한 함수로, 'function' 키워드를 사용하여 정의하고 'new' 키워드를 사용하여 호출합니다. 생성자 함수를 사용하여 객체를 생성하고 초기화할 수 있습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체의 프로퍼티를 접근하는 데에는 어떤 방법들이 있으며, 이들 간의 차이점은 무엇인가요?',
    options: [
      "객체 프로퍼티는 'accessProperty()' 메서드를 사용하여 접근하며, 이 방법은 모든 프로퍼티에 대해 동일하게 작동합니다.",
      "객체 프로퍼티는 점 표기법('obj.property')과 대괄호 표기법('obj['property']')을 사용하여 접근할 수 있으며, 점 표기법은 프로퍼티 이름에 공백이나 특수 문자가 없을 때 사용됩니다.",
      "객체 프로퍼티는 오직 대괄호 표기법('obj['property']')을 사용하여만 접근할 수 있으며, 점 표기법은 지원되지 않습니다.",
      "객체 프로퍼티는 'getProperty()' 메서드를 사용하여 접근하며, 이 방법은 프로퍼티 이름을 문자열로 지정해야 합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체의 프로퍼티에 접근하는 방법으로는 점 표기법('obj.property')과 대괄호 표기법('obj['property']')이 있습니다. 점 표기법은 프로퍼티 이름에 공백이나 특수 문자가 없을 때 사용되며, 대괄호 표기법은 모든 경우에 사용할 수 있습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 복제하거나 참조할 때 무엇을 고려해야 하며, 어떤 차이가 있나요?',
    options: [
      '객체는 항상 참조되며, 객체를 복제할 수 없습니다. 따라서 객체를 수정하면 모든 참조에서 동일한 변경 내용을 볼 수 있습니다.',
      "객체를 복제하려면 'clone()' 메서드를 사용하며, 복제된 객체는 원본 객체와 완전히 독립적입니다. 변경 내용이 서로 영향을 주지 않습니다.",
      "객체를 복제하려면 'copyObject()' 함수를 사용하며, 복제된 객체는 원본 객체와 연결되어 있어 변경 내용이 공유됩니다.",
      "객체를 복제하려면 'new Object()' 생성자 함수를 사용하여 새로운 객체를 생성하며, 이 새 객체는 원본 객체와 독립적입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체를 복제하려면 'clone()' 메서드를 사용하거나 다른 방식으로 복제 로직을 구현해야 합니다. 복제된 객체는 원본 객체와 완전히 독립적이며, 변경 내용이 서로 영향을 주지 않습니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체의 속성을 순회하려면 어떤 방법을 사용하며, 어떤 주의사항이 있나요?',
    options: [
      "객체의 속성을 순회하려면 'for...in' 루프를 사용하며, 순회할 때 속성의 순서는 보장되지 않습니다.",
      "객체의 속성을 순회하려면 'forEach()' 메서드를 사용하며, 순회할 때 속성의 순서는 항상 고정됩니다.",
      "객체의 속성을 순회하려면 'map()' 함수를 사용하며, 순회할 때 순서는 프로퍼티 추가 순서와 동일합니다.",
      "객체의 속성을 순회하려면 'while' 루프를 사용하며, 순서는 객체의 키 값 순서대로 보장됩니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 객체의 속성을 순회할 때 'for...in' 루프를 사용합니다. 하지만 순회할 때 속성의 순서는 보장되지 않으므로 순서가 중요한 경우에는 주의가 필요합니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체의 프로퍼티를 삭제하는 방법은 무엇이며, 삭제 후에 어떤 변화가 발생하나요?',
    options: [
      "객체의 프로퍼티를 삭제하려면 'removeProperty()' 메서드를 사용하며, 삭제 후에 프로퍼티가 완전히 제거됩니다.",
      "객체의 프로퍼티를 삭제하려면 'delete' 키워드를 사용하며, 삭제 후에 프로퍼티가 'undefined'로 설정됩니다.",
      '객체의 프로퍼티는 삭제할 수 없으며, 객체를 새로 생성하여 필요한 변경을 가해야 합니다.',
      "객체의 프로퍼티를 삭제하면 해당 프로퍼티가 빈 문자열('')로 설정되며, 값을 재할당할 수 없습니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체의 프로퍼티를 삭제하려면 'delete' 키워드를 사용합니다. 삭제 후에 프로퍼티가 'undefined'로 설정됩니다. 이로써 프로퍼티는 존재하지 않는 것으로 간주됩니다.",
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript에서 객체를 중첩하여 구조화하는 것은 어떤 이점이 있으며, 어떻게 수행할 수 있나요?',
    options: [
      '객체를 중첩하여 구조화하면 데이터를 더 체계적으로 표현할 수 있으며, 각 객체 내부에 다른 객체를 포함시켜 복잡한 데이터 구조를 만들 수 있습니다.',
      '객체를 중첩하는 것은 권장되지 않으며, 모든 데이터는 최상위 객체에 저장해야 합니다. 중첩된 객체는 성능에 부정적인 영향을 미칩니다.',
      '객체를 중첩하는 것은 메모리를 더 효율적으로 사용하며, 중첩된 객체를 사용할 때에는 별도의 데이터 변환 과정이 필요하지 않습니다.',
      '객체를 중첩하는 것은 코드의 가독성을 저해하며, 객체를 단순하게 유지하는 것이 좋습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서 객체를 중첩하여 구조화하면 데이터를 더 체계적으로 표현하고 복잡한 데이터 구조를 만들 수 있습니다. 중첩된 객체를 사용하여 데이터를 계층적으로 구성할 수 있어 관련 정보를 그룹화하고 유지하기 쉽습니다.',
  },
  {
    category: 'JavaScript/Object Foundations',
    question:
      'JavaScript 객체를 JSON(JavaScript Object Notation) 표기법으로 어떻게 표현하며, 어떤 용도로 사용되나요?',
    options: [
      'JavaScript 객체는 JSON 표기법으로 간단히 문자열로 변환하여 저장하며, 데이터를 파일에 기록할 때 주로 사용됩니다.',
      'JavaScript 객체는 JSON.stringify() 메서드를 사용하여 JSON 형식의 문자열로 변환하며, 데이터 교환 및 전송 시에 사용됩니다.',
      'JavaScript 객체를 JSON 표기법으로 변환하려면 모든 속성을 수동으로 문자열로 변환해야 하며, 번거롭고 오류 가능성이 높습니다.',
      'JavaScript 객체는 JSON 표기법으로 변환할 때 모든 함수와 메서드가 포함되며, 이를 주의해서 처리해야 합니다.',
    ],
    correct_answer: 1,
    answer_description:
      'JavaScript 객체를 JSON(JavaScript Object Notation) 표기법으로 변환하려면 JSON.stringify() 메서드를 사용합니다. 이렇게 변환된 JSON 문자열은 데이터 교환 및 전송 시에 주로 사용되며, 다른 프로그래밍 언어와 호환성이 높아 효과적으로 데이터를 공유할 수 있습니다.',
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체는 어떻게 생성되며, 어떤 요소로 이루어져 있나요?',
    options: [
      "객체는 'createObject()' 함수를 호출하여 생성되며, 속성과 메서드로 이루어져 있습니다.",
      "객체는 중괄호 '{}'를 사용하여 리터럴 객체를 생성하며, 속성과 메서드로 이루어져 있습니다.",
      "객체는 'new Object()' 생성자 함수를 사용하여 생성되며, 속성과 메서드로 이루어져 있습니다.",
      "객체는 'function' 키워드를 사용하여 생성되며, 함수의 로직과 데이터를 포함합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체는 중괄호 '{}'를 사용하여 리터럴 객체를 생성하거나 'new Object()' 생성자 함수를 사용하여 생성됩니다. 이 객체는 속성과 메서드로 이루어져 있습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로토타입(Prototype) 체인은 어떻게 작동하며, 어떤 역할을 하나요?',
    options: [
      '프로토타입 체인은 객체가 자신의 상위 프로토타입을 찾는 과정으로, 상위 프로토타입에서 속성을 찾지 못할 때 계속 상위로 이동합니다.',
      '프로토타입 체인은 객체 간의 관계를 정의하며, 프로토타입 객체는 항상 하위 객체에게 속성을 상속합니다.',
      '프로토타입 체인은 객체의 생성 시에만 사용되며, 객체가 생성된 이후에는 영향을 미치지 않습니다.',
      '프로토타입 체인은 주로 네트워크 통신을 위한 메커니즘으로, 데이터 전송 및 라우팅에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서 프로토타입 체인은 객체가 자신의 상위 프로토타입을 찾는 과정으로, 상위 프로토타입에서 속성을 찾지 못할 때 계속 상위로 이동합니다. 이를 통해 객체 간의 상속 및 속성 공유가 가능합니다.',
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 생성자 함수(Constructor Function)는 무엇이며, 어떻게 사용되나요?',
    options: [
      "생성자 함수는 객체를 초기화하기 위한 특수한 함수로, 'function' 키워드를 사용하여 정의하고 'new' 키워드를 사용하여 호출합니다.",
      "생성자 함수는 객체를 복제하거나 참조하기 위한 함수로, 'copyObject()' 함수를 사용하여 정의하고 호출합니다.",
      "생성자 함수는 'prototype' 속성을 사용하여 객체를 초기화하며, 'new' 키워드 없이 직접 호출합니다.",
      "생성자 함수는 객체의 프로토타입을 변경하는 데 사용되며, 'changePrototype()' 함수를 사용하여 정의하고 호출합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 생성자 함수(Constructor Function)는 객체를 초기화하기 위한 특수한 함수로, 'function' 키워드를 사용하여 정의하고 'new' 키워드를 사용하여 호출합니다. 생성자 함수를 사용하여 객체를 생성하고 초기화할 수 있습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로퍼티를 어떻게 변경하거나 추가할 수 있으며, 어떤 방법이 일반적으로 사용되나요?',
    options: [
      "객체의 프로퍼티는 'setProperty()' 메서드를 사용하여 변경하거나 추가하며, 이 방법이 가장 일반적입니다.",
      "객체의 프로퍼티는 'addProperty()' 메서드를 사용하여 변경하거나 추가하며, 이 방법이 가장 일반적입니다.",
      '객체의 프로퍼티는 직접 접근하여 값을 수정하거나 새로운 속성을 할당하는 방식이 일반적이며, 대괄호 표기법과 점 표기법이 사용됩니다.',
      "객체의 프로퍼티를 변경하거나 추가하려면 'changeProperty()' 함수를 사용하며, 이 함수는 모든 프로퍼티에 대해 작동합니다.",
    ],
    correct_answer: 2,
    answer_description:
      'JavaScript에서 객체의 프로퍼티를 변경하거나 추가하는 일반적인 방법은 직접 접근하여 값을 수정하거나 새로운 속성을 할당하는 것입니다. 이때 대괄호 표기법과 점 표기법이 사용됩니다.',
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로퍼티를 어떻게 삭제하며, 삭제 후에 어떤 변화가 발생하나요?',
    options: [
      "객체의 프로퍼티를 삭제하려면 'removeProperty()' 메서드를 사용하며, 삭제 후에 프로퍼티가 완전히 제거됩니다.",
      "객체의 프로퍼티를 삭제하려면 'delete' 키워드를 사용하며, 삭제 후에 프로퍼티가 'undefined'로 설정됩니다.",
      "객체의 프로퍼티는 삭제할 수 없으며, 프로퍼티 값을 'null'로 설정하여 비활성화할 수 있습니다.",
      "객체의 프로퍼티를 삭제하려면 'clearProperty()' 함수를 사용하며, 이 함수는 프로퍼티 값을 초기화합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체의 프로퍼티를 삭제하려면 'delete' 키워드를 사용합니다. 삭제 후에 프로퍼티가 'undefined'로 설정되며, 이를 통해 프로퍼티는 존재하지 않는 것으로 간주됩니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로퍼티는 어떤 속성을 가질 수 있으며, 주요한 프로퍼티 속성에는 어떤 것들이 있나요?',
    options: [
      "객체의 프로퍼티는 'value', 'enumerable', 'writable', 'configurable' 등의 속성을 가질 수 있으며, 이러한 속성은 프로퍼티의 행동을 정의합니다.",
      "객체의 프로퍼티는 'length', 'type', 'name' 등의 속성을 가질 수 있으며, 이러한 속성은 프로퍼티의 정보를 설명합니다.",
      "객체의 프로퍼티는 'private', 'public', 'protected' 등의 속성을 가질 수 있으며, 이러한 속성은 프로퍼티의 가시성을 지정합니다.",
      "객체의 프로퍼티는 'static', 'dynamic', 'constant' 등의 속성을 가질 수 있으며, 이러한 속성은 프로퍼티의 변경 가능성을 나타냅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 객체의 프로퍼티는 'value', 'enumerable', 'writable', 'configurable' 등의 속성을 가질 수 있습니다. 이러한 속성은 프로퍼티의 값을, 열거 가능 여부, 쓰기 가능 여부, 설정 가능 여부 등을 정의합니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript 객체와 JSON(JavaScript Object Notation)은 어떤 관계가 있으며, 어떻게 서로 변환할 수 있나요?',
    options: [
      'JavaScript 객체는 JSON으로 직접 변환할 수 없으며, 별도의 라이브러리나 함수를 사용해야 합니다.',
      'JavaScript 객체와 JSON은 서로 동일하며, 자동으로 변환됩니다.',
      "JavaScript 객체를 JSON으로 변환하려면 'JSON.stringify()' 메서드를 사용하며, JSON을 객체로 변환하려면 'JSON.parse()' 메서드를 사용합니다.",
      'JavaScript 객체와 JSON은 완전히 별개의 개념이며, 변환할 수 없습니다.',
    ],
    correct_answer: 2,
    answer_description:
      "JavaScript 객체를 JSON으로 변환하려면 'JSON.stringify()' 메서드를 사용하며, JSON을 객체로 변환하려면 'JSON.parse()' 메서드를 사용합니다. 이를 통해 JavaScript 객체와 JSON 간의 변환이 가능합니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체를 생성할 때 객체 리터럴과 생성자 함수의 차이점은 무엇이며, 어떤 상황에서 어떤 방법을 사용해야 하나요?',
    options: [
      '객체 리터럴은 한 번만 사용할 작은 객체를 생성할 때 유용하며, 생성자 함수는 여러 개의 유사한 객체를 생성할 때 유용합니다.',
      '객체 리터럴은 항상 생성자 함수보다 빠르며, 모든 상황에서 사용하는 것이 좋습니다.',
      '객체 리터럴은 프로토타입 체인을 생성하지 않으며, 생성자 함수는 항상 프로토타입 체인을 가집니다.',
      '객체 리터럴과 생성자 함수의 차이점은 없으며, 상황에 따라 어떤 방법을 사용해도 무방합니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서 객체를 생성할 때 객체 리터럴은 한 번만 사용할 작은 객체를 생성할 때 유용하며, 생성자 함수는 여러 개의 유사한 객체를 생성할 때 유용합니다. 생성자 함수는 프로토타입 체인을 생성하여 객체 간의 공유를 가능하게 합니다.',
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로퍼티를 접근하는 방법으로는 어떤 것들이 있으며, 어떤 상황에서 어떤 방법을 사용해야 하나요?',
    options: [
      "객체 프로퍼티는 오직 대괄호 표기법('obj['property']')을 사용하여만 접근할 수 있으며, 점 표기법은 지원되지 않습니다.",
      "객체 프로퍼티는 점 표기법('obj.property')과 대괄호 표기법('obj['property']')을 모두 사용하여 접근할 수 있으며, 상황에 따라 선택합니다.",
      "객체 프로퍼티는 점 표기법('obj.property')을 사용하여만 접근할 수 있으며, 대괄호 표기법은 지원되지 않습니다.",
      "객체 프로퍼티는 'getProperty()' 메서드를 사용하여 접근하며, 이 방법이 가장 안전하고 일반적입니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript에서 객체의 프로퍼티를 접근하는 방법으로는 점 표기법('obj.property')과 대괄호 표기법('obj['property']')을 모두 사용할 수 있으며, 상황에 따라 선택합니다. 일반적으로는 점 표기법이 사용되지만, 동적으로 프로퍼티 이름을 결정해야 할 때는 대괄호 표기법을 사용합니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체는 어떻게 다른 객체로부터 속성을 상속받을 수 있으며, 어떤 원칙을 따르나요?',
    options: [
      "객체는 'inheritFrom()' 메서드를 사용하여 다른 객체로부터 속성을 상속받으며, 상속된 속성은 자동으로 업데이트됩니다.",
      'JavaScript에서 객체는 프로토타입 체인을 통해 다른 객체의 속성을 상속받습니다. 객체가 속성을 찾을 때까지 프로토타입 체인을 따라 올라갑니다.',
      "객체는 'extends' 키워드를 사용하여 다른 객체로부터 속성을 상속받으며, 상속된 속성은 읽기 전용입니다.",
      "객체는 'prototype' 속성을 사용하여 다른 객체로부터 속성을 상속받으며, 이 속성은 공유되며 변경 가능합니다.",
    ],
    correct_answer: 1,
    answer_description:
      'JavaScript에서 객체는 프로토타입 체인을 통해 다른 객체의 속성을 상속받습니다. 객체가 속성을 찾을 때까지 프로토타입 체인을 따라 올라가며 상속된 속성은 해당 객체의 프로토타입에서 찾습니다.',
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript 객체를 JSON 형식으로 어떻게 변환하고, 그 반대로 JSON을 객체로 어떻게 변환할 수 있나요?',
    options: [
      "객체를 JSON 형식으로 변환하려면 'objectToJson()' 함수를 사용하며, 반대로 JSON을 객체로 변환하려면 'jsonToObject()' 함수를 사용합니다.",
      "객체를 JSON 형식으로 변환하려면 'JSON.stringify()' 메서드를 사용하며, 반대로 JSON을 객체로 변환하려면 'JSON.parse()' 메서드를 사용합니다.",
      "객체를 JSON 형식으로 변환하려면 'stringifyObject()' 함수를 사용하며, 반대로 JSON을 객체로 변환하려면 'parseJson()' 함수를 사용합니다.",
      "객체를 JSON 형식으로 변환하려면 'toJSON()' 메서드를 사용하며, 반대로 JSON을 객체로 변환하려면 'fromJson()' 메서드를 사용합니다.",
    ],
    correct_answer: 1,
    answer_description:
      "JavaScript 객체를 JSON 형식으로 변환하려면 'JSON.stringify()' 메서드를 사용하며, 반대로 JSON을 객체로 변환하려면 'JSON.parse()' 메서드를 사용합니다. 이러한 메서드를 통해 데이터를 직렬화하고 역직렬화할 수 있습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript에서 객체의 프로퍼티를 어떻게 열거하고, 어떤 옵션을 사용하여 특정 프로퍼티를 제외할 수 있나요?',
    options: [
      "객체의 프로퍼티를 열거하려면 'enumerateProperties()' 함수를 사용하며, 특정 프로퍼티를 제외하려면 'exclude' 매개변수를 설정합니다.",
      "객체의 프로퍼티를 열거하려면 'for...in' 루프를 사용하며, 특정 프로퍼티를 제외하려면 'exclude' 키워드를 사용합니다.",
      "객체의 프로퍼티를 열거하려면 'forEach()' 메서드를 사용하며, 특정 프로퍼티를 제외하려면 'exclude' 메서드를 호출합니다.",
      "객체의 프로퍼티를 열거하려면 'Object.keys()' 메서드나 'Object.entries()' 메서드를 사용하며, 특정 프로퍼티를 제외할 수 없습니다.",
    ],
    correct_answer: 3,
    answer_description:
      "JavaScript에서 객체의 프로퍼티를 열거하려면 'Object.keys()' 메서드나 'Object.entries()' 메서드를 사용할 수 있습니다. 하지만 특정 프로퍼티를 제외하는 기능은 내장되어 있지 않습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript 객체의 확장 가능성(Extensibility)은 무엇이며, 어떻게 제어할 수 있나요?',
    options: [
      "객체의 확장 가능성은 객체가 생성된 이후에도 속성을 추가하거나 삭제할 수 있는지 여부를 나타냅니다. 확장 가능한 객체는 'Object.preventExtensions()' 메서드를 사용하여 제어합니다.",
      "객체의 확장 가능성은 객체가 다른 객체의 속성을 상속받을 수 있는지 여부를 나타냅니다. 확장 가능한 객체는 'Object.isExtensible()' 메서드를 사용하여 확인합니다.",
      "객체의 확장 가능성은 객체가 다른 객체를 복제할 때 영향을 미치는지 여부를 나타냅니다. 확장 가능한 객체는 'Object.clone()' 메서드를 사용하여 제어합니다.",
      "객체의 확장 가능성은 객체가 프로퍼티를 열거할 때 영향을 미치는지 여부를 나타냅니다. 확장 가능한 객체는 'Object.enumerable()' 메서드를 사용하여 제어합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript 객체의 확장 가능성은 객체가 생성된 이후에도 속성을 추가하거나 삭제할 수 있는지 여부를 나타냅니다. 확장 가능한 객체는 'Object.preventExtensions()' 메서드를 사용하여 제어할 수 있습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript 객체의 프로퍼티는 어떤 속성들을 가질 수 있으며, 이러한 속성들은 어떤 역할을 하나요?',
    options: [
      "객체의 프로퍼티는 'configurable', 'enumerable', 'value', 'writable', 'get', 'set' 등의 속성을 가질 수 있으며, 이러한 속성들은 프로퍼티의 동작을 제어합니다.",
      "객체의 프로퍼티는 'required', 'optional', 'readonly', 'hidden' 등의 속성을 가질 수 있으며, 이러한 속성들은 프로퍼티의 가시성을 설정합니다.",
      "객체의 프로퍼티는 'public', 'private', 'protected', 'internal' 등의 속성을 가질 수 있으며, 이러한 속성들은 프로퍼티의 접근 제한을 설정합니다.",
      "객체의 프로퍼티는 'static', 'dynamic', 'constant', 'mutable' 등의 속성을 가질 수 있으며, 이러한 속성들은 프로퍼티의 변경 가능성을 나타냅니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript 객체의 프로퍼티는 'configurable', 'enumerable', 'value', 'writable', 'get', 'set' 등의 속성을 가질 수 있으며, 이러한 속성들은 프로퍼티의 동작을 제어합니다. 이를 통해 프로퍼티의 속성을 정밀하게 조절할 수 있습니다.",
  },
  {
    category: 'JavaScript/How Objects Work',
    question:
      'JavaScript 객체의 속성을 어떻게 정의하며, 이를 나타내는 다양한 방법은 무엇인가요?',
    options: [
      "객체의 속성은 'defineProperty()' 메서드를 사용하여 정의하며, 이 메서드를 호출할 때 속성의 이름과 속성 디스크립터를 전달합니다.",
      "객체의 속성은 'setProperty()' 함수를 사용하여 정의하며, 이 함수를 호출할 때 속성의 이름과 값을 전달합니다.",
      "객체의 속성은 'addProperty()' 메서드를 사용하여 정의하며, 이 메서드를 호출할 때 속성의 이름과 값을 전달합니다.",
      "객체의 속성은 'createProperty()' 함수를 사용하여 정의하며, 이 함수를 호출할 때 속성의 이름과 값을 전달합니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript 객체의 속성을 정의하려면 'defineProperty()' 메서드를 사용합니다. 이 메서드를 호출할 때 속성의 이름과 속성 디스크립터를 전달하여 속성을 정의할 수 있습니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스와 생성자 함수(Constructor Function)의 차이점은 무엇이며, 언제 어떤 것을 사용해야 하나요?',
    options: [
      '클래스는 ES6 이후에 도입된 개념으로, 객체를 생성하고 초기화하기 위한 방법입니다. 생성자 함수는 이전 버전에서 사용되었습니다.',
      '클래스와 생성자 함수는 기능적으로 동일하며, 사용 시 어떤 것을 선택해도 상관 없습니다.',
      '클래스는 프로토타입 기반 상속을 지원하며, 객체를 보다 간결하게 정의할 수 있습니다. 생성자 함수는 더 복잡한 객체를 다룰 때 유용합니다.',
      '클래스는 객체를 생성하는 데 사용되며, 생성자 함수는 객체의 속성을 변경하거나 삭제하는 데 사용됩니다.',
    ],
    correct_answer: 2,
    answer_description:
      'JavaScript에서 클래스와 생성자 함수는 기능적으로는 유사하지만, 클래스는 ES6 이후에 도입된 개념으로 프로토타입 기반 상속을 보다 간결하게 정의할 수 있습니다. 생성자 함수는 더 복잡한 객체를 다룰 때 유용합니다.',
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript 클래스에서 클래스 메서드와 정적 메서드는 무엇이며, 어떤 차이가 있나요?',
    options: [
      '클래스 메서드와 정적 메서드는 동일한 개념으로 사용되며, 클래스의 인스턴스에 의해 호출됩니다.',
      '클래스 메서드는 클래스의 인스턴스에 의해 호출되며, 정적 메서드는 클래스 자체에 의해 호출됩니다. 정적 메서드는 주로 유틸리티 함수로 사용됩니다.',
      '클래스 메서드는 정적 메서드보다 더 효율적으로 동작하며, 주로 클래스의 속성을 수정하는 데 사용됩니다.',
      '클래스 메서드는 인스턴스에 의해 호출되며, 정적 메서드는 주로 객체 생성 시 초기화를 위한 용도로 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      'JavaScript 클래스에서 클래스 메서드와 정적 메서드는 동일한 개념으로 사용되며, 클래스의 인스턴스에 의해 호출되는 것이 아니라 클래스 자체에 의해 호출됩니다. 정적 메서드는 주로 유틸리티 함수로 사용됩니다.',
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      "JavaScript에서 클래스 상속은 어떻게 작동하며, 'extends' 키워드의 역할은 무엇인가요?",
    options: [
      "클래스 상속은 부모 클래스에서 자식 클래스로 속성과 메서드를 복사하여 전달합니다. 'extends' 키워드는 이 복사 과정을 정의합니다.",
      "'extends' 키워드를 사용하여 부모 클래스와 자식 클래스를 연결하면, 부모 클래스의 메서드가 자식 클래스에 자동으로 복사됩니다.",
      "클래스 상속은 JavaScript에서 지원하지 않으며, 'extends' 키워드는 오류를 발생시킵니다.",
      "'extends' 키워드는 클래스 상속과는 관련이 없으며, 주로 객체의 속성을 변경하는 데 사용됩니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 클래스 상속은 부모 클래스에서 자식 클래스로 속성과 메서드를 복사하여 전달하는 개념입니다. 'extends' 키워드는 이러한 복사 과정을 정의합니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      "JavaScript에서 'super' 키워드는 어떤 역할을 하며, 어떤 상황에서 사용되나요?",
    options: [
      "'super' 키워드는 부모 클래스의 생성자를 호출하는 데 사용되며, 자식 클래스의 생성자에서 호출됩니다.",
      "'super' 키워드는 자식 클래스의 메서드에서 부모 클래스의 메서드를 호출하는 데 사용되며, 메서드 간의 연결을 지원합니다.",
      "'super' 키워드는 부모 클래스의 속성을 직접 접근하기 위해 사용되며, 어떤 상황에서도 호출될 수 있습니다.",
      "'super' 키워드는 클래스 내에서는 사용할 수 없으며, 주로 함수 외부에서만 사용됩니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'super' 키워드는 JavaScript에서 부모 클래스의 생성자를 호출하는 데 사용됩니다. 이것은 자식 클래스의 생성자 내에서 호출되어야 합니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 접근자(Getters)와 설정자(Setters)는 무엇이며, 어떻게 정의하고 사용하나요?',
    options: [
      "접근자는 객체의 속성 값을 변경하고 설정자는 값을 조회하는 역할을 합니다. 이들은 'get' 및 'set' 키워드를 사용하여 정의하며 객체의 프로퍼티처럼 사용됩니다.",
      "접근자는 값을 조회하고 설정자는 값을 변경하는 역할을 합니다. 이들은 'access' 및 'modify' 키워드를 사용하여 정의하며 메서드처럼 사용됩니다.",
      "접근자는 값을 변경하고 설정자는 값을 조회하는 역할을 합니다. 이들은 'get' 및 'set' 키워드를 사용하여 정의하며 메서드처럼 사용됩니다.",
      '접근자와 설정자는 JavaScript에서 지원하지 않으며, 값의 조회 및 변경은 일반 메서드를 사용하여 처리합니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 접근자(Getters)와 설정자(Setters)는 객체의 속성 값을 변경하고 조회하는 역할을 합니다. 이들은 'get' 및 'set' 키워드를 사용하여 정의하며 객체의 프로퍼티처럼 사용됩니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스 상속과 프로토타입 체인은 어떻게 관련되어 있으며, 어떤 차이점이 있나요?',
    options: [
      '클래스 상속은 객체 간의 상속 관계를 정의하는 방법이며, 프로토타입 체인은 클래스 내에서 메서드를 상속하는 방법입니다.',
      '클래스 상속과 프로토타입 체인은 동일한 개념이며, 다른 용어로 표현한 것뿐입니다.',
      '클래스 상속은 ES6에서만 사용 가능하며, 프로토타입 체인은 이전 버전에서 사용합니다.',
      '클래스 상속은 객체의 속성을 상속하고, 프로토타입 체인은 메서드를 상속하는 방법입니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서 클래스 상속은 객체 간의 상속 관계를 정의하며, 프로토타입 체인은 클래스 내에서 메서드를 상속하는 방법입니다.',
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      "JavaScript에서 'super' 키워드는 어떤 역할을 하며, 메서드 오버라이딩을 어떻게 수행하나요?",
    options: [
      "'super' 키워드는 부모 클래스의 메서드를 호출하는 데 사용되며, 자식 클래스에서 메서드를 오버라이딩할 때 주로 활용됩니다.",
      "'super' 키워드는 자식 클래스의 메서드를 호출하는 데 사용되며, 부모 클래스에서 메서드를 오버라이딩할 때 주로 활용됩니다.",
      "'super' 키워드는 오버라이딩과는 관련이 없으며, 클래스 간의 상속 관계를 정의할 때 사용됩니다.",
      "'super' 키워드는 오버라이딩된 메서드와 동일한 기능을 수행하며, 자식 클래스에서는 사용하지 않습니다.",
    ],
    correct_answer: 0,
    answer_description:
      "'super' 키워드는 JavaScript에서 부모 클래스의 메서드를 호출하는 데 사용되며, 자식 클래스에서 메서드를 오버라이딩할 때 주로 활용됩니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스 생성자 함수와 생성자 메서드는 어떻게 정의하며, 어떤 차이가 있나요?',
    options: [
      "클래스 생성자 함수는 'constructor()' 메서드를 사용하여 정의하며, 객체를 초기화하기 위한 역할을 합니다. 생성자 메서드는 클래스 내의 다른 메서드를 정의할 때 사용됩니다.",
      '클래스 생성자 함수와 생성자 메서드는 동일한 개념이며, 다른 용어로 표현한 것뿐입니다.',
      '클래스 생성자 함수는 객체를 생성하는 데 사용되며, 생성자 메서드는 클래스의 프로퍼티 값을 변경하는 데 사용됩니다.',
      '클래스 생성자 함수와 생성자 메서드는 클래스 내부에서만 사용 가능하며, 외부에서 호출할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 클래스 생성자 함수는 'constructor()' 메서드를 사용하여 정의하며, 객체를 초기화하기 위한 역할을 합니다. 생성자 메서드는 클래스 내의 다른 메서드를 정의할 때 사용됩니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스의 상속을 어떻게 구현하며, 추상 클래스는 어떤 역할을 하나요?',
    options: [
      "클래스의 상속은 'extends' 키워드를 사용하여 정의하며, 추상 클래스는 인스턴스를 생성할 수 없는 클래스입니다.",
      "클래스의 상속은 'inherit' 키워드를 사용하여 정의하며, 추상 클래스는 일반 클래스와 동일한 역할을 합니다.",
      "클래스의 상속은 'superclass' 및 'subclass' 키워드를 사용하여 정의하며, 추상 클래스는 클래스 내의 일부 메서드만 구현하는 클래스입니다.",
      '클래스의 상속은 JavaScript에서 지원하지 않으며, 추상 클래스는 프로그래밍 언어의 일부가 아닙니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 클래스의 상속은 'extends' 키워드를 사용하여 정의하며, 추상 클래스는 인스턴스를 생성할 수 없는 클래스로, 주로 일부 메서드만 구현하는 데 사용됩니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 접근 제어자는 무엇이며, 어떻게 사용되며, 어떤 역할을 하나요?',
    options: [
      "접근 제어자는 클래스 내의 메서드와 프로퍼티에 대한 접근 권한을 제어하는 키워드로, 'public', 'private', 'protected' 등이 사용됩니다. 이를 통해 클래스 멤버의 접근 범위를 제한할 수 있습니다.",
      '접근 제어자는 클래스의 인스턴스를 생성할 때 사용되며, 클래스 멤버의 값을 초기화하는 데 활용됩니다.',
      '접근 제어자는 객체의 메서드를 호출할 때 사용되며, 메서드 간의 연결을 지원합니다.',
      "접근 제어자는 JavaScript에서 지원하지 않으며, 모든 멤버는 기본적으로 'public'입니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 접근 제어자는 클래스 내의 메서드와 프로퍼티에 대한 접근 권한을 제어하는 키워드로, 'public', 'private', 'protected' 등이 사용됩니다. 이를 통해 클래스 멤버의 접근 범위를 제한할 수 있습니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 정적 메서드와 인스턴스 메서드는 어떻게 정의되며, 어떤 차이가 있나요?',
    options: [
      "정적 메서드는 클래스 자체에 속하며 'static' 키워드로 정의되며, 인스턴스를 생성하지 않고 호출됩니다. 인스턴스 메서드는 클래스의 인스턴스에 속하며 'this'를 사용하여 정의되며, 인스턴스를 생성한 후 호출됩니다.",
      "정적 메서드는 클래스의 인스턴스에 속하며 'this'를 사용하여 정의되며, 인스턴스를 생성한 후 호출됩니다. 인스턴스 메서드는 클래스 자체에 속하며 'static' 키워드로 정의되며, 인스턴스를 생성하지 않고 호출됩니다.",
      '정적 메서드와 인스턴스 메서드는 기능적으로 동일하며, 사용 시 차이가 없습니다.',
      '정적 메서드는 클래스의 인스턴스를 생성하는 데 사용되며, 인스턴스 메서드는 클래스 자체에 속하며 클래스를 초기화하는 데 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 정적 메서드는 클래스 자체에 속하며 'static' 키워드로 정의되며, 인스턴스를 생성하지 않고 호출됩니다. 인스턴스 메서드는 클래스의 인스턴스에 속하며 'this'를 사용하여 정의되며, 인스턴스를 생성한 후 호출됩니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스 상속 시 어떻게 메서드 오버라이딩을 수행하며, 왜 이 기능이 유용한가요?',
    options: [
      '메서드 오버라이딩은 부모 클래스의 메서드를 자식 클래스에서 동일한 이름으로 다시 정의하여 사용하는 것입니다. 이를 통해 자식 클래스는 부모 클래스의 동작을 변경하거나 확장할 수 있습니다.',
      '메서드 오버라이딩은 부모 클래스의 메서드를 자동으로 상속하며, 자식 클래스에서 추가로 정의할 필요가 없습니다. 이를 통해 코드를 간결하게 작성할 수 있습니다.',
      '메서드 오버라이딩은 JavaScript에서 지원하지 않으며, 클래스 상속과는 관련이 없습니다.',
      '메서드 오버라이딩은 부모 클래스의 메서드를 삭제하고 새로운 메서드를 추가하는 것을 의미하며, 유용하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      'JavaScript에서 메서드 오버라이딩은 부모 클래스의 메서드를 자식 클래스에서 동일한 이름으로 다시 정의하여 사용하는 것을 의미합니다. 이를 통해 자식 클래스는 부모 클래스의 동작을 변경하거나 확장할 수 있습니다.',
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 getter와 setter 메서드는 어떻게 정의되며, 어떤 상황에서 사용되나요?',
    options: [
      "getter와 setter 메서드는 'get' 및 'set' 키워드를 사용하여 정의되며, 객체의 속성 값을 읽고 변경하는 데 사용됩니다. 이를 통해 속성에 접근을 제어할 수 있습니다.",
      "getter와 setter 메서드는 'get' 및 'set' 키워드를 사용하지 않고 정의되며, 객체의 속성 값을 초기화하는 데 사용됩니다. 이를 통해 초기값을 설정할 수 있습니다.",
      'getter와 setter 메서드는 객체의 속성 값을 변경하고 조회하는 역할을 하며, 일반적인 메서드와 동일하게 호출됩니다.',
      'getter와 setter 메서드는 JavaScript에서 지원하지 않으며, 객체의 속성은 직접 접근하여 수정해야 합니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 getter와 setter 메서드는 'get' 및 'set' 키워드를 사용하여 정의되며, 객체의 속성 값을 읽고 변경하는 데 사용됩니다. 이를 통해 속성에 접근을 제어할 수 있습니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      'JavaScript에서 클래스와 객체를 어떻게 생성하며, 어떤 차이가 있나요?',
    options: [
      "클래스는 'new' 키워드를 사용하여 생성하며, 객체는 'Object()' 생성자 함수를 사용하여 생성합니다. 클래스는 객체의 모델을 정의하고, 객체는 실제 데이터를 나타냅니다.",
      '클래스와 객체는 동일한 개념이며, 다른 용어로 표현한 것뿐입니다.',
      '클래스는 객체의 속성을 변경하고 조회하는 데 사용되며, 객체는 클래스의 인스턴스를 생성하는 데 사용됩니다.',
      '클래스는 JavaScript에서 지원하지 않으며, 객체만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 클래스는 'new' 키워드를 사용하여 생성하며, 객체는 'Object()' 생성자 함수를 사용하여 생성합니다. 클래스는 객체의 모델을 정의하고, 객체는 실제 데이터를 나타냅니다.",
  },
  {
    category: 'JavaScript/Classy Objects',
    question:
      "JavaScript에서 클래스의 접근 제어자는 어떻게 사용되며, 'public', 'private', 'protected'의 차이는 무엇인가요?",
    options: [
      "접근 제어자는 클래스의 메서드와 프로퍼티에 대한 접근 권한을 제어하는 키워드로, 'public', 'private', 'protected' 등이 사용됩니다. 이를 통해 클래스 멤버의 접근 범위를 제한할 수 있습니다.",
      "접근 제어자는 클래스 내의 모든 멤버에 자동으로 적용되며, 별도로 설정할 필요가 없습니다. 'public', 'private', 'protected'는 사용되지 않습니다.",
      "접근 제어자는 클래스의 속성 값을 변경하고 조회하는 데 사용되며, 'public', 'private', 'protected'의 차이는 없습니다.",
      "접근 제어자는 JavaScript에서 지원하지 않으며, 모든 멤버는 기본적으로 'public'입니다.",
    ],
    correct_answer: 0,
    answer_description:
      "JavaScript에서 클래스의 접근 제어자는 클래스의 메서드와 프로퍼티에 대한 접근 권한을 제어하는 키워드로, 'public', 'private', 'protected' 등이 사용됩니다. 이를 통해 클래스 멤버의 접근 범위를 제한할 수 있습니다.",
  },
  {
    category: 'JavaScript/This Works',
    question:
      '`this` 키워드는 JavaScript에서 어떻게 동작하며, 일반적으로 어떤 값을 참조하나요?',
    options: [
      '`this` 키워드는 현재 실행 중인 함수의 호출 문맥에 따라 다르게 동작하며, 함수를 호출한 객체를 참조합니다.',
      '`this` 키워드는 항상 전역 객체를 참조하며, 함수를 호출한 객체와는 무관합니다.',
      '`this` 키워드는 항상 함수 내에서 정의한 변수를 참조하며, 함수를 호출한 객체와는 관련이 없습니다.',
      '`this` 키워드는 함수 내에서만 사용 가능하며, 함수 외부에서는 정의할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`this` 키워드는 JavaScript에서 현재 실행 중인 함수의 호출 문맥에 따라 다르게 동작하며, 함수를 호출한 객체를 참조합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '화살표 함수(arrow function) 내에서 `this` 키워드는 어떻게 동작하며, 일반 함수와 어떻게 다른가요?',
    options: [
      '화살표 함수 내에서 `this` 키워드는 항상 전역 객체를 참조하며, 일반 함수와 동작 방식이 동일합니다.',
      '화살표 함수 내에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 이는 일반 함수와 다릅니다.',
      '화살표 함수 내에서 `this` 키워드는 항상 함수 내에서 정의한 변수를 참조하며, 외부 함수의 `this` 값과는 무관합니다.',
      '화살표 함수는 `this` 키워드를 지원하지 않으며, 항상 외부 함수의 `this` 값을 상속합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '화살표 함수(arrow function) 내에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 이는 일반 함수와 다릅니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 `this` 키워드의 바인딩은 어떻게 결정되며, 어떤 규칙에 따라 동작하나요?',
    options: [
      '`this` 바인딩은 항상 함수를 호출한 객체를 참조하며, 다른 규칙은 존재하지 않습니다.',
      '`this` 바인딩은 함수 호출 시 사용된 호출 문맥에 따라 결정되며, 호출 방법에 따라 동적으로 변합니다.',
      '`this` 바인딩은 함수 내에서 정의한 변수를 참조하며, 호출 문맥과는 무관합니다.',
      '`this` 바인딩은 함수 내에서만 유효하며, 함수 외부에서는 사용할 수 없습니다.',
    ],
    correct_answer: 1,
    answer_description:
      '`this` 바인딩은 함수 호출 시 사용된 호출 문맥에 따라 결정됩니다. 호출 방법에 따라 `this` 값이 동적으로 변할 수 있습니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 명시적으로 `this` 바인딩을 설정하는 방법은 무엇이며, 언제 사용되나요?',
    options: [
      '명시적인 `this` 바인딩은 함수 내부에서 `this` 값을 직접 설정하는 방식으로, `bind()`, `call()`, `apply()` 등의 메서드를 사용합니다. 주로 특정 객체에 메서드를 연결할 때 사용됩니다.',
      '명시적인 `this` 바인딩은 함수 내에서 자동으로 수행되며, 별도의 설정이 필요하지 않습니다.',
      '명시적인 `this` 바인딩은 오직 화살표 함수에서만 사용 가능하며, 일반 함수에서는 적용되지 않습니다.',
      '명시적인 `this` 바인딩은 JavaScript에서 지원하지 않으며, `this` 값을 직접 변경할 수 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '명시적인 `this` 바인딩은 함수 내부에서 `this` 값을 직접 설정하는 방식으로, `bind()`, `call()`, `apply()` 등의 메서드를 사용합니다. 주로 특정 객체에 메서드를 연결할 때 사용됩니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 이벤트 핸들러에서 `this` 키워드는 어떻게 동작하며, 일반 함수와 어떻게 다른가요?',
    options: [
      '이벤트 핸들러에서 `this` 키워드는 항상 이벤트를 발생시킨 요소를 참조하며, 일반 함수와 동작 방식이 동일합니다.',
      '이벤트 핸들러에서 `this` 키워드는 이벤트를 발생시킨 요소를 참조하지 않으며, 일반 함수와 동작 방식이 다릅니다.',
      '이벤트 핸들러에서 `this` 키워드는 항상 전역 객체를 참조하며, 일반 함수와 동작 방식이 동일합니다.',
      '이벤트 핸들러에서 `this` 키워드는 항상 이벤트 핸들러가 연결된 요소를 참조하며, 일반 함수와 다릅니다.',
    ],
    correct_answer: 1,
    answer_description:
      '이벤트 핸들러에서 `this` 키워드는 이벤트를 발생시킨 요소를 참조하지 않으며, 일반 함수와 동작 방식이 다릅니다. 이벤트 핸들러에서 `this`를 특정 요소로 설정하려면 명시적인 바인딩이 필요합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 일반 함수 내부에서 `this` 키워드는 어떻게 동작하며, 일반 함수를 어떻게 호출하면 `this`가 어떤 값을 참조하나요?',
    options: [
      '일반 함수 내부에서 `this` 키워드는 함수를 호출한 객체를 참조하며, 함수를 호출할 때 함수 이름 뒤에 점(`.`)을 사용하여 호출하면 해당 객체를 참조합니다.',
      '일반 함수 내부에서 `this` 키워드는 항상 전역 객체를 참조하며, 함수를 호출하는 방법과 상관없이 항상 전역 객체를 참조합니다.',
      '일반 함수 내부에서 `this` 키워드는 함수 내에서 정의한 변수를 참조하며, 함수를 호출하는 방법과 상관없이 항상 함수 내의 변수를 참조합니다.',
      '일반 함수 내부에서 `this` 키워드는 항상 함수를 호출한 객체의 프로토타입 객체를 참조하며, 함수를 호출하는 방법과 상관없이 항상 프로토타입 객체를 참조합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '일반 함수 내부에서 `this` 키워드는 함수를 호출한 객체를 참조합니다. 함수를 호출할 때 함수 이름 뒤에 점(`.`)을 사용하여 호출하면 해당 객체를 참조합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '화살표 함수(arrow function) 내부에서 `this` 키워드는 어떻게 동작하며, 화살표 함수를 호출하면 `this`가 어떤 값을 참조하나요?',
    options: [
      '화살표 함수 내부에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 화살표 함수를 호출하는 방법에 따라 `this`를 변경할 수 없습니다.',
      '화살표 함수 내부에서 `this` 키워드는 항상 전역 객체를 참조하며, 함수를 호출하는 방법과 상관없이 항상 전역 객체를 참조합니다.',
      '화살표 함수 내부에서 `this` 키워드는 함수 내에서 정의한 변수를 참조하며, 함수를 호출하는 방법과 상관없이 항상 함수 내의 변수를 참조합니다.',
      '화살표 함수 내부에서 `this` 키워드는 항상 함수를 호출한 객체의 프로토타입 객체를 참조하며, 함수를 호출하는 방법과 상관없이 항상 프로토타입 객체를 참조합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '화살표 함수(arrow function) 내부에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 화살표 함수를 호출하는 방법에 따라 `this`를 변경할 수 없습니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 객체의 메서드 내부에서 `this` 키워드는 어떻게 동작하며, 객체 메서드를 호출하면 `this`가 어떤 값을 참조하나요?',
    options: [
      '객체의 메서드 내부에서 `this` 키워드는 항상 해당 객체를 참조하며, 객체 메서드를 호출할 때 해당 객체를 참조합니다.',
      '객체의 메서드 내부에서 `this` 키워드는 항상 전역 객체를 참조하며, 객체 메서드를 호출하는 방법과 상관없이 항상 전역 객체를 참조합니다.',
      '객체의 메서드 내부에서 `this` 키워드는 항상 함수 내에서 정의한 변수를 참조하며, 객체 메서드를 호출하는 방법과 상관없이 항상 함수 내의 변수를 참조합니다.',
      '객체의 메서드 내부에서 `this` 키워드는 항상 해당 메서드를 호출한 객체를 참조하며, 객체 메서드를 호출하는 방법과 상관없이 항상 해당 객체를 참조합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '객체의 메서드 내부에서 `this` 키워드는 항상 해당 객체를 참조합니다. 객체 메서드를 호출할 때 해당 객체를 참조하므로 메서드 내에서 해당 객체의 프로퍼티와 메서드를 접근할 수 있습니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '`bind()` 메서드를 사용하여 명시적인 `this` 바인딩을 어떻게 수행하며, 어떤 상황에서 유용한가요?',
    options: [
      '`bind()` 메서드는 함수를 호출할 때 사용될 `this` 값을 설정하며, 함수를 호출할 때마다 `this`가 고정됩니다. 이는 이벤트 핸들러 등에서 유용합니다.',
      '`bind()` 메서드는 함수를 호출하는 방법과 상관없이 항상 `this`를 전역 객체로 설정하며, 특정 상황에서 사용하지 않습니다.',
      '`bind()` 메서드는 함수 내부에서 정의한 변수의 값을 설정하며, 함수를 호출할 때마다 변수 값이 변경됩니다. 이는 반복적인 작업에 유용합니다.',
      '`bind()` 메서드는 함수를 호출할 때 항상 `this`를 호출한 객체의 프로토타입 객체로 설정하며, 주로 객체 상속에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`bind()` 메서드는 함수를 호출할 때 사용될 `this` 값을 설정하며, 함수를 호출할 때마다 `this`가 고정됩니다. 이는 이벤트 핸들러 등에서 유용합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '`call()`과 `apply()` 메서드는 어떻게 동작하며, 명시적인 `this` 바인딩을 설정할 때 어떤 차이가 있나요?',
    options: [
      '`call()` 메서드는 함수를 호출하며, 함수에 전달되는 인자를 순서대로 전달하고 `this` 값을 설정합니다. `apply()` 메서드는 함수를 호출하며, 함수에 전달되는 인자를 배열로 전달하고 `this` 값을 설정합니다.',
      '`call()` 메서드는 함수에 전달되는 인자를 배열로 전달하고 `this` 값을 설정합니다. `apply()` 메서드는 함수를 호출하며, 함수에 전달되는 인자를 순서대로 전달하고 `this` 값을 설정합니다.',
      '`call()` 메서드와 `apply()` 메서드는 동일한 방식으로 동작하며, 차이가 없습니다.',
      '`call()` 메서드와 `apply()` 메서드는 `this` 값을 설정하는 데 사용되지 않으며, 인자 전달에만 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`call()` 메서드는 함수를 호출하며, 함수에 전달되는 인자를 순서대로 전달하고 `this` 값을 설정합니다. `apply()` 메서드는 함수를 호출하며, 함수에 전달되는 인자를 배열로 전달하고 `this` 값을 설정합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '화살표 함수(arrow function) 내에서 `this` 키워드는 어떻게 동작하며, 일반 함수와 어떻게 다른가요?',
    options: [
      '화살표 함수 내에서 `this` 키워드는 항상 전역 객체를 참조하며, 함수를 호출하는 방법과 상관없이 항상 전역 객체를 참조합니다.',
      '화살표 함수 내에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 이는 일반 함수와 다릅니다.',
      '화살표 함수 내에서 `this` 키워드는 항상 함수 내에서 정의한 변수를 참조하며, 함수를 호출하는 방법과 상관없이 항상 함수 내의 변수를 참조합니다.',
      '화살표 함수는 `this` 키워드를 지원하지 않으며, 항상 전역 객체를 참조합니다.',
    ],
    correct_answer: 1,
    answer_description:
      '화살표 함수(arrow function) 내에서 `this` 키워드는 화살표 함수가 선언된 위치에서 가장 가까운 외부 함수의 `this` 값을 참조합니다. 이는 일반 함수와 다릅니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      '`bind()` 메서드를 사용하여 명시적인 `this` 바인딩을 어떻게 수행하며, 어떤 상황에서 유용한가요?',
    options: [
      '`bind()` 메서드는 함수를 호출할 때 사용될 `this` 값을 설정하며, 함수를 호출할 때마다 `this`가 고정됩니다. 이는 이벤트 핸들러 등에서 유용합니다.',
      '`bind()` 메서드는 함수를 호출하는 방법과 상관없이 항상 `this`를 전역 객체로 설정하며, 특정 상황에서 사용하지 않습니다.',
      '`bind()` 메서드는 함수 내부에서 정의한 변수의 값을 설정하며, 함수를 호출할 때마다 변수 값이 변경됩니다. 이는 반복적인 작업에 유용합니다.',
      '`bind()` 메서드는 함수를 호출할 때 항상 `this`를 호출한 객체의 프로토타입 객체로 설정하며, 주로 객체 상속에 사용됩니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`bind()` 메서드는 함수를 호출할 때 사용될 `this` 값을 설정하며, 함수를 호출할 때마다 `this`가 고정됩니다. 이는 이벤트 핸들러 등에서 유용합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 이벤트 핸들러에서 `this` 키워드는 어떻게 동작하며, 일반 함수와 어떻게 다른가요?',
    options: [
      '이벤트 핸들러에서 `this` 키워드는 항상 이벤트를 발생시킨 요소를 참조하며, 일반 함수와 동작 방식이 동일합니다.',
      '이벤트 핸들러에서 `this` 키워드는 이벤트를 발생시킨 요소를 참조하지 않으며, 일반 함수와 동작 방식이 다릅니다.',
      '이벤트 핸들러에서 `this` 키워드는 항상 전역 객체를 참조하며, 일반 함수와 동작 방식이 동일합니다.',
      '이벤트 핸들러에서 `this` 키워드는 항상 이벤트 핸들러가 연결된 요소를 참조하며, 일반 함수와 다릅니다.',
    ],
    correct_answer: 1,
    answer_description:
      '이벤트 핸들러에서 `this` 키워드는 이벤트를 발생시킨 요소를 참조하지 않으며, 일반 함수와 동작 방식이 다릅니다. 이벤트 핸들러에서 `this`를 특정 요소로 설정하려면 명시적인 바인딩이 필요합니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript에서 객체 생성자 함수 내에서 `this` 키워드는 어떻게 동작하며, 어떤 역할을 하나요?',
    options: [
      '객체 생성자 함수 내에서 `this` 키워드는 항상 전역 객체를 참조하며, 객체를 생성하는 데 사용되지 않습니다.',
      '객체 생성자 함수 내에서 `this` 키워드는 객체 생성 과정 중에 생성되는 새로운 객체를 참조하며, 새로운 객체의 프로퍼티를 설정합니다.',
      '객체 생성자 함수 내에서 `this` 키워드는 항상 함수 내에서 정의한 변수를 참조하며, 객체 생성과는 무관합니다.',
      '객체 생성자 함수 내에서 `this` 키워드는 항상 생성된 객체의 부모 객체를 참조하며, 객체의 상속에 사용됩니다.',
    ],
    correct_answer: 1,
    answer_description:
      '객체 생성자 함수 내에서 `this` 키워드는 객체 생성 과정 중에 생성되는 새로운 객체를 참조하며, 새로운 객체의 프로퍼티를 설정하는 데 사용됩니다.',
  },
  {
    category: 'JavaScript/This Works',
    question:
      'JavaScript 코드에서 화살표 함수와 일반 함수를 혼용하여 사용할 때 `this` 키워드의 동작은 어떻게 될까요?',
    options: [
      '화살표 함수와 일반 함수를 혼용하여 사용하면 `this` 키워드의 동작이 불안정하며, 예측하기 어려운 결과가 발생합니다. 이런 경우 화살표 함수를 사용하지 않는 것이 좋습니다.',
      '화살표 함수와 일반 함수를 혼용하여 사용할 때, 각 함수의 `this` 동작은 독립적으로 작동하며, 상호 영향을 주지 않습니다.',
      '화살표 함수와 일반 함수를 혼용하여 사용할 때, 일반 함수가 화살표 함수의 `this` 동작을 무시하며, 일반 함수의 `this` 값을 사용합니다.',
      '화살표 함수와 일반 함수를 혼용하여 사용할 때, 화살표 함수가 일반 함수의 `this` 동작을 무시하며, 화살표 함수의 `this` 값을 사용합니다.',
    ],
    correct_answer: 3,
    answer_description:
      'JavaScript 코드에서 화살표 함수와 일반 함수를 혼용하여 사용할 때, 화살표 함수는 일반 함수의 `this` 동작을 무시하며, 화살표 함수의 `this` 값을 사용합니다.',
  },
  {
    category: 'JavaScript/Delegation',
    question:
      "JavaScript에서 '객체 위임(Delegation)'은 무엇을 의미하며, 어떻게 동작하나요?",
    options: [
      '객체 위임은 객체가 다른 객체에 일부 기능을 위임하고, 위임된 기능은 위임된 객체에 의해 처리됩니다. 이를 통해 객체 간 코드를 재사용하고 구조를 간결하게 유지할 수 있습니다.',
      '객체 위임은 객체의 속성을 다른 객체로 복사하고, 복사된 속성은 복사된 객체에 의해 처리됩니다. 이를 통해 객체 간 코드를 공유하고 코드 중복을 방지할 수 있습니다.',
      '객체 위임은 객체가 다른 객체에 의존성을 설정하고, 의존성을 가진 객체는 의존하는 객체를 변경할 수 있습니다. 이를 통해 객체 간의 느슨한 결합을 유지할 수 있습니다.',
      '객체 위임은 객체가 다른 객체로부터 기능을 빌려오고, 빌려온 기능은 빌려준 객체에 의해 처리됩니다. 이를 통해 객체 간의 기능 공유를 강화할 수 있습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '객체 위임(Delegation)은 객체가 다른 객체에 일부 기능을 위임하고, 위임된 기능은 위임된 객체에 의해 처리됩니다. 이를 통해 객체 간 코드를 재사용하고 구조를 간결하게 유지할 수 있습니다.',
  },
  {
    category: 'JavaScript/Delegation',
    question:
      'JavaScript에서 객체 위임(Delegation)은 프로토타입 체인과 어떤 관련이 있으며, 어떻게 상호 작용하나요?',
    options: [
      '객체 위임은 프로토타입 체인의 일부로 동작하며, 객체에서 속성을 찾을 때 해당 객체의 프로토타입 체인을 따라 올라가면서 속성을 찾습니다.',
      '객체 위임은 프로토타입 체인과는 관련이 없으며, 별도로 동작합니다. 객체 위임은 객체 간의 상호 작용을 위한 메커니즘입니다.',
      '프로토타입 체인은 객체 위임의 대안으로 사용되며, 프로토타입 체인을 통해 객체 간의 상속 및 위임을 처리합니다.',
      '객체 위임과 프로토타입 체인은 JavaScript에서 사용되는 서로 다른 언어 기능이며, 상호 작용하지 않습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '객체 위임(Delegation)은 프로토타입 체인의 일부로 동작하며, 객체에서 속성을 찾을 때 해당 객체의 프로토타입 체인을 따라 올라가면서 속성을 찾습니다.',
  },
  {
    category: 'JavaScript/Delegation',
    question:
      '`Object.create()` 메서드는 어떻게 사용되며, 객체 위임(Delegation)에서 어떤 역할을 하는데 가장 유용한가요?',
    options: [
      '`Object.create()` 메서드는 객체를 생성하고 해당 객체의 프로토타입을 지정할 때 사용됩니다. 객체 위임에서는 새로운 객체를 위임 객체의 프로토타입으로 생성하여 위임을 구현하는 데 유용합니다.',
      '`Object.create()` 메서드는 객체의 속성을 복사할 때 사용됩니다. 객체 위임에서는 위임 객체의 속성을 복사하여 위임을 구현하는 데 유용합니다.',
      '`Object.create()` 메서드는 객체의 메서드를 호출할 때 사용됩니다. 객체 위임에서는 메서드를 호출할 때 `Object.create()`를 사용하여 메서드를 위임 객체와 연결하는 데 유용합니다.',
      '`Object.create()` 메서드는 객체를 삭제할 때 사용됩니다. 객체 위임에서는 위임 객체를 삭제할 때 `Object.create()`를 사용하여 위임을 해제하는 데 유용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`Object.create()` 메서드는 객체를 생성하고 해당 객체의 프로토타입을 지정할 때 사용됩니다. 객체 위임에서는 새로운 객체를 위임 객체의 프로토타입으로 생성하여 위임을 구현하는 데 유용합니다.',
  },
  {
    category: 'JavaScript/Delegation',
    question:
      '`Object.setPrototypeOf()` 메서드는 어떻게 사용되며, 객체 위임(Delegation)에서 어떤 역할을 하는데 가장 유용한가요?',
    options: [
      '`Object.setPrototypeOf()` 메서드는 객체의 프로토타입을 변경할 때 사용됩니다. 객체 위임에서는 위임 객체의 프로토타입을 다른 객체로 변경하여 위임을 구현하는 데 유용합니다.',
      '`Object.setPrototypeOf()` 메서드는 객체의 속성을 복사할 때 사용됩니다. 객체 위임에서는 위임 객체의 속성을 복사하여 위임을 구현하는 데 유용합니다.',
      '`Object.setPrototypeOf()` 메서드는 객체의 메서드를 호출할 때 사용됩니다. 객체 위임에서는 메서드를 호출할 때 `Object.setPrototypeOf()`을 사용하여 메서드를 위임 객체와 연결하는 데 유용합니다.',
      '`Object.setPrototypeOf()` 메서드는 객체를 삭제할 때 사용됩니다. 객체 위임에서는 위임 객체를 삭제할 때 `Object.setPrototypeOf()`을 사용하여 위임을 해제하는 데 유용합니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`Object.setPrototypeOf()` 메서드는 객체의 프로토타입을 변경할 때 사용됩니다. 객체 위임에서는 위임 객체의 프로토타입을 다른 객체로 변경하여 위임을 구현하는 데 유용합니다.',
  },
  {
    category: 'JavaScript/Delegation',
    question:
      '`__proto__` 속성은 무엇이며, 객체 위임(Delegation)에서 어떻게 사용될 수 있나요?',
    options: [
      '`__proto__` 속성은 객체의 프로토타입을 나타내는 속성으로, 객체 위임에서는 해당 속성을 통해 객체의 프로토타입을 변경하거나 프로토타입 체인을 따라갈 수 있습니다.',
      '`__proto__` 속성은 객체의 메서드를 나타내는 속성으로, 객체 위임에서는 해당 속성을 통해 객체의 메서드를 호출하거나 메서드를 추가할 수 있습니다.',
      '`__proto__` 속성은 객체의 속성을 복사하는 데 사용되며, 객체 위임에서는 다른 객체의 속성을 복사하여 위임을 구현하는 데 사용됩니다.',
      '`__proto__` 속성은 객체의 생성 시점에만 사용되며, 객체 위임과는 관련이 없습니다.',
    ],
    correct_answer: 0,
    answer_description:
      '`__proto__` 속성은 객체의 프로토타입을 나타내는 속성으로, 객체 위임에서는 해당 속성을 통해 객체의 프로토타입을 변경하거나 프로토타입 체인을 따라갈 수 있습니다.',
  },
];

module.exports = {
  questionData: questionData,
  // 필요한 경우, 다른 속성이나 메서드도 추가할 수 있습니다.
};
