[
  {
    "category": "Webpack",
    "question": "Webpack은 무엇이며, 어떤 주요 기능과 장점을 제공하나요?",
    "options": [
      "Webpack은 웹 브라우저를 효율적으로 렌더링하기 위한 그래픽 라이브러리로, 웹 페이지의 시각적인 부분을 관리합니다.",
      "Webpack은 JavaScript 모듈 번들러로, 여러 개의 JavaScript 파일과 관련 리소스를 하나로 결합하여 웹 애플리케이션을 구성하는 도구입니다. 주요 기능으로 모듈 로딩, 코드 번들링, 리소스 번들링을 제공하며, 코드 스플리팅, 로더, 플러그인을 통한 확장성을 갖추고 있습니다.",
      "Webpack은 데이터베이스 관리 시스템으로, 데이터를 저장하고 검색하는 데 사용됩니다.",
      "Webpack은 웹 페이지의 디자인과 레이아웃을 관리하기 위한 CSS 프레임워크입니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack은 JavaScript 모듈 번들러로, 여러 개의 JavaScript 파일과 관련 리소스를 하나로 결합하여 웹 애플리케이션을 구성하는 도구입니다. 주요 기능으로 모듈 로딩, 코드 번들링, 리소스 번들링을 제공하며, 코드 스플리팅, 로더, 플러그인을 통한 확장성을 갖추고 있습니다. 이를 통해 웹 개발자는 모듈 시스템을 사용하여 코드를 구조화하고 관리할 수 있으며, 최적화된 번들링을 통해 웹 애플리케이션의 성능을 향상시킬 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 주요 개념 중 하나인 '로더(Loader)'는 어떤 역할을 하며, 어떤 종류의 파일들을 처리하는 데 사용되나요?",
    "options": [
      "'로더'는 웹 애플리케이션의 레이아웃을 구성하는 역할을 하며, HTML 파일을 처리합니다.",
      "'로더'는 JavaScript 파일을 번들링하고 압축하는 역할을 하며, 주로 CSS 파일들을 처리합니다.",
      "'로더'는 웹 애플리케이션에 필요한 리소스 파일들을 처리하는 역할을 하며, JavaScript, CSS, 이미지, 폰트 등 다양한 파일 형식들을 처리합니다.",
      "'로더'는 사용자 인터페이스의 상호작용을 관리하는 역할을 하며, JavaScript와 관련된 파일을 처리합니다."
    ],
    "correct_answer": 2,
    "answer_description": "Webpack의 '로더(Loader)'는 웹 애플리케이션에 필요한 리소스 파일들을 처리하는 역할을 합니다. 이로써 JavaScript, CSS, 이미지, 폰트 등 다양한 파일 형식들을 웹 애플리케이션 번들에 포함시킬 수 있습니다. '로더'는 이러한 파일들을 불러와서 웹팩 번들러가 이해할 수 있는 형태로 변환하거나 처리합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '코드 스플리팅(Code Splitting)'이란 무엇이며, 어떤 장점을 제공하나요?",
    "options": [
      "'코드 스플리팅'은 웹팩 번들에서 코드를 나누어 여러 개의 작은 번들로 분리하는 기술로, 초기 페이지 로딩 시간을 줄이고 성능을 최적화합니다.",
      "'코드 스플리팅'은 웹팩 설정 파일을 나누어 관리하는 기술로, 설정의 복잡성을 줄이고 관리를 용이하게 합니다.",
      "'코드 스플리팅'은 웹팩의 로더 중 하나로, 이미지 및 미디어 파일을 비동기적으로 로딩하는 데 사용됩니다.",
      "'코드 스플리팅'은 웹 애플리케이션에서 사용하는 모든 외부 패키지를 번들에 포함하는 기술로, 애플리케이션 크기를 늘립니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '코드 스플리팅'은 웹팩 번들에서 코드를 나누어 여러 개의 작은 번들로 분리하여 초기 페이지 로딩 시간을 줄이고 성능을 최적화하는 기술입니다. 이를 통해 필요한 코드만 로딩되며, 사용자 경험을 개선하고 애플리케이션 성능을 향상시킬 수 있습니다."
  },

  {
    "category": "Webpack",
    "question": "Webpack의 '플러그인(Plugin)'은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'플러그인'은 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 코드 번들링을 수행합니다.",
      "'플러그인'은 웹팩 번들에 대한 추가 기능을 제공하는 도구로, 번들의 최적화, 파일 생성, 환경 변수 설정 등 다양한 작업을 수행합니다.",
      "'플러그인'은 웹팩의 로더 중 하나로, CSS 파일을 번들에 포함하는 역할을 합니다.",
      "'플러그인'은 웹팩의 설정을 단순화하는 역할을 수행하며, 번들링 과정을 간소화합니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack의 '플러그인(Plugin)'은 웹팩 번들에 대한 추가 기능을 제공하는 도구입니다. 이들 플러그인은 번들의 최적화, 파일 생성, 환경 변수 설정, 번들 결과물 분석 등 다양한 작업을 수행할 수 있습니다. 플러그인은 웹팩의 강력한 확장성을 제공하며, 더 복잡하고 맞춤형 작업을 수행하는 데 사용됩니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '프로덕션 모드(Production Mode)'와 '개발 모드(Development Mode)'의 차이점은 무엇이며, 언제 어떻게 사용되나요?",
    "options": [
      "'프로덕션 모드'는 애플리케이션의 배포 버전을 위해 사용되며, 코드 최적화와 압축을 적용하여 성능을 최대화합니다. '개발 모드'는 개발 중에 사용되며, 디버깅 및 개발 편의성을 위해 추가 정보를 제공합니다.",
      "'프로덕션 모드'와 '개발 모드'는 서로 동일하며, 모드 설정은 웹팩에서 무시됩니다.",
      "'프로덕션 모드'는 개발 중에 사용되며, 더 많은 디버깅 정보를 제공하며, '개발 모드'는 배포 시에 사용되며 코드 최적화와 압축을 수행합니다.",
      "'프로덕션 모드'와 '개발 모드'는 웹팩의 버전 차이에 따라 다르며, 특정 웹팩 버전에서만 사용 가능합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '프로덕션 모드'와 '개발 모드'는 서로 다른 설정으로, '프로덕션 모드'는 애플리케이션의 배포 버전을 위해 사용되며, 코드 최적화와 압축을 적용하여 성능을 최대화합니다. 반면 '개발 모드'는 개발 중에 사용되며, 디버깅 및 개발 편의성을 위해 추가 정보를 제공합니다. 이러한 모드 설정은 웹팩의 'mode' 옵션으로 지정하며, 적절한 모드를 선택하여 개발 및 배포 프로세스를 관리합니다."
  },

  {
    "category": "Webpack",
    "question": "Webpack의 '모듈 번들링(Module Bundling)'은 무엇이며, 어떤 이점을 제공하나요?",
    "options": [
      "'모듈 번들링'은 웹 애플리케이션을 여러 개의 모듈로 나누고, 이 모듈들을 하나의 번들로 결합하는 프로세스를 의미하며, 모듈 간의 의존성을 관리합니다.",
      "'모듈 번들링'은 웹 페이지의 텍스트 내용을 압축하여 페이지 로딩 시간을 단축하는 기술을 의미하며, 성능을 향상시킵니다.",
      "'모듈 번들링'은 웹 애플리케이션에서 사용되는 이미지와 비디오를 번들에 포함하는 기술로, 화면에 빠르게 렌더링됩니다.",
      "'모듈 번들링'은 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 웹 애플리케이션의 로직을 관리합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '모듈 번들링(Module Bundling)'은 웹 애플리케이션을 여러 개의 모듈로 나누고, 이 모듈들을 하나의 번들로 결합하는 프로세스를 의미합니다. 이를 통해 모듈 간의 의존성을 관리하고, 웹 애플리케이션의 코드를 구조화할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '로더(Loader)'와 '플러그인(Plugin)'의 차이점은 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'로더'는 웹팩 번들러에 대한 추가 작업을 수행하며, 주로 파일 변환 및 전처리 작업에 사용됩니다. '플러그인'은 웹팩 번들러의 빌드 과정에 개입하여 번들 결과물을 수정하거나 추가 기능을 제공합니다.",
      "'로더'는 웹팩 설정 파일 내에서 사용자 정의 함수를 실행하는 기능을 제공하며, 웹 애플리케이션의 로직을 관리합니다. '플러그인'은 번들링된 파일을 웹 페이지에 삽입하거나 최적화하는 역할을 합니다.",
      "'로더'와 '플러그인'은 웹팩의 버전 차이에 따라 다르며, 모두 필수적으로 사용되어야 합니다.",
      "'로더'는 웹팩 번들러에 대한 설정을 관리하며, '플러그인'은 웹 애플리케이션의 상태를 관리하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '로더(Loader)'는 웹팩 번들러에 대한 추가 작업을 수행하며, 주로 파일 변환 및 전처리 작업에 사용됩니다. '플러그인(Plugin)'은 웹팩 번들러의 빌드 과정에 개입하여 번들 결과물을 수정하거나 추가 기능을 제공합니다. 이 두 가지는 번들링 프로세스를 커스터마이징하고 확장하는 데 사용됩니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '로더(Loader)'를 사용하여 어떤 종류의 파일을 처리하고 변환할 수 있나요?",
    "options": [
      "'로더'를 사용하여 JavaScript 파일을 번들링하고 압축할 수 있습니다.",
      "'로더'를 사용하여 CSS 파일을 번들링하고 최적화할 수 있습니다.",
      "'로더'를 사용하여 이미지 및 폰트 파일을 번들링하고 압축할 수 있습니다.",
      "'로더'를 사용하여 웹 애플리케이션의 데이터베이스를 관리할 수 있습니다."
    ],
    "correct_answer": 2,
    "answer_description": "Webpack의 '로더(Loader)'를 사용하여 이미지 및 폰트 파일과 같은 리소스 파일을 번들링하고 필요한 변환 작업을 수행할 수 있습니다. 이를 통해 웹 애플리케이션에서 이미지 및 폰트를 효율적으로 처리하고 압축할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '번들(Bundle)'이란 무엇이며, 어떤 장점을 가지고 있나요?",
    "options": [
      "'번들'은 웹 애플리케이션의 화면 구성을 정의하는 파일로, HTML, CSS, JavaScript 등 여러 리소스를 하나의 번들로 묶어 관리합니다.",
      "'번들'은 웹팩의 설정 파일을 의미하며, 웹 애플리케이션의 환경 설정을 저장합니다.",
      "'번들'은 웹 애플리케이션의 이미지 및 비디오 파일을 번들에 포함하는 역할을 합니다.",
      "'번들'은 웹 애플리케이션의 디자인 및 레이아웃을 구성하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '번들(Bundle)'은 웹 애플리케이션에서 사용되는 HTML, CSS, JavaScript 등 여러 리소스 파일을 하나의 번들로 묶어 관리하는 역할을 합니다. 이를 통해 파일 간의 의존성을 관리하고, 로딩 속도를 최적화할 수 있습니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '엔트리 포인트(Entry Point)'는 무엇이며, 어떤 역할을 수행하나요?",
    "options": [
      "'엔트리 포인트'는 웹 애플리케이션의 시작점을 나타내며, 웹팩은 이 포인트를 기반으로 의존성 그래프를 구성합니다.",
      "'엔트리 포인트'는 웹팩 설정 파일 내에서 사용자 인터페이스의 시작 위치를 지정하는 역할을 합니다.",
      "'엔트리 포인트'는 웹 애플리케이션에서 사용자 인터페이스의 디자인을 담당하는 역할을 합니다.",
      "'엔트리 포인트'는 웹 애플리케이션의 데이터베이스 연결을 설정하는 역할을 합니다."
    ],
    "correct_answer": 0,
    "answer_description": "Webpack의 '엔트리 포인트(Entry Point)'는 웹 애플리케이션의 시작점을 나타내며, 웹팩은 이 포인트를 기반으로 의존성 그래프를 구성합니다. 이를 통해 웹팩은 필요한 모듈들을 로딩하고 번들링하여 애플리케이션을 구성합니다."
  },
  {
    "category": "Webpack",
    "question": "Webpack의 '웹팩 로더(Webpack Loader)'가 하는 역할은 무엇이며, 어떤 유형의 파일들을 처리할 수 있나요?",
    "options": [
      "'웹팩 로더'는 웹팩 설정 파일을 로드하는 역할을 하며, JavaScript 파일을 처리합니다.",
      "'웹팩 로더'는 웹팩 번들에 이미지 및 폰트 파일을 포함하며, 이러한 리소스 파일을 처리합니다.",
      "'웹팩 로더'는 웹 애플리케이션의 스타일과 레이아웃을 설정하는 역할을 하며, CSS 파일을 처리합니다.",
      "'웹팩 로더'는 웹 애플리케이션의 데이터를 관리하는 역할을 하며, JSON 파일을 처리합니다."
    ],
    "correct_answer": 1,
    "answer_description": "Webpack의 '웹팩 로더(Webpack Loader)'는 다양한 유형의 파일들을 처리하는 역할을 합니다. 주로 이미지 및 폰트 파일과 같은 리소스 파일을 로드하고 번들에 포함할 수 있으며, 필요한 변환 작업을 수행합니다. 이를 통해 웹 애플리케이션에서 리소스 파일을 효율적으로 처리할 수 있습니다."
  }
]
